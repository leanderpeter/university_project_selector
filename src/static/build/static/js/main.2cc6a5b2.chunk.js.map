{"version":3,"sources":["components/images/pascal.jpg","components/images/Alex.jpg","components/images/Daria.jpg","components/images/Jannik.jpg","components/images/Raphael.jpg","components/images/Leander.jpg","components/dialogs/ProfileDropDown.js","components/layout/Header.js","api/BusinessObject.js","api/NamedBusinessObject.js","api/ProjektBO.js","api/PersonBO.js","api/StudentBO.js","api/TeilnahmeBO.js","api/BewertungBO.js","api/ModulBO.js","api/SemesterBO.js","api/ProjektartBO.js","api/ElectivAPI.js","components/dialogs/ContextErrorMessage.js","components/dialogs/LoadingProgress.js","components/ProjektListeEintrag.js","components/ProjektListe.js","components/dialogs/ProjektForm.js","components/dialogs/ProjektDelete.js","components/ProjektDozentListeEintrag.js","components/ProjektDozentListe.js","components/pages/About.js","components/dialogs/AddStudent.js","Theme.js","components/pages/SignIn.js","components/MeineProjekteEintrag.js","components/MeineProjekte.js","components/SemesterberichtEintrag.js","components/Semesterbericht.js","components/dialogs/AddStudentEintrag.js","components/ProjektPflegenEintrag.js","components/ProjektPflegen.js","components/NotenlisteEintrag.js","components/Notenliste.js","firebaseconfig.js","components/ProjektverwaltungListeEintrag.js","components/ProjektverwaltungListe.js","components/Administration.js","components/dialogs/ModulForm.js","components/dialogs/ModulDelete.js","components/ModulListeEintrag.js","components/ModulListe.js","components/dialogs/SemesterForm.js","components/dialogs/SemesterDelete.js","components/SemesterListeEintrag.js","components/SemesterListe.js","components/dialogs/ProjektartenForm.js","components/dialogs/ProjektartDelete.js","components/ProjektartListeEintrag.js","components/ProjektartListe.js","components/dialogs/StudentForm.js","components/StudentListeEintrag.js","components/StudentListe.js","components/dialogs/UserForm.js","components/UserListeEintrag.js","components/UserListe.js","App.js","index.js"],"names":["module","exports","ProfileDropDown","props","createRef","handleAvatarButtonClick","setState","open","state","handleClose","handleSignOutButtonClicked","firebase","auth","signOut","this","classes","user","IconButton","className","avatarButton","ref","onClick","Avatar","src","photoURL","Popover","anchorEl","current","onClose","anchorOrigin","vertical","horizontal","transformOrigin","ClickAwayListener","onClickAway","Paper","profileBox","Typography","align","Divider","divider","variant","displayName","email","Grid","container","justify","item","Button","color","Component","withStyles","theme","float","margin","spacing","padding","background","palette","default","Header","handleTabChange","e","newIndex","tabindex","currentStudent","currentPerson","root","text1","component","text2","Tabs","indicatorColor","textColor","centered","value","onChange","Tab","label","RouterLink","to","rolle","tab","withRouter","width","minWidth","paddingLeft","marginTop","marginBottom","BusinessObject","id","result","prop","NamedBusinessObject","aname","name","ProjektBO","aid","amax_teilnehmer","aprojektbeschreibung","abetreuer","aexterner_partner","awoechentlich","aanzahl_block_vor","aanzahl_block_in","apraeferierte_block","abes_raum","araum","asprache","adozent","azustand","ahalbjahr","aart","aanzahlTeilnehmer","ateilnehmerListe","max_teilnehmer","beschreibung","betreuer","externer_partner","woechentlich","anzahl_block_vor","anzahl_block_in","praeferierte_block","bes_raum","raum","sprache","dozent","aktueller_zustand","halbjahr","art","anzahlTeilnehmer","teilnehmerListe","ects","aects","projekte","results","Array","isArray","forEach","c","Object","setPrototypeOf","prototype","push","PersonBO","aemail","agoogle_user_id","arolle","google_user_id","personen","StudentBO","amat_nr","akuerzel","mat_nr","kuerzel","studenten","TeilnahmeBO","ateilnehmer","alehrangebot","aanrechnung","aresultat","teilnehmer","lehrangebot","anrechnung","resultat","teilnahmen","BewertungBO","anote","note","bewertungen","ModulBO","aedv_nr","edv_nr","SemesterBO","semester","ProjektartBO","asws","sws","projektart","ElectivAPI","projektId","zustandId","projektname","zustand_id","dozent_id","student_id","semester_id","modul_id","lehrangebotId","teilnehmerId","matrNr","projekt_id","url","init","fetch","credentials","then","res","ok","Error","status","statusText","json","method","responseJSON","projektBOs","fromJSON","console","info","Promise","resolve","zustand","projektartBos","projektartBO","headers","body","JSON","stringify","responseProjektartBO","sort","a","b","projektBO","responseProjektBO","personBO","studentID","teilnahmeBOs","studentBO","teilnahmeBO","getID","responseTeilnahmeBO","bewertungBO","bewertungBOs","modulBOs","modulBO","responseModulBO","studentBOs","semesterBO","semesterBOs","responseSemesterBO","personBOs","ContextErrorMessage","error","contextErrorMsg","onReload","Alert","severity","AlertTitle","margins","message","startIcon","LoadingProgress","show","LinearProgress","ProjektListeEintrag","expansionPanelStateChanged","onExpandedStateChange","projekt","teilnahmeButtonClicked","event","stopPropagation","teilnahmeButtonDisabled","teilnahmeAbwaehlenButtonDisabled","setAnzahlTeilnehmer","parseInt","projektarten","ectsCountFunc","getAPI","setTeilnahme","teilnahmeAbwaehlenButtonClicked","deleteTeilnahme","teilnahmeChanged","getInfosMount","indexOf","length","ectsAdded","getInfosUpdate","showProjektForm","showProjektDeleteDialog","prevProps","ectsCount","expandedState","Accordion","defaultExpanded","expanded","AccordionSummary","expandIcon","alignItems","heading","getname","getdozent","xs","getAnzahlTeilnehmer","getmax_teilnehmer","teilnahmeAbwaehlenButton","size","disabled","teilnahmeButton","AccordionDetails","details","getbeschreibung","getbetreuer","getraum","getexterner_partner","getwoechentlich","getanzahl_block_vor","getanzahl_block_in","getsprache","getpraeferierte_block","paddingTop","paddingBottom","ProjektListe","setTimeout","getProjekte","getProjekteByZustand","projekteBOs","aktuelleWahl","filteredProjekte","loadingInProgress","catch","getGenehmigteProjekte","genehmigteProjekte","getProjektarten","getProjektart","projekteartBos","getPPersonen","getPersons","newID","expandedProjektID","expandedID","location","expandProjekt","projektFilter","ausgewaehlteEcts","showProjekteForm","wahlFreigeben","bind","neuerZustand","i","setAktuellerZustand","setZustandAtProjekt","grid","buttonEcts","disableRipple","style","backgroundColor","filter","getArt","map","key","marginLeft","marginRight","ProjektForm","addProjekt","newProjekt","postProjekte_hat_module","modulwahl","baseState","updatingInProgress","updatingError","updateProjekt","setname","setmax_teilnehmer","setbeschreibung","setbetreuer","setexterner_partner","setwoechentlich","setanzahl_block_vor","setanzahl_block_in","setpraeferierte_block","setbes_raum","setraum","setsprache","setHalbjahr","setArt","setTeilnehmerListe","updateProjekte_hat_module","getUpdateInfos","nm","mt","bs","bt","ep","wt","av","ai","pb","br","getbes_raum","rm","sp","dz","at","tl","getTeilnehmerListe","hj","getHalbjahr","pa","boolvor","boolin","boolpraef","boolBlock_vor","boolBlock_in","boolBlockpraef","textFieldValueChange","target","trim","numberValueChange","test","checkboxValueChange","checked","radioValueChange","getSemester","loadingTeilnahmeError","projektartBOs","log","getModule","getModule_by_projekt_id","modulIDs","modul","modulwahlBOs","handleSemesterChange","halbjahrEdited","handleArtChange","artEdited","handleModulChange","moduleEdited","modulwahlChange","getInfos","nameValidationFailed","nameEdited","max_teilnehmerValidationFailed","max_teilnehmerEdited","beschreibungValidationFailed","beschreibungEdited","betreuerValidationFailed","betreuerEdited","externer_partnerValidationFailed","externer_partnerEdited","woechentlichValidationFailed","woechentlichEdited","anzahl_block_vorValidationFailed","anzahl_block_vorEdited","anzahl_block_inValidationFailed","anzahl_block_inEdited","praeferierte_blockValidationFailed","praeferierte_blockEdited","bes_raumValidationFailed","bes_raumEdited","raumValidationFailed","raumEdited","spracheValidationFailed","spracheEdited","dozentValidationFailed","dozentEdited","anzahlTeilnehmerValidationFailed","anzahlTeilnehmerEdited","teilnehmerListeValidationFailed","teilnehmerListeEdited","addingInProgress","addingError","title","header","Dialog","onEnter","maxWidth","DialogTitle","closeButton","DialogContent","DialogContentText","noValidate","autoComplete","TextField","autoFocus","type","required","fullWidth","helperText","FormControl","RadioGroup","radio","row","aria-label","defaultValue","FormControlLabel","control","Radio","labelPlacement","formControl","InputLabel","Select","MenuItem","formControlpa","formControlmo","multiple","renderValue","chips","Chip","chip","Checkbox","ListItemText","getEdv_nr","FormGroup","multiline","rows","DialogActions","position","right","top","grey","display","flexWrap","ProjektDelete","closeSnackbar","reason","showSnackbar","deleteProjekt","Snackbar","autoHideDuration","ProjektDozentListeEintrag","projektFormClosed","bearbeitenButtonClicked","projektDeleteButtonClicked","projektDeleteClosed","getPerson","dozentName","Tooltip","placement","projektDeleteButton","bearbeitenButton","ProjektDozentListe","getrolle","getProjekteByZustandByDozent","addProjektButtonClicked","newProjektList","filterValue","filterFieldValueChange","button","useStyles","makeStyles","content","textAlign","img","hyperlink","textDecoration","primary","main","About","studentenvar","Fragment","paper1","Card","root1","alt","Raphael","CardContent","gutterBottom","href","paper","Jannik","Leander","Daria","Alex","Pascal","white","createMuiTheme","black","darkgrey","contrastText","dark","colors","blueGrey","light","secondary","red","success","green","blue","warning","orange","text","link","icon","SignIn","handleSignInButtonClicked","document","cookie","getElementById","onSignIn","handleChange","rolleEdited","kuerzelEdited","mat_nrEdited","lenght","kuerzelValidationFailed","mat_nrValidationFailed","form","StyledTableCell","head","common","fontSize","TableCell","StyledTableRow","action","hover","TableRow","MeineProjekteEintrag","getProjekt","teilnahme","projektID","projektName","projektZustand","getBewertung","getSemester_by_id","getECTS","getProjektartById","ECTS","getnote","edv","setAnrechnung","updateTeilnahme","getTeilnahmen","breite","colspan","laden","table","MeineProjekte","printSemesterbericht","window","print","currentStudentName","currentStudentmat_nr","getmat_nr","textTransform","TableContainer","Table","TableHead","TableBody","paddingRight","SemesterberichtEintrag","Semesterbericht","getTeilnahmenBySemester","semesterwahl","getSemesterOfStudent","semesterChange","warnung","AddStudentEintrag","addTeilnahme","addButtonDisabled","currentProjekt","student","ListItem","ListItemSecondaryAction","AddStudent","getStudenten","teilnahmeids","studentenids","splice","filteredStudenten","loadingProjekteError","handleOpen","toLowerCase","nameContainsValue","includes","mat_nrContainsValue","toString","studentFilter","clearFilterFieldButtonClicked","onEntered","dialogtitle","InputProps","endAdornment","InputAdornment","List","ProjektPflegenEintrag","reloadteilnahmen","getStudentByID","getteilnehmer","studentName","getBewertungen","bewertung","setResultat","currentProjektBO","scope","selectEmpty","ProjektPflegen","getAbgeschlosseneProjekte","abgeschlosseneProjekte","getTeilnahmenByProjektId","bewertungAbgeschlossenButtonClicked","addStudentButtonClicked","showAddStudent","addStudentClosed","handleChangeProjektzustand","projektzustand","sm","select","selectprojekt","Fab","addButton","NotenlisteEintrag","Notenliste","getTeilnahmen_by_modul_und_semester","printNotenliste","handleReload","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ProjektverwaltungListeEintrag","annehmenButtonClicked","projektAnnehmenButton","projektAblehnenButton","ablehnenButtonClicked","ProjektverwaltungListe","Administration","tabs","ModulForm","addModul","newModul","setID","setEdv_nr","addingProgress","updateModul","edv_nrValidationFailed","edv_nrEdited","textfield","ModulDelete","deleteModul","ModulListeEintrag","modulFormClosed","showModulForm","modulDeleteButtonClicked","showModulDelete","modulDeleteClosed","ModulListe","addButtonClicked","filteredModule","edv_nrContainsValue","modulFilter","newModulList","showDeleteForm","dense","SemesterForm","addSemester","newSemester","updateSemester","SemesterDelete","deleteSemester","SemesterListeEintrag","semesterFormClosed","showSemesterForm","semesterDeleteButtonClicked","showSemesterDelete","semesterDeleteClosed","SemesterListe","filteredSemester","semesterFilter","newSemesterList","ProjektartenForm","addProjektart","newProjektart","set_ects","set_sws","updateProjektart","get_ects","get_sws","ectsValidationFailed","ectsEdited","swsValidationFailed","swsEdited","ProjektartDelete","deleteProjektart","ProjektartListeEintrag","projektartFormClosed","showProjektartForm","projektartDeleteButtonClicked","showProjektartDelete","projektartDeleteClosed","ProjektartListe","showProjektartenForm","filteredProjektarten","projektartFilter","newProjektartList","StudentForm","updateUser","updateStudent","setStateValueChange","StudentListeEintrag","getUser","showUserForm","userFormClosed","StudentListe","userBOs","filteredUser","userFilter","UserForm","emailValidationFailed","emailEdited","UserListeEintrag","UserListe","App","handleAuthStateChange","authLoading","getIdToken","token","currentUser","authError","getUserByGoogleID","handleSignIn","provider","GoogleAuthProvider","signInWithRedirect","getCookie","getStudentByGoogleID","uid","getPersonByGoogleID","suche","substring","ende","cook","unescape","appError","initializeApp","languageCode","onAuthStateChanged","ThemeProvider","Theme","CssBaseline","basename","process","Container","from","path","React","ReactDOM","render"],"mappings":"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","file":"static/js/main.2cc6a5b2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pascal.3da9eb9b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Alex.7a99dc3b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Daria.57ac10fa.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Jannik.faf59a7d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Raphael.0fe03bd1.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Leander.562d57ad.jpg\";","import React, { Component, createRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { Popover, IconButton, Avatar, ClickAwayListener, withStyles, Typography, Paper, Button, Grid, Divider } from '@material-ui/core';\nimport firebase from 'firebase/app';\n\n/*\nshows drop down list of projects -> information inside\n*/\n\nclass ProfileDropDown extends Component {\n\n  // a refernce to the avatar button\n  #avatarButtonRef = createRef();\n\n  constructor(props) {\n    super(props);\n\n    // Init the state\n    this.state = {\n      open: false,\n    }\n  }\n\n  /** Handles click events on the avatar button and toggels visibility */\n  handleAvatarButtonClick = () => {\n    this.setState({\n      open: !this.state.open\n    });\n  }\n\n  /** \n   * Handles click events from the ClickAwayListener.\n   * \n   * @see See Material-UIs [ClickAwayListener](https://material-ui.com/components/click-away-listener/)\n   */\n  handleClose = () => {\n    this.setState({\n      open: false\n    });\n  }\n\n  /** \n   * Handles the click event of the sign in button and uses the firebase.auth() component to sign in.\n   * \n   * @see See Google [firebase.auth](https://firebase.google.com/docs/reference/js/firebase.auth.Auth)\n   * @see See Google [firebase.auth().signOut](https://firebase.google.com/docs/reference/js/firebase.auth.Auth#signout)\n   */\n  handleSignOutButtonClicked = () => {\n    firebase.auth().signOut();\n  }\n\n  /** Renders the profile drop down if a loggin user is given as a prop */\n  render() {\n    const { classes, user } = this.props;\n    const { open } = this.state;\n\n    return (\n      user ?\n        <div>\n          <IconButton className={classes.avatarButton} ref={this.#avatarButtonRef} onClick={this.handleAvatarButtonClick}>\n            <Avatar src={user.photoURL} />\n          </IconButton>\n\n          <Popover open={open} anchorEl={this.#avatarButtonRef.current} onClose={this.handleClose}\n            anchorOrigin={{\n              vertical: 'top',\n              horizontal: 'left',\n            }}\n            transformOrigin={{\n              vertical: 'top',\n              horizontal: 'right',\n            }}>\n            <ClickAwayListener onClickAway={this.handleClose}>\n              <Paper className={classes.profileBox}>\n                <Typography align='center'>Hello</Typography>\n                <Divider className={classes.divider} />\n                <Typography align='center' variant='body2'>{user.displayName}</Typography>\n                <Typography align='center' variant='body2'>{user.email}</Typography>\n                <Divider className={classes.divider} />\n                <Grid container justify='center'>\n                  <Grid item>\n                    <Button color='primary' onClick={this.handleSignOutButtonClicked}>Logout</Button>\n                  </Grid>\n                </Grid>\n              </Paper>\n            </ClickAwayListener>\n          </Popover>\n        </div>\n        : null\n    )\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  avatarButton: {\n    float: 'right'\n  },\n  divider: {\n    margin: theme.spacing(1),\n  },\n  profileBox: {\n    padding: theme.spacing(1),\n    background: theme.palette.background.default,\n  }\n});\n\n/** PropTypes */\nProfileDropDown.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** The logged in firesbase user */\n  user: PropTypes.object,\n}\n\nexport default withStyles(styles)(ProfileDropDown)\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Paper, Typography, Tabs, Tab } from '@material-ui/core';\nimport { Link as RouterLink } from 'react-router-dom';\nimport ProfileDropDown from '../dialogs/ProfileDropDown';\nimport { withRouter } from 'react-router-dom';\n\n/**\n * \n * Zeigt den Header mit den verfügbaren Navigations Tabs.\n * Je nach Rolle (Student, Dozent, Admin) sind andere Tabs zum auswählen verfügbar.\n * \n * @see See Material-UIs [Tabs](https://material-ui.com/components/tabs/)\n * @see See Material-UIs [Paper](https://material-ui.com/components/paper/)\n * \n * \n**/\n\nclass Header extends Component {\n\tconstructor(props) {\n    super(props);\n  \n\n\t\t//init empty state\n\t\tthis.state = {\n\t\t\ttabindex: 0\n\t\t};\n\t}\n\t// handles changes of the state of tabs component\n\thandleTabChange = (e, newIndex) => {\n\t\tthis.setState({\n\t\t\ttabindex: newIndex\n\t\t})\n\t};\n\t// Rendert Komponente\n\trender() {\n    const { classes, user, currentStudent, currentPerson } = this.props;\n\t\treturn (\n      <Paper className={classes.root} variant='outlined' >\n        <ProfileDropDown user={user} />\n        <Typography className={classes.text1} variant='h3' component='h1' align='center'>\n          HdM Wahlfach App\n        </Typography>\n        <Typography className={classes.text2} variant='h5' component='h2' align='center'>\n        STUDIEREN. WISSEN. MACHEN.\n        </Typography>\n        {\n          user ?\n            \n              <>\n              {currentStudent ?\n                <>\n                <Paper variant='outlined'>\n                  <Tabs indicatorColor='secondary' textColor='secondary' variant='fullWidth' centered value={this.state.tabindex} onChange={this.handleTabChange}>\n                    <Tab label='Projektwahl' component={RouterLink} to={`/projekte`} />\n                    <Tab label=\"Meine Projekte\" component={RouterLink} to={'/meineprojekte'}/>\n                    <Tab label=\"Semesterbericht\" component={RouterLink} to={'/semesterbericht'}/>\n                    <Tab label='About' component={RouterLink} to={`/about`} />\n                  </Tabs>\n                </Paper>\n                </>\n                :null\n              }\n              {currentPerson?\n                <>\n                  {currentPerson.rolle === \"Dozent\"?\n                  <>\n                  <Paper variant='outlined'>\n                    <Tabs indicatorColor='secondary' textColor='secondary' variant='fullWidth' centered value={this.state.tabindex} onChange={this.handleTabChange}  >\n                      <Tab label='Wahl' component={RouterLink} to={`/projekte`} />\n                      <Tab label='Projektpflege' component={RouterLink} to={`/projektpflegen`} />\n                      <Tab label='Projektverwaltung' component={RouterLink} to={`/projekteDozent`} />\n                      <Tab label='About' component={RouterLink} to={`/about`} />\n                    </Tabs>\n                  </Paper>\n                  </>\n                  :null\n                  }\n                  {currentPerson.rolle === \"Admin\"?\n                  <>\n                  <Paper variant='outlined'>\n                    <Tabs indicatorColor='secondary' textColor='secondary' centered value={this.state.tabindex} onChange={this.handleTabChange}  >\n                      <Tab className={classes.tab} label='Wahl' component={RouterLink} to={`/projekte`} />\n                      <Tab className={classes.tab} label='Pflege' component={RouterLink} to={`/projektpflegen`} />\n                      <Tab className={classes.tab} label='Verwaltung' component={RouterLink} to={`/projekteDozent`} />\n                      <Tab className={classes.tab} label='Prüfung' component={RouterLink} to={`/projektverwaltung`} />\n                      <Tab className={classes.tab} label=\"Notenliste\" component={RouterLink} to={'/notenliste'}/>\n                      <Tab className={classes.tab} label='Administration' component={RouterLink} to={`/administration/semester`} />\n                    </Tabs>\n                  </Paper>\n                  </>\n                  :null\n                  }\n                </>\n              :null\n              }\n            </>\n            : null\n        }\n      </Paper>\n    )\n  }\n}\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  },\n  tab: {\n    minWidth: 150, // a number of your choice\n    width: 150, // a number of your choice\n  },\n  text1: {\n    paddingLeft: '64px',\n    marginTop: theme.spacing(2)\n  },\n  text2: {\n    marginBottom: theme.spacing(2),\n  },\n\n});\n\n\n// Prop Type\nHeader.propTypes = {\n\t// logged in Firebase user/person\n\tuser: PropTypes.object,\n}\n\nexport default withRouter(withStyles(styles)(Header));","/*\nBasisklasse fuer alle BO's welche eine ID besitzen\n*/\n\nexport default class BusinessObject {\n\t/*\n\tNull constructor\n\t*/\n\tconstructor(id){\n\t\tthis.id = id;\n\t}\n\n\t/*\n\tJedes Business Object erhaelt eine neue ID, die aId.\n\t*/\n\tsetID(id){\n\t\tthis.id =id\n\t}\n\n\t/*\n\tGebe die ID vom BO zurueck\n\t*/\n\tgetID(){\n\t\treturn this.id;\n\t}\n\n\t/*\n\tGibt eine darstellung des BO's in Form eines String zuruck\n\t*/\n\ttoString() {\n\t\tlet result = '';\n\t\tfor (var prop in this) {\n\t\t\tresult += prop + ': ' +this[prop] + ' ';\n\t\t}\n\t\treturn result;\n\t}\n}","import BusinessObject from \"./BusinessObject\";\n\n/*\nBasisklasse fuer alle BO's welche einen Namen besitzen\n*/\n\nexport default class NamedBusinessObject extends BusinessObject{\n\n\tconstructor(aname){\n        super();\n        this.name = aname;\n    }\n    \n\t/*\n\tErhalte Namen\n\t*/\n\tgetname(){\n\t\treturn this.name;\n\t}\n\t/*\n\tSetze Namen\n\t*/\n\tsetname(aname){\n\t\tthis.name = aname;  \n\t}\n}\n","import NamedBusinessObject from './NamedBusinessObject';\n\n/*\nRealisierung eines ProjektBOs mit allen Attributen\n*/\n\nexport default class ProjektBO extends NamedBusinessObject{\n\tconstructor(aid, aname, amax_teilnehmer, aprojektbeschreibung, abetreuer, aexterner_partner, awoechentlich, aanzahl_block_vor, aanzahl_block_in, apraeferierte_block, abes_raum, araum, asprache, adozent, azustand, ahalbjahr, aart, aanzahlTeilnehmer,ateilnehmerListe){\n\t\tsuper(aid, aname);\n\t\tthis.id = aid;\n\t\tthis.name = aname;\n\t\tthis.max_teilnehmer = amax_teilnehmer;\n\t\tthis.beschreibung = aprojektbeschreibung;\n\t\tthis.betreuer = abetreuer;\n\t\tthis.externer_partner = aexterner_partner;\n\t\tthis.woechentlich =awoechentlich;\n\t\tthis.anzahl_block_vor = aanzahl_block_vor;\n\t\tthis.anzahl_block_in = aanzahl_block_in;\n\t\tthis.praeferierte_block = apraeferierte_block;\n\t\tthis.bes_raum = abes_raum;\n\t\tthis.raum = araum;\n\t\tthis.sprache = asprache;\n\t\tthis.dozent = adozent;\n\t\tthis.aktueller_zustand = azustand\n\t\tthis.halbjahr = ahalbjahr;\n\t\tthis.art = aart;\n\t\tthis.anzahlTeilnehmer = aanzahlTeilnehmer;\n\t\tthis.teilnehmerListe = ateilnehmerListe;\n\t}\n\n\n\t/*\n\tErhalte max_teilnehmer\n\t*/\n\tgetmax_teilnehmer(){\n\t\treturn this.max_teilnehmer;\n\t}\n\n\t/*\n\tSetze max_teilnehmer\n\t*/\n\tsetmax_teilnehmer(amax_teilnehmer){\n\t\tthis.max_teilnehmer = amax_teilnehmer;  \n\t}\n\n\t/*\n\tErhalte beschreibung\n\t*/\n\tgetbeschreibung(){\n\t\treturn this.beschreibung;\n\t}\n\t/*\n\tSetze beschreibung\n\t*/\n\tsetbeschreibung(aprojektbeschreibung){\n\t\tthis.beschreibung = aprojektbeschreibung;  \n\t}\n\n\t/*\n\tErhalte betreuer \n\t*/\n\tgetbetreuer(){\n\t\treturn this.betreuer;\n\t}\n\t/*\n\tSetze betruer\n\t*/\n\tsetbetreuer(abetreuer){\n\t\tthis.betreuer = abetreuer;  \n\t}\n\t/*\n\tErhalte externer_partner\n\t*/\n\tgetexterner_partner(){\n\t\treturn this.externer_partner;\n\t}\n\t/*\n\tSetze externer_partner\n\t*/\n\tsetexterner_partner(aexterner_partner){\n\t\tthis.externer_partner = aexterner_partner;  \n\t}\n\t/*\n\tErhalte woechentlich\n\t*/\n\tgetwoechentlich(){\n\t\treturn this.woechentlich;\n\t}\n\t/*\n\tSetze woechentlich\n\t*/\n\tsetwoechentlich(awoechentlich){\n\t\tthis.woechentlich = awoechentlich;  \n\t}\n\t/*\n\tErhalte anzahl_block_vor\n\t*/\n\tgetanzahl_block_vor(){\n\t\treturn this.anzahl_block_vor;\n\t}\n\t/*\n\tSetze anzahl_block_vor\n\t*/\n\tsetanzahl_block_vor(aanzahl_block_vor){\n\t\tthis.anzahl_block_vor = aanzahl_block_vor;  \n\t}\t\n\t/*\n\tErhalte anzahl_block_in\n\t*/\n\tgetanzahl_block_in(){\n\t\treturn this.anzahl_block_in;\n\t}\n\t/*\n\tSetze anzahl_block_in\n\t*/\n\tsetanzahl_block_in(aanzahl_block_in){\n\t\tthis.anzahl_block_in = aanzahl_block_in;  \n\t}\n\t/*\n\tErhalte praeferierte_block\n\t*/\n\tgetpraeferierte_block(){\n\t\treturn this.praeferierte_block;\n\t}\n\t/*\n\tSetze praeferierte_block\n\t*/\n\tsetpraeferierte_block(apraeferierte_block){\n\t\tthis.praeferierte_block = apraeferierte_block;  \n\t}\n\t/*\n\tErhalte bes_raum\n\t*/\n\tgetbes_raum(){\n\t\treturn this.bes_raum;\n\t}\n\t/*\n\tSetze bes_raum\n\t*/\n\tsetbes_raum(abes_raum){\n\t\tthis.bes_raum = abes_raum;  \n\t}\n\t/*\n\tErhalte raum\n\t*/\n\tgetraum(){\n\t\treturn this.raum;\n\t}\n\t/*\n\tSetze raum\n\t*/\n\tsetraum(araum){\n\t\tthis.raum = araum;  \n\t}\n\t/*\n\tErhalte sprache\n\t*/\n\tgetsprache(){\n\t\treturn this.sprache;\n\t}\n\t/*\n\tSetze sprache\n\t*/\n\tsetsprache(asprache){\n\t\tthis.sprache = asprache;  \n\t}\n\t/*\n\tErhalte dozent\n\t*/\n\tgetdozent(){\n\t\treturn this.dozent;\n\t}\n\t/*\n\tSetze dozent\n\t*/\n\tsetdozent(adozent){\n\t\tthis.dozent = adozent;\n\t}\n\n\t/*\n\tErhalte aktuellen Zustand\n\t*/\n\tgetAktuellerZustand(){\n\t\treturn this.aktueller_zustand;\n\t}\n\t/*\n\tSetze aktuellen Zustand\n\t*/\n\tsetAktuellerZustand(azustand){\n\t\tthis.aktueller_zustand = azustand;  \n\t}\n\n\t/*\n\tErhalte  Halbjahr\n\t*/\n\tgetHalbjahr(){\n\t\treturn this.halbjahr;\n\t}\n\n    /*\n\tSetze  Halbjahr\n\t*/\n\tsetHalbjahr(ahalbjahr){\n\t\tthis.halbjahr = ahalbjahr;\n\t}\n\t\t\t/*\n\tErhalte  Art\n\t*/\n\tgetArt(){\n\t\treturn this.art;\n\t}\n\n    /*\n\tSetze  Art\n\t*/\n\tsetArt(aart){\n\t\tthis.art = aart;\n\t}\n\n    /*\n\tErhalte Anzahl Teilnehmer\n\t*/\n\tgetAnzahlTeilnehmer(){\n\t\treturn this.anzahlTeilnehmer;\n\t}\n\n    /*\n\tSetze Anzahl Teilnehmer\n\t*/\n\tsetAnzahlTeilnehmer(aanzahlTeilnehmer){\n\t\tthis.anzahlTeilnehmer = aanzahlTeilnehmer;\n\t}\n\n\t/*\n\tErhalte TeilnehmerListe\n\t*/\n\tgetTeilnehmerListe(){\n\t\treturn this.teilnehmerListe;\n\t}\n\n    /*\n\tSetze TeilnehmerListe\n\t*/\n\tsetTeilnehmerListe(ateilnehmerListe){\n\t\tthis.teilnehmerListe = ateilnehmerListe;\n\t}\n\n\t/*\n\tErhalte Anzahl ECTS\n\t*/\n\tgetECTS(){\n\t\treturn this.ects;\n\t}\n\n    /*\n\tSetze Anzahl ECTS\n\t*/\n\tsetECTS(aects){\n\t\tthis.ects = aects;\n\t}\n\t\n\t//Return Array bzw. Objekt von Projekten aus einem JSON\n\tstatic fromJSON(projekte) {\n\t\tlet results = null;\n\t\tif (Array.isArray(projekte)) {\n\t\t\tresults = [];\n\t\t\tprojekte.forEach((c) => {\n\t\t\t\tObject.setPrototypeOf(c, ProjektBO.prototype);\n\t\t\t\tresults.push(c);\n\t\t\t})\n\t\t} else {\n\t\t\t// Es gibt wohl nur ein Objekt\n\t\t\tlet c = projekte;\n\t\t\tObject.setPrototypeOf(c, ProjektBO.prototype);\n\t\t\tresults = c;\n\t\t}\n\t\treturn results;\n\t}\n}","import NamedBusinessObject from './NamedBusinessObject';\n\n\nexport default class PersonBO extends NamedBusinessObject{\n\n\tconstructor(aemail, agoogle_user_id, arolle){\n        super();\n        this.email = aemail;\n        this.google_user_id = agoogle_user_id;\n        this.rolle = arolle;\n    }\n    /*\n\terhalte \n\t*/\n\tgetemail(){\n        return this.email;\n    }\n    /*\n\tsetze \n\t*/\n    setemail(aemail){\n        this.email = aemail;\n    }\n    /*\n\terhalte \n\t*/\n    getgoogle_user_id(){\n        return this.google_user_id;\n    }\n    /*\n\tsetze \n\t*/\n    setgoogle_user_id(agoogle_user_id){\n        this.google_user_id = agoogle_user_id;\n    }\n    /*\n\terhalte \n\t*/\n    getrolle(){\n        return this.rolle;\n    }\n    /*\n\tsetze \n\t*/\n    setrolle(arolle){\n        this.rolle = arolle;\n    }\n    \n    /** \n   * Returns an Array of PersonBOs from a given JSON structure\n   */\n    static fromJSON(personen) {\n\t\tlet results = null;\n\t\tif (Array.isArray(personen)) {\n\t\t\tresults = [];\n\t\t\tpersonen.forEach((c) => {\n\t\t\t\tObject.setPrototypeOf(c, PersonBO.prototype);\n\t\t\t\tresults.push(c);\n\t\t\t})\n\t\t} else {\n\t\t\t// Es gibt wohl nur ein Objekt\n\t\t\tlet c = personen;\n\t\t\tObject.setPrototypeOf(c, PersonBO.prototype);\n\t\t\tresults = c;\n\t\t}\n\t\treturn results;\n\t}\n\n}","import PersonBO from './PersonBO';\n\n\nexport default class StudentBO extends PersonBO{\n\n\tconstructor(amat_nr, akuerzel){\n        super();\n        this.mat_nr = amat_nr;\n        this.kuerzel = akuerzel;\n\t}\n\n\t/*\n\tErhalte \n\t*/\n\tgetmat_nr(){\n        return this.mat_nr;\n    }\n\n\t/*\n\tsetze \n\t*/\n    setmat_nr(amat_nr){\n        this.mat_nr = amat_nr;\n    }\n\t/*\n\tErhalte \n\t*/\n    getkuerzel(){\n        return this.kuerzel;\n    }\n\t/*\n\tsetze \n\t*/\n    setkuerzel(akuerzel){\n        this.kuerzel = akuerzel;\n\t}\n\t\n\t\n\t/** \n   * Returns an Array of StudentBOs from a given JSON structure\n   */\n    static fromJSON(studenten) {\n\t\tlet results = null;\n\t\tif (Array.isArray(studenten)) {\n\t\t\tresults = [];\n\t\t\tstudenten.forEach((c) => {\n\t\t\t\tObject.setPrototypeOf(c, StudentBO.prototype);\n\t\t\t\tresults.push(c);\n\t\t\t})\n\t\t} else {\n\t\t\t// Es gibt wohl nur ein Objekt\n\t\t\tlet c = studenten;\n\t\t\tObject.setPrototypeOf(c, StudentBO.prototype);\n\t\t\tresults = c;\n\t\t}\n\t\treturn results;\n\t}\n\n}","import BusinessObject from \"./BusinessObject\";\n\nexport default class TeilnahmeBO extends BusinessObject{\n\n\tconstructor(ateilnehmer, alehrangebot, aanrechnung, aresultat){\n        super();\n        this.teilnehmer = ateilnehmer;\n\t\tthis.lehrangebot = alehrangebot;\n\t\tthis.anrechnung = aanrechnung;\n\t\tthis.resultat = aresultat;\n    }\n    \n\t/*\n\tErhalte \n\t*/\n\tgetteilnehmer(){\n\t\treturn this.teilnehmer;\n\t}\n\t/*\n\tSetze \n\t*/\n\tsetteilnehmer(ateilnehmer){\n\t\tthis.teilnehmer = ateilnehmer;  \n    }\n    \t/*\n\tErhalte \n\t*/\n\tgetlehrangebot(){\n\t\treturn this.lehrangebot;\n\t}\n\t/*\n\tSetze \n\t*/\n\tsetlehrangebot(alehrangebot){\n\t\tthis.lehrangebot = alehrangebot;  \n\t}\n\t \t/*\n\tErhalte \n\t*/\n\tgetAnrechnung(){\n\t\treturn this.anrechnung;\n\t}\n\t/*\n\tSetze \n\t*/\n\tsetAnrechnung(aanrechnung){\n\t\tthis.anrechnung = aanrechnung;  \n\t}\n\t \t/*\n\tErhalte \n\t*/\n\tgetresultat(){\n\t\treturn this.resultat;\n\t}\n\t/*\n\tSetze \n\t*/\n\tsetResultat(aresultat){\n\t\tthis.resultat = aresultat;  \n    }\n\t\n\t/** \n   * Returns an Array of TeilnahmeBOs from a given JSON structure\n   */\n    static fromJSON(teilnahmen) {\n\t\tlet results = null;\n\t\tif (Array.isArray(teilnahmen)) {\n\t\t\tresults = [];\n\t\t\tteilnahmen.forEach((c) => {\n\t\t\t\tObject.setPrototypeOf(c, TeilnahmeBO.prototype);\n\t\t\t\tresults.push(c);\n\t\t\t})\n\t\t} else {\n\t\t\t// Es gibt wohl nur ein Objekt\n\t\t\tlet c = teilnahmen;\n\t\t\tObject.setPrototypeOf(c, TeilnahmeBO.prototype);\n\t\t\tresults = c;\n\t\t}\n\t\treturn results;\n\t}\n}\n","import BusinessObject from \"./BusinessObject\";\n\n/*\nRealisierung eines BewertungsBO. Dieses besitzt eine Note\n*/\n\nexport default class BewertungBO extends BusinessObject{\n\n\tconstructor(anote){\n        super();\n        this.note = anote;\n    }\n    \n\t/*\n\tErhalte Note\n\t*/\n\tgetnote(){\n\t\treturn this.note;\n\t}\n\t/*\n\tSetze Note\n\t*/\n\tsetnote(anote){\n\t\tthis.note = anote;  \n\t}\n\t\n\t//Return Array bzw. Objekt von Bewertungen aus einem JSON\n    static fromJSON(bewertungen) {\n\t\tlet results = null;\n\t\tif (Array.isArray(bewertungen)) {\n\t\t\tresults = [];\n\t\t\tbewertungen.forEach((c) => {\n\t\t\t\tObject.setPrototypeOf(c, BewertungBO.prototype);\n\t\t\t\tresults.push(c);\n\t\t\t})\n\t\t} else {\n\t\t\t// Es gibt wohl nur ein Objekt\n\t\t\tlet c = bewertungen;\n\t\t\tObject.setPrototypeOf(c, BewertungBO.prototype);\n\t\t\tresults = c;\n\t\t}\n\t\treturn results;\n\t}\n}\n","import NamedBusinessObject from \"./NamedBusinessObject\";\n\nexport default class ModulBO extends NamedBusinessObject{\n\n\tconstructor(aedv_nr){\n        super();\n        this.edv_nr = aedv_nr;\n    } \n\t/*\n\tErhalte \n\t*/\n\tgetEdv_nr(){\n\t\treturn this.edv_nr;\n\t}\n\t/*\n\tSetze \n\t*/\n\tsetEdv_nr(aedv_nr){\n\t\tthis.edv_nr = aedv_nr;  \n    }\n\n\t//Return Array bzw. Objekt von Modulen aus einem JSON\n    static fromJSON(module) {\n\t\tlet results = null;\n\t\tif (Array.isArray(module)) {\n\t\t\tresults = [];\n\t\t\tmodule.forEach((c) => {\n\t\t\t\tObject.setPrototypeOf(c, ModulBO.prototype);\n\t\t\t\tresults.push(c);\n\t\t\t})\n\t\t} else {\n\t\t\t// Es gibt wohl nur ein Objekt\n\t\t\tlet c = module;\n\t\t\tObject.setPrototypeOf(c, ModulBO.prototype);\n\t\t\tresults = c;\n\t\t}\n\t\treturn results;\n\t}\n}\n","import NamedBusinessObject from \"./NamedBusinessObject\";\n\nexport default class SemesterBO extends NamedBusinessObject{\n\n\t/*\n\tconstructor(){\n        super();\n    }\n    */\n\t\n\t/** \n   * Returns an Array of SemesterBOs from a given JSON structure\n   */\n    static fromJSON(semester) {\n\t\tlet results = null;\n\t\tif (Array.isArray(semester)) {\n\t\t\tresults = [];\n\t\t\tsemester.forEach((c) => {\n\t\t\t\tObject.setPrototypeOf(c, SemesterBO.prototype);\n\t\t\t\tresults.push(c);\n\t\t\t})\n\t\t} else {\n\t\t\t// Es gibt wohl nur ein Objekt\n\t\t\tlet c = semester;\n\t\t\tObject.setPrototypeOf(c, SemesterBO.prototype);\n\t\t\tresults = c;\n\t\t}\n\t\treturn results;\n\t}\n}\n","import NamedBusinessObject from './NamedBusinessObject';\n\nexport default class ProjektartBO extends NamedBusinessObject{\n\n\tconstructor(asws, aects){\n\t\tsuper();\n\t\tthis.sws = asws;\n\t\tthis.ects = aects;\n\t}\n\n\t/*\n\terhalte \n\t*/\n\tget_sws(){\n\t\treturn this.sws;\n\t}\n\t/*\n\tsetze \n\t*/\n\tset_sws(asws){\n\t\tthis.sws = asws\n\t}\n\t/*\n\terhalte \n\t*/\n\tget_ects(){\n\t\treturn this.ects;\n\t}\n\t/*\n\tsetze \n\t*/\n\tset_ects(aects){\n\t\tthis.ects = aects;\n\t}\n\n\t/** \n   * Returns an Array of ProjektartBOs from a given JSON structure\n   */\n\tstatic fromJSON(projektart) {\n\t\tlet results = null;\n\t\tif (Array.isArray(projektart)) {\n\t\t\tresults = [];\n\t\t\tprojektart.forEach((c) => {\n\t\t\t\tObject.setPrototypeOf(c, ProjektartBO.prototype);\n\t\t\t\tresults.push(c);\n\t\t\t})\n\t\t} else {\n\t\t\t// Es gibt wohl nur ein Objekt\n\t\t\tlet c = projektart;\n\t\t\tObject.setPrototypeOf(c, ProjektartBO.prototype);\n\t\t\tresults = c;\n\t\t}\n\t\treturn results;\n\t}\n}","import ProjektBO from './ProjektBO';\nimport StudentBO from './StudentBO';\nimport PersonBO from './PersonBO';\nimport TeilnahmeBO from './TeilnahmeBO';\nimport BewertungBO from './BewertungBO';\nimport ModulBO from './ModulBO';\nimport SemesterBO from './SemesterBO';\nimport ProjektartBO from './ProjektartBO';\n\n/*\nSingleton Abstarktion des backend REST interfaces. Es handelt sich um eine access methode\n*/\n\nexport default class ElectivAPI {\n\n\t//singletone instance\n\tstatic #api = null;\n\n\t// Lokales Python backend\n\t#ElectivServerBaseURL = '/electivApp';\n\n\t// Lokales Python backend\n\t//#ElectivServerBaseURL = 'https://wahlfachapp.oa.r.appspot.com/electivApp';\n\n\t//Projekte anzeigen fuer Student\n\t#getProjekteURL = () => `${this.#ElectivServerBaseURL}/projekte`;\n\t#getProjekteByZustandURL = (id) => `${this.#ElectivServerBaseURL}/projekte/zustand/${id}`;\n\t#setZustandAtProjekt = (projektId, zustandId) => `${this.#ElectivServerBaseURL}/projekte/zustand?projektId=${projektId}&zustandId=${zustandId}`;\n\t#addProjekteURL = () => `${this.#ElectivServerBaseURL}/projekte`;\n\t#getProjekteByIDURL = (id) => `${this.#ElectivServerBaseURL}/projekte/${id}`;\n\n\t//Projekt löschen\n\t#deleteProjektURL = (id) => `${this.#ElectivServerBaseURL}/projekt/${id}`;\n\n\t#searchProjektURL = (projektname) => `${this.#ElectivServerBaseURL}/projekte_by_name/${projektname}`;\n\n\t// ------------------------Projekte bearbeiten/hinzufugen---------------------------\n\n\n\t// ---------------------------------------------------------------------------------\n\n\t#addProjektPendingURL = () => `${this.#ElectivServerBaseURL}/projektePending`;\n\t\n\t#updateProjektPendingURL = () => `${this.#ElectivServerBaseURL}/projektePending`;\n\n\t#getProjektePendingURL = () => `${this.#ElectivServerBaseURL}/projektePending`;\n\n\t//Projekt nach ID bekommen\n\t#getProjektURL = (id) => `${this.#ElectivServerBaseURL}/projekt/${id}`;\n\n\t//Projekte nach Dozent ID und Zustand bekommen\n\t#getProjekteByZustandByDozentURL = (zustand_id,dozent_id) => `${this.#ElectivServerBaseURL}/projekte/zustand/${zustand_id}/dozent/${dozent_id}`;\n\n\t//alle Teilnahmen eines Students anzeigen\n\t#getTeilnahmenURL = (id) => `${this.#ElectivServerBaseURL}/teilnahmen/${id}`;\n\n\t//Teilnahmen eines Students nach Semester anzeigen\n\t#getTeilnahmenBySemesterURL = (student_id, semester_id) => `${this.#ElectivServerBaseURL}/teilnahmenbysemester/${student_id}/${semester_id}`;\n\n\t//Alle Teilnahmen einer EDV Nummer für ein bestimmtes Semester\n\t#getTeilnahmen_by_modul_und_semesterURL = (modul_id, semester_id) => `${this.#ElectivServerBaseURL}/teilnahmen/${modul_id}/${semester_id}`\n  \n\t//Teilnahme wählen\n\t#postTeilnahmeURL = (lehrangebotId,teilnehmerId) => `${this.#ElectivServerBaseURL}/teilnahme?lehrangebotId=${lehrangebotId}&teilnehmerId=${teilnehmerId}`;\n\n\t//Teilnahme löschen\n\t#deleteTeilnahmeURL = (lehrangebotId,teilnehmerId) => `${this.#ElectivServerBaseURL}/teilnahme?lehrangebotId=${lehrangebotId}&teilnehmerId=${teilnehmerId}`;\n\n\t//getPerson: id\n\t#getPersonURL = (id) => `${this.#ElectivServerBaseURL}/person/${id}`;\n\n\t//getPerson: google_user_id\n\t#getPersonByGoogleIDURL = (google_user_id) => `${this.#ElectivServerBaseURL}/personbygoogle/${google_user_id}`;\n\n\t//getStudent: google_user_id\n\t#getStudentByGoogleIDURL = (google_user_id) => `${this.#ElectivServerBaseURL}/studentbygoogle/${google_user_id}`;\n\t\n\t//getStudent: id\n\t#getStudentByIDURL = (id) => `${this.#ElectivServerBaseURL}/student/${id}`;\n\n\t//Bewertung nach Id bekommen\n\t#getBewertungURL = (id) => `${this.#ElectivServerBaseURL}/bewertung/${id}`;\n\n\t//Alle Bewertungen (Noten) bekommen\n\t#getBewertungenURL = () => `${this.#ElectivServerBaseURL}/bewertungen`;\n\n\t//Alle Module bekommen\n\t#getModuleURL = () => `${this.#ElectivServerBaseURL}/module`;\n\n\t//Add Modul\n\t#addModulURL = () => `${this.#ElectivServerBaseURL}/module`;\n\n\t//Update Modul\n\t#updateModulURL = () => `${this.#ElectivServerBaseURL}/module`\n\n\t//Delete Modul\n\t#deleteModulURL = (id) => `${this.#ElectivServerBaseURL}/module?id=${id}`;\n\n    //Update Student\n\t#updateStudentURL = (id,name,matrNr) => `${this.#ElectivServerBaseURL}/studenten?id=${id}&name=${name}&matrNr=${matrNr}`;\n\n\t//Update User\n\t#updateUserURL = (id,name,email) => `${this.#ElectivServerBaseURL}/personen?id=${id}&name=${name}&email=${email}`;\n\n\t//Delete User\n\t#deleteUserURL = (id) => `${this.#ElectivServerBaseURL}/student/${id}`;\n\n\t//Module nach Id bekommen\n\t#getModule_by_projekt_idURL = (id) => `${this.#ElectivServerBaseURL}/modul/${id}`;\n\n\t//für ein Projekt wählbare Module in DB 'projekte_hat_module' einfügen \n\t#postProjekte_hat_moduleURL = (projekt_id, module) => `${this.#ElectivServerBaseURL}/projekte_hat_module?projekt_id=${projekt_id}&module=${module}`;\n\n\t//für ein Projekt wählbare Module in DB 'projekte_hat_module' einfügen \n\t#updateProjekte_hat_moduleURL = (projekt_id, module) => `${this.#ElectivServerBaseURL}/projekte_hat_module?projekt_id=${projekt_id}&module=${module}`;\n\n\t#updateTeilnahmeURL = (id) => `${this.#ElectivServerBaseURL}/teilnahme/${id}`;\n\n\t//Alle Semester bekommen\n\t#getSemesterURL = () => `${this.#ElectivServerBaseURL}/semester`;\n\n\t//Semester nach projekt Id bekommen\n\t#getSemester_by_idURL = (id) => `${this.#ElectivServerBaseURL}/semester/${id}`;\n\n\t//Add Semester\n\t#addSemesterURL = () => `${this.#ElectivServerBaseURL}/semester`;\n\n\t//Update Semester\n\t#updateSemesterURL = () => `${this.#ElectivServerBaseURL}/semester`\n\n\t//Delete Semester\n\t#deleteSemesterURL = (id) => `${this.#ElectivServerBaseURL}/semester?id=${id}`;\n\n\t//Alle Semester eines Studenten bekommen\n\t#getSemesterOfStudentURL = (id) => `${this.#ElectivServerBaseURL}/semesterofstudent/${id}`\n\n\t//Studenten eines Projekts bekommen\n\t#getStudentenByProjektIdURL = (id) => `${this.#ElectivServerBaseURL}/student/projekt/${id}`\n\t\n\t//Teilnahmen eines Projekts bekommen\n    #getTeilnahmenByProjektIdURL = (id) => `${this.#ElectivServerBaseURL}/teilnahmen/projekt/${id}`\n\n    //erhalte Projektarten nach ID\n\t#getProjektartByIDURL = (id) => `${this.#ElectivServerBaseURL}/projektart/${id}`\n\t\n\t//erhalte alle Projektarten\n    #getProjektartURL = () => `${this.#ElectivServerBaseURL}/projektart`\n\n    //POSTE eine neue Projektart\n    #addProjektartURL = () => `${this.#ElectivServerBaseURL}/projektart`;\n\n    //Update Projektart\n\t#updateProjektartURL = () => `${this.#ElectivServerBaseURL}/projektart`\n\n    //Loesche eine Projektart nach ID\n    #deleteProjektartURL = (id) => `${this.#ElectivServerBaseURL}/projektart?id=${id}`;\n  \n\t//Alle Studenten bekommen\n\t#getStudentenURL = () => `${this.#ElectivServerBaseURL}/studenten`;\n\n\t//Alle User bekommen\n\t#getUserURL = () => `${this.#ElectivServerBaseURL}/personen`;\n\n\t/*\n\tSingleton/Einzelstuck instanz erhalten\n\t*/\n\tstatic getAPI() {\n\t\tif (this.#api == null) {\n\t\t\tthis.#api = new ElectivAPI();\n\t\t} \n\t\treturn this.#api;\n\t}\n\n\t/*\n\tGibt einen Error zuruck auf JSON Basis. fetch() gibt keine Errors wie 404 oder 500 zuruck. Deshaltb die func fetchAdvanced \n\t*/\n\t#fetchAdvanced = (url, init) => fetch(url, init, {credentials: 'include'})\n\t\t.then(res => {\n\t\t\t//fetch() gibt keine Errors wie 404 oder 500 zuruck\n\t\t\tif (!res.ok) {\n\t\t\t\tthrow Error(`${res.status} ${res.statusText}`);\n\t\t\t\t//throw Error(`Fail`);\n\t\t\t}\n\t\t\treturn res.json();\n\t\t})\n\t/*\n\tGebe alle BO's zuruck\n\t*/\n\t\n\t//gibt alle Projekte als BO zurück\n\tgetProjekte() {\n\t\treturn this.#fetchAdvanced(this.#getProjekteURL(),{method: 'GET'}).then((responseJSON) => {\n\t\t\tlet projektBOs = ProjektBO.fromJSON(responseJSON);\n\t\t\tconsole.info(projektBOs)\n\t\t\treturn new Promise(function (resolve){\n\t\t\t\tresolve(projektBOs);\n\t\t\t})\n\t\t})\n\t}\n\n\t//gibt alle Projekte mit der bestimmten Zustand als BO zurück\n\tgetProjekteByZustand(zustand) {\n\t\t//immer Zustand 1 (neues Projekt) holen\n\t\treturn this.#fetchAdvanced(this.#getProjekteByZustandURL(zustand),{method: 'GET'}).then((responseJSON) => {\n\t\t\tlet projektBOs = ProjektBO.fromJSON(responseJSON);\n\t\t\t// projektBOs.sort((a,b) => (a.ects > b.ects) ? 1: -1); //Sortier alle Objecte im array nach ects, aufsteigend\n\t\t\treturn new Promise(function (resolve){\n\t\t\t\tresolve(projektBOs);\n\t\t\t})\n\t\t})\n\t}\n\n\t//gibt alle Projektarten als BO zurück\n\tgetProjektart() {\n\t\treturn this.#fetchAdvanced(this.#getProjektartURL(), {method: 'GET'}).then((responseJSON) => {\n\t\t\tlet projektartBos = ProjektartBO.fromJSON(responseJSON);\n\t\t\treturn new Promise(function (resolve){\n\t\t\t\tresolve(projektartBos);\n\t\t\t})\n\t\t})\n\t}\n\n\t//gibt die Projektart mit der bestimmten ID als BO zurück\n\tgetProjektartById(id) {\n\t\treturn this.#fetchAdvanced(this.#getProjektartByIDURL(id),{method: 'GET'}).then((responseJSON) => {\n\t\t\tlet projektartBO = ProjektartBO.fromJSON(responseJSON);\n\t\t\treturn new Promise(function (resolve){\n\t\t\t\tresolve(projektartBO);\n\t\t\t})\n\t\t})\n\t}\n\n\t// Eine Projektart entfernen\n\tdeleteProjektart(id){\n\t\treturn this.#fetchAdvanced(this.#deleteProjektartURL(id),{method: 'DELETE'})\n\t}\n\n\t//Eine Projektart hinzufügen\n\taddProjektart(projektartBO) {\n\t\treturn this.#fetchAdvanced(this.#addProjektartURL(), {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Accept': 'application/json, text/plain',\n\t\t\t\t'Content-type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify(projektartBO)\n\t\t}).then((responseJSON) => {\n\t\t\t// zuruck kommt ein array, wir benoetigen aber nur ein Objekt aus dem array\n\t\t\tlet responseProjektartBO = ProjektartBO.fromJSON(responseJSON);\n\t\t\treturn new Promise(function (resolve) {\n\t\t\t\tresolve(responseProjektartBO);\n\t\t\t})\n\t\t})\n\t}\n\n\t//eine Projektart bearbeiten/updaten\n\tupdateProjektart(projektartBO){\n\t\treturn this.#fetchAdvanced(this.#updateProjektartURL(), {\n\t\t\tmethod: 'PUT',\n\t\t\theaders: {\n\t\t\t\t'Accept': 'application/json, text/plain',\n\t\t\t\t'Content-type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify(projektartBO)\n\t\t}).then((responseJSON) => {\n\t\t\t// zuruck kommt ein array, wir benoetigen aber nur ein Objekt aus dem array\n\t\t\tlet responseProjektartBO = ProjektartBO.fromJSON(responseJSON);\n\t\t\treturn new Promise(function (resolve) {\n\t\t\t\tresolve(responseProjektartBO);\n\t\t\t})\n\t\t})\n\t}\n\n\t//gibt alle Projekte mit dem bestimmten Projekt-Zustand von dem Dozenten als BO zurück\n\tgetProjekteByZustandByDozent(zustand_id,dozent_id) {\n\t\t//immer Zustand 1 (neues Projekt) holen\n\t\treturn this.#fetchAdvanced(this.#getProjekteByZustandByDozentURL(zustand_id,dozent_id),{method: 'GET'}).then((responseJSON) => {\n\t\t\tlet projektBOs = ProjektBO.fromJSON(responseJSON);\n\t\t\tprojektBOs.sort((a,b) => (a.ects > b.ects) ? 1: -1); //Sortier alle Objecte im array nach ects, aufsteigend\n\t\t\treturn new Promise(function (resolve){\n\t\t\t\tresolve(projektBOs);\n\t\t\t})\n\t\t})\n\t}\n\n\t//setzt den Zustand eines Projekts mit der bestimmten ProjektID auf einen neuen Zustand\n\tsetZustandAtProjekt(projektId, zustandId) { \n\t\t//immer Zustand 1 (neues Projekt) holen\n\t\treturn this.#fetchAdvanced(this.#setZustandAtProjekt(projektId,zustandId),{method: 'PUT'}).then((responseJSON) => {\n\t\t\tlet projektBOs = ProjektBO.fromJSON(responseJSON);\n\t\t\tconsole.info(projektBOs)\n\t\t\treturn new Promise(function (resolve){\n\t\t\t\tresolve(projektBOs);\n\t\t\t})\n\t\t})\n\t}\n\n\t//fügt ein Projekt als BO hinzu\n\taddProjekt(projektBO) {\n\t\treturn this.#fetchAdvanced(this.#addProjektPendingURL(), {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Accept': 'application/json, text/plain',\n\t\t\t\t'Content-type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify(projektBO)\n\t\t}).then((responseJSON) => {\n\t\t\t// zuruck kommt ein array, wir benoetigen aber nur ein Objekt aus dem array\n\t\t\tlet responseProjektBO = ProjektBO.fromJSON(responseJSON);\n\t\t\treturn new Promise(function (resolve) {\n\t\t\t\tresolve(responseProjektBO);\n\t\t\t})\n\t\t})\n\t}\n\n\t//Projekte im Zustand neu bekommen\n\tgetPendingProjekte() {\n\t\treturn this.#fetchAdvanced(this.#getProjektePendingURL(),{method: 'GET'}).then((responseJSON) => {\n\t\t\tlet projektBOs = ProjektBO.fromJSON(responseJSON);\n\t\t\tconsole.info(projektBOs)\n\t\t\treturn new Promise(function (resolve){\n\t\t\t\tresolve(projektBOs);\n\t\t\t})\n\t\t})\n\t}\n\n\t//gibt das Projekt mit der bestimmten ProjektID als BO zurück\n\tgetProjekt(id){\n\t\treturn this.#fetchAdvanced(this.#getProjektURL(id)).then((responseJSON) => {\n\t\t\tlet projektBO = ProjektBO.fromJSON(responseJSON);\n\t\t\tconsole.info(projektBO)\n\t\t\treturn new Promise(function (resolve){\n\t\t\t\tresolve(projektBO)\n\t\t\t})\n\t\t})\n\t}\n\n\t//Projektdaten updaten/bearbeiten\n\tupdateProjekt(projektBO){\n\t\treturn this.#fetchAdvanced(this.#updateProjektPendingURL(), {\n\t\t\tmethod: 'PUT',\n\t\t\theaders: {\n\t\t\t\t'Accept': 'application/json, text/plain',\n\t\t\t\t'Content-type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify(projektBO)\n\t\t}).then((responseJSON) => {\n\t\t\t// zuruck kommt ein array, wir benoetigen aber nur ein Objekt aus dem array\n\t\t\tlet responseProjektBO = ProjektBO.fromJSON(responseJSON);\n\t\t\treturn new Promise(function (resolve) {\n\t\t\t\tresolve(responseProjektBO);\n\t\t\t})\n\t\t})\n\t}\n\n\t//Projekt löschen\n\tdeleteProjekt(id){\n\t\treturn this.#fetchAdvanced(this.#deleteProjektURL(id),{method: 'DELETE'})\n\t}\n\n\t//gibt die Person mit der bestimmten ID als BO zurück\n\tgetPerson(id){\n\t\treturn this.#fetchAdvanced(this.#getPersonURL(id)).then((responseJSON) => {\n\t\t\tlet personBO = PersonBO.fromJSON(responseJSON);\n\t\t\tconsole.info(personBO)\n\t\t\treturn new Promise(function (resolve){\n\t\t\t\tresolve(personBO)\n\t\t\t})\n\t\t})\n\t}\n\n\t//gibt alle Teilnahmen mit der bestimmten StudentenID als BO zurück\n\tgetTeilnahmen(studentID){\n\t\treturn this.#fetchAdvanced(this.#getTeilnahmenURL(studentID)).then((responseJSON) => {\n\t\t\tlet teilnahmeBOs = TeilnahmeBO.fromJSON(responseJSON);\n\t\t\tconsole.info(teilnahmeBOs)\n\t\t\treturn new Promise(function (resolve){\n\t\t\t\tresolve(teilnahmeBOs)\n\t\t\t})\n\t\t})\n\t}\n\n\n\n\t//gibt alle Teilnahmen mit der bestimmten ModulID und SemesterID als BO zurück\n\tgetTeilnahmen_by_modul_und_semester(modul_id, semester_id){\n\t\treturn this.#fetchAdvanced(this.#getTeilnahmen_by_modul_und_semesterURL(modul_id, semester_id)).then((responseJSON) => {\n\t\t\tlet teilnahmeBOs = TeilnahmeBO.fromJSON(responseJSON);\n\t\t\tconsole.info(teilnahmeBOs)\n\t\t\treturn new Promise(function (resolve){\n\t\t\t\tresolve(teilnahmeBOs)\n\t\t\t})\n\t\t})\n\t}\n\n\t//gibt alle Teilnahmen mit der bestimmten SemesterID und StudentID als BO zurück\n\tgetTeilnahmenBySemester(student_id, semester_id){\n\t\treturn this.#fetchAdvanced(this.#getTeilnahmenBySemesterURL(student_id, semester_id)).then((responseJSON) => {\n\t\t\tlet teilnahmeBOs = TeilnahmeBO.fromJSON(responseJSON);\n\t\t\tconsole.info(teilnahmeBOs)\n\t\t\treturn new Promise(function (resolve){\n\t\t\t\tresolve(teilnahmeBOs)\n\t\t\t})\n\t\t})\n\t}\n\n\t//gibt die Person mit der bestimmten GoogleUserID als BO zurück\n\tgetPersonByGoogleID(google_user_id){\n\t\treturn this.#fetchAdvanced(this.#getPersonByGoogleIDURL(google_user_id)).then((responseJSON) => {\n\t\t\tlet personBO = PersonBO.fromJSON(responseJSON);\n\t\t\tconsole.info(personBO)\n\t\t\treturn new Promise(function (resolve){\n\t\t\t\tresolve(personBO)\n\t\t\t})\n\t\t})\n\t}\n\n\t//gibt den Studenten mit der bestimmten GoogleUserID als BO zurück\t\n\tgetStudentByGoogleID(google_user_id){\n\t\treturn this.#fetchAdvanced(this.#getStudentByGoogleIDURL(google_user_id)).then((responseJSON) => {\n\t\t\tlet studentBO = StudentBO.fromJSON(responseJSON);\n\t\t\t// console.info(studentBO)\n\t\t\treturn new Promise(function (resolve){\n\t\t\t\tresolve(studentBO)\n\t\t\t})\n\t\t})\n\t}\n\n\t//gibt den Studenten mit der bestimmten StudentenID als BO zurück\n\tgetStudentByID(id){\n\t\treturn this.#fetchAdvanced(this.#getStudentByIDURL(id)).then((responseJSON) => {\n\t\t\tlet studentBO = StudentBO.fromJSON(responseJSON);\n\t\t\tconsole.info(studentBO)\n\t\t\treturn new Promise(function (resolve){\n\t\t\t\tresolve(studentBO)\n\t\t\t})\n\t\t})\n\t}\n\n\t//setzt die Teilnahme für eine bestimmte LehrangebotID mit der bestimmten StudentID\n\tsetTeilnahme(lehrangebotId, studentID){\n        //TODO Set User ID\n         return this.#fetchAdvanced(this.#postTeilnahmeURL(lehrangebotId, studentID),{method: 'POST'}).then((responseJSON) => {\n\n\t\t})\n\n\t}\n\n\t//löscht den Teilnahme BO mit der bestimmten LehrangebotID und der bestimmten StudentID\n\tdeleteTeilnahme(lehrangebotId, studentID){\n        //TODO Set User ID\n         return this.#fetchAdvanced(this.#deleteTeilnahmeURL(lehrangebotId, studentID),{method: 'DELETE'}).then((responseJSON) => {\n\n\t\t})\n\n\t}\n\n\t//updatet den Teilnahmen BO \n\tupdateTeilnahme(teilnahmeBO){\n         return this.#fetchAdvanced(this.#updateTeilnahmeURL(teilnahmeBO.getID()),{\n\t\t\tmethod: 'PUT',\n\t\t\theaders:{\n\t\t\t\t'Accept': 'application/json, text/plain',\n\t\t\t\t'Content-type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify(teilnahmeBO)\n\t\t}).then((responseJSON) => {\n\t\t\tlet responseTeilnahmeBO = TeilnahmeBO.fromJSON(responseJSON)[0];\n\t\t\treturn new Promise(function (resolve){\n\t\t\t\tresolve(responseTeilnahmeBO)\n\t\t\t})\n\t\t})\n\t}\n\n\t//gibt die Bewertung mit der bestimmten ID als BO zurück\n\tgetBewertung(id){\n\t\treturn this.#fetchAdvanced(this.#getBewertungURL(id)).then((responseJSON) => {\n\t\t\tlet bewertungBO = BewertungBO.fromJSON(responseJSON);\n\t\t\tconsole.info(bewertungBO)\n\t\t\treturn new Promise(function (resolve){\n\t\t\t\tresolve(bewertungBO)\n\t\t\t})\n\t\t})\n\t}\n\n\t//gibt alle Bewertungen als BO zurück\n\tgetBewertungen(){\n\t\treturn this.#fetchAdvanced(this.#getBewertungenURL()).then((responseJSON) => {\n\t\t\tlet bewertungBOs = BewertungBO.fromJSON(responseJSON);\n\t\t\tconsole.info(bewertungBOs)\n\t\t\treturn new Promise(function (resolve){\n\t\t\t\tresolve(bewertungBOs)\n\t\t\t})\n\t\t})\n\t}\n\n\t//gibt alle Module als BO zurück\n\tgetModule(){\n\t\treturn this.#fetchAdvanced(this.#getModuleURL()).then((responseJSON) => {\n\t\t\tlet modulBOs = ModulBO.fromJSON(responseJSON);\n\t\t\tconsole.info(modulBOs)\n\t\t\treturn new Promise(function (resolve){\n\t\t\t\tresolve(modulBOs)\n\t\t\t})\n\t\t})\n\t}\n\n\t//Modul hinzufügen\n\taddModul(modulBO) {\n\t\treturn this.#fetchAdvanced(this.#addModulURL(), {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Accept': 'application/json, text/plain',\n\t\t\t\t'Content-type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify(modulBO)\n\t\t}).then((responseJSON) => {\n\t\t\t// zuruck kommt ein array, wir benoetigen aber nur ein Objekt aus dem array\n\t\t\tlet responseModulBO = ModulBO.fromJSON(responseJSON);\n\t\t\treturn new Promise(function (resolve) {\n\t\t\t\tresolve(responseModulBO);\n\t\t\t})\n\t\t})\n\t}\n\n\t//Modul updaten/bearbeiten\n\tupdateModul(modulBO){\n\t\treturn this.#fetchAdvanced(this.#updateModulURL(), {\n\t\t\tmethod: 'PUT',\n\t\t\theaders: {\n\t\t\t\t'Accept': 'application/json, text/plain',\n\t\t\t\t'Content-type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify(modulBO)\n\t\t}).then((responseJSON) => {\n\t\t\t// zuruck kommt ein array, wir benoetigen aber nur ein Objekt aus dem array\n\t\t\tlet responseModulBO = ModulBO.fromJSON(responseJSON);\n\t\t\treturn new Promise(function (resolve) {\n\t\t\t\tresolve(responseModulBO);\n\t\t\t})\n\t\t})\n\t}\n\n\t//Modul löschen\n\tdeleteModul(id){\n\t\treturn this.#fetchAdvanced(this.#deleteModulURL(id),{method: 'DELETE'})\n\t}\n\n\t//Student updaten\n\tupdateStudent(id,name,matrNr){\n\t\treturn this.#fetchAdvanced(this.#updateStudentURL(id,name,matrNr), {\n\t\t\tmethod: 'PUT',\n\t\t\theaders: {\n\t\t\t\t'Accept': 'application/json, text/plain',\n\t\t\t\t'Content-type': 'application/json',\n\t\t\t}\n\t\t})\n\t}\n\n\t//User updaten\n\tupdateUser(id,name,email){\n\t\treturn this.#fetchAdvanced(this.#updateUserURL(id,name,email), {\n\t\t\tmethod: 'PUT',\n\t\t\theaders: {\n\t\t\t\t'Accept': 'application/json, text/plain',\n\t\t\t\t'Content-type': 'application/json',\n\t\t\t}\n\t\t})\n\t}\n\n\t//User löschen\n\tdeleteUser(id){\n\t\treturn this.#fetchAdvanced(this.#deleteUserURL(id),{method: 'DELETE'})\n\t}\n\n\t//alle Module für ein bestimmtes Projekt bekommen\n\tgetModule_by_projekt_id(id){\n\t\treturn this.#fetchAdvanced(this.#getModule_by_projekt_idURL(id)).then((responseJSON) => {\n\t\t\tlet modulBO = ModulBO.fromJSON(responseJSON);\n\t\t\tconsole.info(modulBO)\n\t\t\treturn new Promise(function (resolve){\n\t\t\t\tresolve(modulBO)\n\t\t\t})\n\t\t})\n\t}\n\n\t//Wählbare Module eines Projekts erstellen\n\tpostProjekte_hat_module(projekt_id, module){\n\t   return this.#fetchAdvanced(this.#postProjekte_hat_moduleURL(projekt_id, module),{method: 'POST'})\n   }\n\n   //Wählbare Module eines Projekts updaten\n   updateProjekte_hat_module(projekt_id, module){\n\t   return this.#fetchAdvanced(this.#updateProjekte_hat_moduleURL(projekt_id, module),{method: 'PUT'})\n\t}\n\n\t//Studenten eines Projekts bekommen\n\tgetStudentenByProjektId(id){\n\t\treturn this.#fetchAdvanced(this.#getStudentenByProjektIdURL(id)).then((responseJSON) => {\n\t\t\tlet studentBOs = StudentBO.fromJSON(responseJSON);\n\t\t\tconsole.info(studentBOs)\n\t\t\treturn new Promise(function (resolve){\n\t\t\t\tresolve(studentBOs)\n\t\t\t})\n\t\t})\n\t}\n\n\t//gibt die Teilnahmen mit der bestimmten ProjektID als BO zurück\n\tgetTeilnahmenByProjektId(id){\n\t\treturn this.#fetchAdvanced(this.#getTeilnahmenByProjektIdURL(id)).then((responseJSON) => {\n\t\t\tlet teilnahmeBOs = TeilnahmeBO.fromJSON(responseJSON);\n\t\t\tconsole.info(teilnahmeBOs)\n\t\t\treturn new Promise(function (resolve){\n\t\t\t\tresolve(teilnahmeBOs)\n\t\t\t})\n\t\t})\n\t}\t\n\n\t//gibt die Semester mit der bestimmten SemesterID als BO zurück\n\tgetSemester_by_id(id){\n\t\treturn this.#fetchAdvanced(this.#getSemester_by_idURL(id)).then((responseJSON) => {\n\t\t\tlet semesterBO = SemesterBO.fromJSON(responseJSON);\n\t\t\tconsole.info(semesterBO)\n\t\t\treturn new Promise(function (resolve){\n\t\t\t\tresolve(semesterBO)\n\t\t\t})\n\t\t})\t\t\n\t}\n\t//gibt alle Semester als BO zurück\n\tgetSemester(){\n\t\treturn this.#fetchAdvanced(this.#getSemesterURL()).then((responseJSON) => {\n\t\t\tlet semesterBOs = SemesterBO.fromJSON(responseJSON);\n\t\t\tconsole.info(semesterBOs)\n\t\t\treturn new Promise(function (resolve){\n\t\t\t\tresolve(semesterBOs)\n\t\t\t})\n\t\t})\n\t}\n\n\t//Semester hinzufügen\n\taddSemester(semesterBO) {\n\t\treturn this.#fetchAdvanced(this.#addSemesterURL(), {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Accept': 'application/json, text/plain',\n\t\t\t\t'Content-type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify(semesterBO)\n\t\t}).then((responseJSON) => {\n\t\t\t// zuruck kommt ein array, wir benoetigen aber nur ein Objekt aus dem array\n\t\t\tlet responseSemesterBO = SemesterBO.fromJSON(responseJSON);\n\t\t\treturn new Promise(function (resolve) {\n\t\t\t\tresolve(responseSemesterBO);\n\t\t\t})\n\t\t})\n\t}\n\n\t//Semester updaten\n\tupdateSemester(semesterBO){\n\t\treturn this.#fetchAdvanced(this.#updateSemesterURL(), {\n\t\t\tmethod: 'PUT',\n\t\t\theaders: {\n\t\t\t\t'Accept': 'application/json, text/plain',\n\t\t\t\t'Content-type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify(semesterBO)\n\t\t}).then((responseJSON) => {\n\t\t\t// zuruck kommt ein array, wir benoetigen aber nur ein Objekt aus dem array\n\t\t\tlet responseSemesterBO = SemesterBO.fromJSON(responseJSON);\n\t\t\treturn new Promise(function (resolve) {\n\t\t\t\tresolve(responseSemesterBO);\n\t\t\t})\n\t\t})\n\t}\n\n\t//Semester löschen\n\tdeleteSemester(id){\n\t\treturn this.#fetchAdvanced(this.#deleteSemesterURL(id),{method: 'DELETE'})\n\t}\n\n\t//Alle Semester eines Studenten bekommen, in der er eine Teilnahme hat\n\tgetSemesterOfStudent(id){\n\t\treturn this.#fetchAdvanced(this.#getSemesterOfStudentURL(id)).then((responseJSON) => {\n\t\t\tlet semesterBOs = SemesterBO.fromJSON(responseJSON);\n\t\t\tconsole.info(semesterBOs)\n\t\t\treturn new Promise(function (resolve){\n\t\t\t\tresolve(semesterBOs)\n\t\t\t})\n\t\t})\n\t}\n\n\t//gibt alle Studenten als BO zurück\n\tgetStudenten(){\n\t\treturn this.#fetchAdvanced(this.#getStudentenURL()).then((responseJSON) => {\n\t\t\tlet studentBOs = StudentBO.fromJSON(responseJSON);\n\t\t\tconsole.info(studentBOs)\n\t\t\treturn new Promise(function (resolve){\n\t\t\t\tresolve(studentBOs)\n\t\t\t})\n\t\t})\n\t}\n\n\t//gibt alle Personen als BO zurück\n\tgetPersons(){\n\n\t\treturn this.#fetchAdvanced(this.#getUserURL()).then((responseJSON) => {\n\t\t\tlet personBOs = PersonBO.fromJSON(responseJSON);\n\t\t\treturn new Promise(function (resolve){\n\t\t\t\tresolve(personBOs)\n\t\t\t})\n\t\t})\n\t}\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button } from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert';\nimport AlertTitle from '@material-ui/lab/AlertTitle';\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\n\n\n/*\nif error object != null -> show context sensitive error message\n*/\n\nclass ContextErrorMessage extends Component {\n  #standardText = 'Something went wrong. Some highly trained monkeys trying to solve the problem right now!';\n\n  // Renders the ContextErrorMessage if error object is not null \n  render() {\n    const { classes, error, contextErrorMsg, onReload } = this.props;\n\n    return (\n      (error !== null) ?\n        <Alert severity='error' className={classes.root}>\n          <div>\n            {this.#standardText}\n          </div>\n          <AlertTitle>\n            {contextErrorMsg}\n          </AlertTitle>\n          <div className={classes.margins}>\n            Error message (for debugging only) is:\n        </div>\n          <div>\n            {error.message}\n          </div>\n          {\n            onReload ?\n              <div className={classes.margins}>\n                <Button variant='contained' color='primary' startIcon={<AutorenewIcon />} onClick={onReload}>\n                  Reload\n            </Button>\n              </div>\n              : null\n          }\n        </Alert>\n        : null\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  margins: {\n    marginTop: theme.spacing(2)\n  }\n});\n\n/** PropTypes */\nContextErrorMessage.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** \n   * The error object, which drives the error message \n   * If not null, the error message is shown \n   */\n  error: PropTypes.object,\n  /**  A contextual error message to be shown */\n  contextErrorMsg: PropTypes.string,\n  /** \n   * A reload handler for the onReload event, which occurs if the reload button is clicked. \n   * If given a reload button is shown \n   */\n  onReload: PropTypes.func\n}\n\nexport default withStyles(styles)(ContextErrorMessage);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, LinearProgress } from '@material-ui/core';\n\n/*\nif loading & show pro = true -> shows progress\n\n*/\n\nclass LoadingProgress extends Component {\n\n  // renders the component \n  render() {\n    const { classes, show } = this.props;\n\n    return (\n      show ?\n        <div className={classes.root}>\n          <LinearProgress color='primary' />\n        </div>\n        : null\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing(2),\n  }\n});\n\n/** PropTypes */\nLoadingProgress.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** If true, the loading progress is rendered */\n  show: PropTypes.bool.isRequired,\n}\n\nexport default withStyles(styles)(LoadingProgress);","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {withStyles, Typography, Accordion, AccordionSummary, AccordionDetails, Grid} from '@material-ui/core';\nimport {Button} from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport AddIcon from '@material-ui/icons/Add';\nimport {ElectivAPI} from '../api';\n\n/**\n * Es wird ein Projekt angezeigt was darauffolgend in die ProjektListe eingefuegt wird.\n *\n * @see See [ProjektListe](#projektliste)\n *\n *\n */\n\nclass ProjektListeEintrag extends Component {\n\n    //gebe einen leeren status\n    constructor(props) {\n        super(props);\n        this.state = {\n            projekt: props.projekt,\n            projektarten: props.projektarten,\n            personen: props.personen,\n            showProjektForm: false,\n            showProjektDeleteDialog: false,\n            teilnahmeButtonDisabled: false,\n            teilnahmeAbwaehlenButtonDisabled: true,\n            teilnahmeChanged: false,\n            ectsAdded: false\n        };\n    }\n\n    expansionPanelStateChanged = () => {\n        this.props.onExpandedStateChange(this.props.projekt);\n    }\n\n    // Bei Aufruf wird die Anzahl der Teilnehmer um 1 Person erhoeht sowie eine Teilnahme im Backend fuer den current\n    // student hinterlegt. Gleichzeitig wird die ectsCountFunc aufgrufen um ects zu loggen\n    teilnahmeButtonClicked = event => {\n        event.stopPropagation()\n        //Logik fuer Teilnahme Button\n        this.setState({\n            teilnahmeButtonDisabled: true,\n            teilnahmeAbwaehlenButtonDisabled: false,\n        });\n        this.state.projekt.setAnzahlTeilnehmer(parseInt(this.state.projekt.anzahlTeilnehmer) + 1)\n        let ects = this.state.projektarten[this.props.projekt.art - 1].ects\n        this.props.ectsCountFunc(ects)\n        ElectivAPI.getAPI().setTeilnahme(this.props.projekt.id, this.props.currentStudent.id);\n    }\n\n    // Bei Aufruf werden im Projekt die maximalen Teilnehmer um -1 reduziert sowie die teilnahme im backend fuer den current\n    // student entfernt. Gleichzeitig wird der Teilnahme Button aktiviert\n    teilnahmeAbwaehlenButtonClicked = event => {\n        event.stopPropagation()\n        //Logik fuer Teilnahme Button\n        this.setState({\n            teilnahmeButtonDisabled: false,\n            teilnahmeAbwaehlenButtonDisabled: true,\n        });\n        this.state.projekt.setAnzahlTeilnehmer(parseInt(this.state.projekt.anzahlTeilnehmer) - 1)\n        let ects = -this.state.projektarten[this.props.projekt.art - 1].ects\n        this.props.ectsCountFunc(ects)\n        ElectivAPI.getAPI().deleteTeilnahme(this.props.projekt.id, this.props.currentStudent.id);\n        this.setState({teilnahmeChanged: true})\n    }\n\n\n    // \n    getInfosMount = () => {\n        if (this.props.currentStudent != null && !this.state.teilnahmeChanged && this.props.projekt.teilnehmerListe.indexOf(this.props.currentStudent.id) > -1) {\n            this.setState({\n                teilnahmeButtonDisabled: true,\n                teilnahmeAbwaehlenButtonDisabled: false,\n            });\n            if (this.props.projektarten.length > 0 && this.props.projekt) {\n                let ects = this.props.projektarten[this.props.projekt.art - 1].ects\n                this.props.ectsCountFunc(ects)\n                this.setState({ectsAdded: true})\n            }\n        }\n    }\n\n    //\n    getInfosUpdate = () => {\n        if (this.state.ectsAdded === false) {\n            this.setState({ectsAdded: true})\n            if (this.props.currentStudent != null && this.props.projekt.teilnehmerListe.indexOf(this.props.currentStudent.id) > -1) {\n                this.setState({\n                    teilnahmeButtonDisabled: true,\n                    teilnahmeAbwaehlenButtonDisabled: false,\n                });\n                if (this.props.projektarten.length > 0 && this.props.projekt) {\n                    let ects = this.props.projektarten[this.props.projekt.art - 1].ects\n                    this.props.ectsCountFunc(ects)\n\n                }\n            }\n        }\n    }\n\n    // Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\n    componentDidMount() {\n        this.getInfosMount();\n    }\n\n\n    componentWillUnmount() {\n        this.setState({\n            ectsAdded: false\n        })\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.ectsCount === 0 & prevProps.projektarten.length > 0) {\n            this.getInfosUpdate()\n\n        }\n    }\n\n\n    /** Renders the component */\n    render() {\n\n\n        const {classes, expandedState, currentStudent, projektarten, personen} = this.props;\n        // Use the states projekt\n        const {projekt} = this.state;\n\n        return (\n            <div>\n                <Accordion className={classes.root} defaultExpanded={false} expanded={expandedState}\n                           onChange={this.expansionPanelStateChanged}>\n                    <AccordionSummary\n                        expandIcon={<ExpandMoreIcon/>}\n                        id={`projekt${projekt.getID()}Infopanel-header`}\n                    >\n                        <Grid container spacing={2} justify='flex-start' alignItems='center'>\n                            <Grid item>\n                                <Typography variant='body1'\n                                            className={classes.heading}>{projekt.getname()} bei {personen[projekt.getdozent() - 1].name} </Typography>\n                            </Grid>\n                            <Grid item xs/>\n                            <Grid item>\n                                <Typography variant='body1'\n                                            color={'success.main'}>{projekt.getAnzahlTeilnehmer()} / {projekt.getmax_teilnehmer()} Plätze\n                                    besetzt\n                                </Typography>\n                            </Grid>\n                            <Grid item>\n                                {\n                                    currentStudent ?\n                                        <>\n\n                                            {\n                                                this.state.teilnahmeButtonDisabled ?\n                                                    <Button className={classes.teilnahmeAbwaehlenButton}\n                                                            variant='contained' size=\"small\" color='secondary'\n                                                            onClick={this.teilnahmeAbwaehlenButtonClicked}\n                                                            disabled={this.state.teilnahmeAbwaehlenButtonDisabled}>\n                                                        abwählen\n                                                    </Button>\n                                                    :\n\n                                                    <Button className={classes.teilnahmeButton} variant='contained'\n                                                            color='primary' size=\"small\" startIcon={<AddIcon/>}\n                                                            onClick={this.teilnahmeButtonClicked}\n                                                            disabled={this.state.teilnahmeButtonDisabled || this.state.projekt.anzahlTeilnehmer >= this.state.projekt.max_teilnehmer}>\n                                                        wählen\n                                                    </Button>\n                                            }\n                                        </>\n                                        :\n                                        null\n                                }\n                            </Grid>\n                        </Grid>\n                    </AccordionSummary>\n                    <AccordionDetails className={classes.details}>\n                        <Typography variant='body1' color={'textSecondary'}>\n                            <b>Beschreibung: </b> {projekt.getbeschreibung()} <br/>\n                            <b>Betreuer: </b>{projekt.getbetreuer()}<br/>\n                            <b>Raum: </b>{projekt.getraum()}<br/>\n                            <b>Maximale Teilnehmer: </b>{projekt.getmax_teilnehmer()}<br/>\n                            <b>Externer Partner: </b>{projekt.getexterner_partner()}<br/>\n                            <b>Wöchentlich: </b>{projekt.getwoechentlich() === \"1\" ? \"Ja\" : \"Nein\"}<br/>\n                            <b>Blocktage vor Prüfungsphase: </b>{projekt.getanzahl_block_vor()}<br/>\n                            <b>Blocktage während Prüfungsphase: </b>{projekt.getanzahl_block_in()}<br/>\n                            <b>Sprache: </b>{projekt.getsprache()}<br/>\n                            {projektarten.length > 0 && projekt ?\n                                <>\n                                    <b>Projektart: </b>{projektarten[projekt.art - 1].name}<br/>\n                                    <b>SWS: </b>{projektarten[projekt.art - 1].sws}<br/>\n                                    <b>ECTS: </b>{projektarten[projekt.art - 1].ects}<br/>\n                                </>\n                                :\n                                <>\n                                    <b>ECTS noch nicht geladen</b><br/>\n                                </>\n                            }\n                            <b>Präferierter Block: </b>{projekt.getpraeferierte_block()}<br/>\n\n                        </Typography>\n                    </AccordionDetails>\n                </Accordion>\n            </div>\n        );\n    }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n    root: {\n        width: '100%',\n        marginBottom: theme.spacing(1),\n        marginTop: theme.spacing(1),\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n    },\n    teilnahmeButton: {\n        width: 100,\n    },\n    teilnahmeAbwaehlenButton: {\n        width: 100,\n    },\n});\n\n/** PropTypes */\nProjektListeEintrag.propTypes = {\n    /** @ignore */\n    classes: PropTypes.object.isRequired,\n    expandedState: PropTypes.bool.isRequired,\n    onExpandedStateChange: PropTypes.func.isRequired,\n}\n\nexport default withStyles(styles)(ProjektListeEintrag);","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, TextField, InputAdornment, IconButton, Grid, Typography, Button, formatMs} from '@material-ui/core';\nimport ClearIcon from '@material-ui/icons/Clear'\nimport { withRouter } from 'react-router-dom';\nimport { ElectivAPI } from '../api';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\n\n// import CustomerForm from './dialogs/CustomerForm';\nimport ProjektListeEintrag from './ProjektListeEintrag';\n\n/*\nErstellt eine Liste von ProjektListeEintrag fuer jedes Projekt\n*/\n\nclass ProjektListe extends Component {\n\n  constructor(props) {\n    super(props);\n    let expandedID = null;\n\n    if (this.props.location.expandProjekt) {\n      expandedID = this.props.location.expandProjekt.getID();\n    }\n\n    //gebe einen leeren status\n    this.state = {\n      projekte: [],\n      projektarten: [],\n      filteredProjekte: [],\n      projektFilter: '',\n      error: null,\n      ausgewaehlteEcts: null,\n      loadingInProgress: false,\n      expandedProjektID: expandedID,\n      showProjekteForm: false,\n      ectsCount: 0,\n      personen: [],\n      aktuelleWahl: false,\n      genehmigteProjekte: [],\n      \n    };\n    this.wahlFreigeben = this.wahlFreigeben.bind(this)\n  }\n\n  // ECTS counter funktion. Erhaelt die ects und addiert diese bei Aufruf zu ectsCount im state\n  ectsCountFunc = (ects) => {\n    setTimeout(() => {\n      this.setState({\n        ectsCount: this.state.ectsCount + ects\n      })\n    }, 0);\n\n  }\n\n/*   //Suche-Funktion zum Suchen von Projekten\n  filterFieldValueChange= event => {\n    const value = event.target.value.toLowerCase();\n    this.setState({\n        filteredProjekte: this.state.projekte.filter(projekt => {\n            let nameContainsValue = projekt.getname().toLowerCase().includes(value);\n            return nameContainsValue;\n        }),\n        projektFilter: value\n    });\n  }\n\n  //Suche leeren\n  clearFilterFieldButtonClicked = () => {\n    this.setState({\n        filteredProjekte: [...this.state.projekte],\n        projektFilter: ''\n    });\n  } */\n\n\n  //hole alle Projekte vom Backend\n  getProjekte = () => {\n\n    ElectivAPI.getAPI().getProjekteByZustand('Wahlfreigabe')\n      .then(projekteBOs =>{\n        var aktuelleWahl = projekteBOs.length > 0\n        this.setState({\t\t\t\t\t\t\t\t//neuer status wenn fetch komplett\n          aktuelleWahl: aktuelleWahl,\n          projekte: projekteBOs,\n          filteredProjekte: [...projekteBOs],\n          loadingInProgress: false,\t\t\t\t// deaktiviere ladeindikator\n          error: null,\n        })}).catch(e =>\n          this.setState({\n            projekte: [],\n            filteredProjekte: [],\n            loadingInProgress: false,\n            error: e\n          }));\n    // setze laden auf wahr\n    this.setState({\n      loadingInProgress: true,\n      error: null\n    });\n  }\n  getGenehmigteProjekte = () => {\n    \n    ElectivAPI.getAPI().getProjekteByZustand('Genehmigt')\n      .then(projekteBOs =>{\n        this.setState({\t\t\t\t\t\t\t\t//neuer status wenn fetch komplett\n          genehmigteProjekte: projekteBOs,\n          loadingInProgress: false,\t\t\t\t// deaktiviere ladeindikator\n          error: null,\n        })}).catch(e =>\n          this.setState({\n            genehmigteProjekte: [],\n            loadingInProgress: false,\n            error: e\n          }));\n    // setze laden auf wahr\n    this.setState({\n      loadingInProgress: true,\n      error: null\n    });\n  }\n\n  // Holt alle Projektarten vom Backend mit GET Methode\n  getProjektarten = () => {\n    ElectivAPI.getAPI().getProjektart()\n      .then(projekteartBos =>\n        this.setState({\t\t\t\t\t\t\t\t//neuer status wenn fetch komplett\n          projektarten: projekteartBos,\n          loadingInProgress: false,\t\t\t\t// deaktiviere ladeindikator\n          error: null,\n        })).catch(e =>\n          this.setState({\n            projektarten: [],\n            loadingInProgress: false,\n            error: e\n          }));\n    // setze laden auf wahr\n    this.setState({\n      loadingInProgress: true,\n      error: null\n    });\n  }\n\n  // Holt alle Personen vom Backend\n  getPPersonen = () => {\n    ElectivAPI.getAPI().getPersons()\n      .then(personBOs =>\n        this.setState({\t\t\t\t\t\t\t\t//neuer status wenn fetch komplett\n          personen: personBOs,\n          loadingInProgress: false,\t\t\t\t// deaktiviere ladeindikator\n          error: null,\n        })).catch(e =>\n          this.setState({\n            personen: [],\n            loadingInProgress: false,\n            error: e\n          }));\n    // setze laden auf wahr\n    this.setState({\n      loadingInProgress: true,\n      error: null\n    });\n  }\n\n  // Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\n  componentDidMount() {\n    this.getProjekte();\n    this.getProjektarten();\n    this.getPPersonen();\n    this.getGenehmigteProjekte();\n  }\n\n  // Funktion fuer die Projektklappen oeffnung und den einhergehenden State change\n  onExpandedStateChange = projekt => {\n    //  Zum anfang Projekt Eintrag = null\n    let newID = null;\n\n    // Falls ein Objekt geclicket wird, collapse\n    if (projekt.getID() !== this.state.expandedProjektID) {\n      // Oeffnen mit neuer Projekt ID\n      newID = projekt.getID()\n    }\n    this.setState({\n      expandedProjektID: newID,\n    });\n  }\n\n  wahlFreigeben(){\n    var neuerZustand = 'Wahlfreigabe'\n    if(this.state.aktuelleWahl){\n      neuerZustand = 'in Bewertung' \n      for ( var i=0; i<this.state.projekte.length; i++){\n        this.state.projekte[i].setAktuellerZustand(neuerZustand)\n        ElectivAPI.getAPI().setZustandAtProjekt(this.state.projekte[i].getID(),neuerZustand)\n      }\n    }\n    else{\n      for (var i=0; i<this.state.genehmigteProjekte.length; i++){\n        this.state.genehmigteProjekte[i].setAktuellerZustand(neuerZustand)\n        ElectivAPI.getAPI().setZustandAtProjekt(this.state.genehmigteProjekte[i].getID(), neuerZustand)\n      }\n    } \n    this.getProjekte();\n    this.getGenehmigteProjekte();\n  }\n\n\n  /** Renders the component */\n  render() {\n\n    const { classes, currentStudent, currentPerson } = this.props;\n    const { aktuelleWahl, projekte, projektFilter, filteredProjekte, expandedProjektID, loadingInProgress, error, ectsCount, projektarten, personen } = this.state;\n\n    return (\n      <div className={classes.root}>\n        <Grid container spacing={1} className={classes.grid} justify='flex-start' alignItems='center'>\n          {/* <Grid item className={classes.projektFilter}>\n            <Typography>\n              Filter Projekliste nach Namen:\n              </Typography>\n          </Grid>\n        <Grid item xs={4}>\n        <TextField\n                className={classes.filter}\n                type='text'\n                label=''\n                value={projektFilter}\n                onChange={this.filterFieldValueChange}\n                InputProps={{\n                    endAdornment: <InputAdornment position='end'>\n                    <IconButton onClick={this.clearFilterFieldButtonClicked}>\n                        <ClearIcon fontSize=\"small\"/>\n                    </IconButton>\n                    </InputAdornment>,\n                }}\n            />\n          </Grid> */}\n          <Grid item xs />\n          {currentStudent ?\n            <Grid item className={classes.ectsCount}>\n              <Button variant=\"outlined\" color=\"primary\" className={classes.buttonEcts} disableRipple style={{ backgroundColor: 'transparent', }}>Anzahl ECTS: {ectsCount}</Button>\n            </Grid>\n            :\n            <></>\n          }\n          { currentPerson ?\n            <>\n            { currentPerson.rolle === \"Admin\"?\n            <>\n              {aktuelleWahl ?\n              <Button className={classes.wahlFreigeben} variant=\"contained\" color=\"secondary\" onClick= {this.wahlFreigeben} >Wahl beenden</Button>\n              :\n              <Button className={classes.wahlFreigeben} variant=\"contained\" color=\"primary\" onClick= {this.wahlFreigeben} >Wahl freigeben</Button>\n              } \n            </>\n            :null\n            }\n            </>\n            :null\n          }\n        </Grid>\n        {projektarten.length > 0 && personen.length > 0 && filteredProjekte.length > 0 ?\n          <>\n          \n        <Button className={classes.ects} variant=\"outlined\" color=\"primary\" disableRipple style={{ backgroundColor: 'transparent', }}>5 ECTS</Button>\n        {       \n          filteredProjekte\n          .filter(projekt => projekt.getArt()===1)\n          .map(projekt => \n          <ProjektListeEintrag key={projekt.getID()} projekt={projekt} expandedState={expandedProjektID === projekt.getID()}\n              onExpandedStateChange={this.onExpandedStateChange} currentStudent={currentStudent} ectsCountFunc={this.ectsCountFunc}\n              ectsCount={ectsCount} projektarten={projektarten} personen={personen}\n            />)\n        } \n        <Button className={classes.ects} variant=\"outlined\" color=\"primary\" disableRipple style={{ backgroundColor: 'transparent', }}>10 ECTS</Button>\n        {        \n          filteredProjekte\n          .filter(projekt => projekt.getArt()===2)\n          .map(projekt => \n          <ProjektListeEintrag key={projekt.getID()} projekt={projekt} expandedState={expandedProjektID === projekt.getID()}\n              onExpandedStateChange={this.onExpandedStateChange} currentStudent={currentStudent} ectsCountFunc={this.ectsCountFunc}\n              ectsCount={ectsCount} projektarten={projektarten} personen={personen}\n            />)\n        } \n        <Button className={classes.ects} variant=\"outlined\" color=\"primary\" disableRipple style={{ backgroundColor: 'transparent', }}>20 ECTS</Button>\n        {\n          filteredProjekte\n          .filter(projekt => projekt.getArt()===3)\n          .map(projekt => \n          <ProjektListeEintrag key={projekt.getID()} projekt={projekt} expandedState={expandedProjektID === projekt.getID()}\n              onExpandedStateChange={this.onExpandedStateChange} currentStudent={currentStudent} ectsCountFunc={this.ectsCountFunc}\n              ectsCount={ectsCount} projektarten={projektarten} personen={personen}\n            />)\n        } \n          </>\n          :\n          <>\n            <Typography>Die Wahl hat noch nicht begonnen</Typography>\n          </>\n        }\n\n        <LoadingProgress show={loadingInProgress} />\n        <ContextErrorMessage error={error} contextErrorMsg={`The list of Projects could not be loaded.`}\n          onReload={()=>{\n            this.getProjekte();\n            this.getProjektarten();\n            }} />\n\n      </div>\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  },\n  grid: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(1),\n    marginLeft: theme.spacing(1)\n  },\n  ectsCount: {\n    marginBottom: theme.spacing(1),\n    marginRight: theme.spacing(2),\n  },\n  ects:{\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n    width: '100%'\n  },\n  buttonEcts:{\n    minWidth: 155\n  },\n  wahlFreigeben:{\n    minWidth: 155,\n    marginRight: theme.spacing(2),\n    \n  }\n  \n  \n  \n\n});\n\n/** PropTypes */\nProjektListe.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** @ignore */\n  location: PropTypes.object.isRequired,\n}\n\nexport default withRouter(withStyles(styles)(ProjektListe));\n\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { ElectivAPI, ProjektBO } from '../../api';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport Chip from \"@material-ui/core/Chip\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\n\n\n/** \n* Dieses Form zeigt ein Dialog zum erstellen/updaten von ProjektBO's. Falls ein Projekt bereits besteht wird das Formular als edit konfiguriert.\n* Falls das Projekt Objekt null ist wird das Formular zum erstellen eines PojektBO's konfiguriert.\n* Dafuer wird auf die API zugegriffen (Backend zugriff)\n*\n* @see See Matieral-UIs [Dialog] (https://material-ui.com/components/dialogs)\n*/\n\nclass ProjektForm extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tlet nm = '', mt = null, bs = '', bt = '', ep = '', wt = false, av = 0, ai = 0, pb = '', br = false, rm = '', sp = 'deutsch', dz = '', at = '', tl = '';\n\t\tlet boolvor = false, boolin = false, boolpraef = false;\n\t\tvar hj = null, pa = null;\n\t\tif (props.projekt) {\n\t\t\thj = 0;\n\t\t\tpa = 0;\n\t\t}\n\n\n\t\t//initiiere den state\n\t\tthis.state = {\n\t\t\tname: nm,\n\t\t\tnameValidationFailed: false,\n\t\t\tnameEdited: false,\n\n\t\t\tmax_teilnehmer: mt,\n\t\t\tmax_teilnehmerValidationFailed: false,\n\t\t\tmax_teilnehmerEdited: false,\n\n\t\t\tbeschreibung: bs,\n\t\t\tbeschreibungValidationFailed: false,\n\t\t\tbeschreibungEdited: false,\n\n\t\t\tbetreuer: bt,\n\t\t\tbetreuerValidationFailed: false,\n\t\t\tbetreuerEdited: false,\n\n\t\t\texterner_partner: ep,\n\t\t\texterner_partnerValidationFailed: false,\n\t\t\texterner_partnerEdited: false,\n\n\t\t\twoechentlich: wt,\n\t\t\twoechentlichValidationFailed: false,\n\t\t\twoechentlichEdited: false,\n\n\t\t\tboolBlock_vor: boolvor,\n\t\t\tanzahl_block_vor: av,\n\t\t\tanzahl_block_vorValidationFailed: false,\n\t\t\tanzahl_block_vorEdited: false,\n\n\t\t\tboolBlock_in: boolin,\n\t\t\tanzahl_block_in: ai,\n\t\t\tanzahl_block_inValidationFailed: false,\n\t\t\tanzahl_block_inEdited: false,\n\n\t\t\tboolBlockpraef: boolpraef,\n\t\t\tpraeferierte_block: pb,\n\t\t\tpraeferierte_blockValidationFailed: false,\n\t\t\tpraeferierte_blockEdited: false,\n\n\t\t\tbes_raum: br,\n\t\t\tbes_raumValidationFailed: false,\n\t\t\tbes_raumEdited: false,\n\n\t\t\traum: rm,\n\t\t\traumValidationFailed: false,\n\t\t\traumEdited: false,\n\n\t\t\tsprache: sp,\n\t\t\tspracheValidationFailed: false,\n\t\t\tspracheEdited: false,\n\n\t\t\tdozent: dz,\n\t\t\tdozentValidationFailed: false,\n\t\t\tdozentEdited: false,\n\n\t\t\taktueller_zustand: \"Neu\",\n\n\t\t\thalbjahr: hj,\n\t\t\thalbjahrEdited: false,\n\n\t\t\tart: pa,\n\t\t\tartEdited: false,\n\n\t\t\tanzahlTeilnehmer: at,\n\t\t\tanzahlTeilnehmerValidationFailed: false,\n\t\t\tanzahlTeilnehmerEdited: false,\n\n\t\t\tteilnehmerListe: tl,\n\t\t\tteilnehmerListeValidationFailed: false,\n\t\t\tteilnehmerListeEdited: false,\n\n\t\t\taddingInProgress: false,\n\t\t\tupdatingInProgress: false,\n\t\t\taddingError: null,\n\t\t\tupdatingError: null,\n\n\t\t\tmodulwahlBOs: [],\n\t\t\tmodulwahl: [],\n\t\t\tmoduleEdited: false,\n\n\t\t\tsemester: [],\n\t\t\tprojektarten: [],\n\t\t\tmodule: []\n\t\t};\n\t\t// State speichern falls cancel \n\t\tthis.baseState = this.state;\n\t}\n\n\t// API Anbindung um das Projekt über das Backend in die Datenbank hinzuzufügen\n\taddProjekt = () => {\n\t\tlet newProjekt = new ProjektBO(\n\t\t\t0,\n\t\t\tthis.state.name,\n\t\t\tthis.state.max_teilnehmer,\n\t\t\tthis.state.beschreibung,\n\t\t\tthis.state.betreuer,\n\t\t\tthis.state.externer_partner,\n\t\t\tthis.state.woechentlich,\n\t\t\tthis.state.anzahl_block_vor,\n\t\t\tthis.state.anzahl_block_in,\n\t\t\tthis.state.praeferierte_block,\n\t\t\tthis.state.bes_raum,\n\t\t\tthis.state.raum,\n\t\t\tthis.state.sprache,\n\t\t\tthis.props.currentPerson.id,\n\t\t\tthis.state.aktueller_zustand,\n\t\t\tthis.state.halbjahr,\n\t\t\tthis.state.art,\n\t\t\tthis.state.anzahlTeilnehmer,\n\t\t\tthis.state.teilnehmerListe,\n\t\t);\n\t\t// ProjektBO über die API in die DBhinzufügen\t\n\t\tElectivAPI.getAPI().addProjekt(newProjekt).then(projekt => {\n\t\t\tthis.props.getProjekte();\n\t\t\t//Wählbare Module enes Projekts über die API in die DB hinzufügen\n\t\t\tElectivAPI.getAPI().postProjekte_hat_module(projekt.id, JSON.stringify(this.state.modulwahl))\n\t\t}).then(projekt => {\n\t\t\t// Backend erfolgreich\n\t\t\t// reinitialisierung fuer ein neues leere Projekt\n\t\t\tthis.setState(this.baseState);\n\t\t\tthis.props.onClose(projekt); //Aufrufen parent in backend\n\t\t}).catch(e =>\n\t\t\tthis.setState({\n\t\t\t\tupdatingInProgress: false,\n\t\t\t\tupdatingError: e\n\t\t\t})\n\t\t);\n\t\t// Ladeanimation einblenden\n\t\tthis.setState({\n\t\t\tupdatingInProgress: true,\n\t\t\tupdatingError: null\n\t\t});\n\t}\n\n\t// API Anbindung um das Projekt über das Backend in die Datenbank upzudaten\n\tupdateProjekt = () => {\n\t\tlet projekt = this.props.projekt;\n\t\tprojekt.setname(this.state.name);\n\t\tprojekt.setmax_teilnehmer(this.state.max_teilnehmer);\n\t\tprojekt.setbeschreibung(this.state.beschreibung);\n\t\tprojekt.setbetreuer(this.state.betreuer);\n\t\tprojekt.setexterner_partner(this.state.externer_partner);\n\t\tprojekt.setwoechentlich(this.state.woechentlich);\n\t\tprojekt.setanzahl_block_vor(this.state.anzahl_block_vor);\n\t\tprojekt.setanzahl_block_in(this.state.anzahl_block_in);\n\t\tprojekt.setpraeferierte_block(this.state.praeferierte_block);\n\t\tprojekt.setbes_raum(this.state.bes_raum);\n\t\tprojekt.setraum(this.state.raum);\n\t\tprojekt.setsprache(this.state.sprache);\n\t\tprojekt.setAktuellerZustand(this.state.aktueller_zustand);\n\t\tprojekt.setHalbjahr(this.state.halbjahr);\n\t\tprojekt.setArt(this.state.art);\n\t\tprojekt.setAnzahlTeilnehmer(this.state.anzahlTeilnehmer);\n\t\tprojekt.setTeilnehmerListe(this.state.teilnehmerListe);\n\t\t// ProjektBO über die API in die DBhinzufügen\t\n\t\tElectivAPI.getAPI().updateProjekt(projekt).then(projekt => {\n\t\t\tthis.props.getProjekte();\n\t\t\t//Wählbare Module enes Projekts über die API in die DB hinzufügen\n\t\t\tElectivAPI.getAPI().updateProjekte_hat_module(projekt.id, JSON.stringify(this.state.modulwahl))\n\t\t}).then(projekt => {\n\t\t\t// Backend erfolgreich\n\t\t\t// reinitialisierung fuer ein neues leere Projekt\n\t\t\tthis.setState(this.baseState);\n\t\t\tthis.props.onClose(projekt); //Aufrufen parent in backend\n\t\t}).catch(e =>\n\t\t\tthis.setState({\n\t\t\t\tupdatingInProgress: false,\n\t\t\t\tupdatingError: e\n\t\t\t})\n\t\t);\n\t\t// Ladeanimation einblenden\n\t\tthis.setState({\n\t\t\tupdatingInProgress: true,\n\t\t\tupdatingError: null\n\t\t});\n\t}\n\n\t//Infos des zu bearbeitenden Projekts laden\n\tgetUpdateInfos = () => {\n\t\tlet nm = this.props.projekt.getname();\n\t\tlet mt = this.props.projekt.getmax_teilnehmer();\n\t\tlet bs = this.props.projekt.getbeschreibung();\n\t\tlet bt = this.props.projekt.getbetreuer();\n\t\tlet ep = this.props.projekt.getexterner_partner();\n\t\tlet wt = this.props.projekt.getwoechentlich();\n\t\tlet av = this.props.projekt.getanzahl_block_vor();\n\t\tlet ai = this.props.projekt.getanzahl_block_in();\n\t\tlet pb = this.props.projekt.getpraeferierte_block();\n\t\tlet br = this.props.projekt.getbes_raum();\n\t\tlet rm = this.props.projekt.getraum();\n\t\tlet sp = this.props.projekt.getsprache();\n\t\tlet dz = this.props.projekt.getdozent();\n\t\tlet at = this.props.projekt.getAnzahlTeilnehmer();\n\t\tlet tl = this.props.projekt.getTeilnehmerListe();\n\t\tlet hj = this.props.projekt.getHalbjahr();\n\t\tlet pa = this.props.projekt.getArt();\n\t\tlet boolvor = false;\n\t\tlet boolin = false;\n\t\tlet boolpraef = false;\n\t\tif (av !== null && av > 0) {\n\t\t\tboolvor = true\n\t\t}\n\t\tif (ai !== null && ai > 0) {\n\t\t\tboolin = true\n\t\t}\n\t\tif (pb !== null && pb !== '') {\n\t\t\tboolpraef = true\n\t\t}\n\t\tthis.setState({\n\t\t\tname: nm,\n\t\t\tmax_teilnehmer: mt,\n\t\t\tbeschreibung: bs,\n\t\t\tbetreuer: bt,\n\t\t\texterner_partner: ep,\n\t\t\twoechentlich: wt,\n\t\t\tboolBlock_vor: boolvor,\n\t\t\tanzahl_block_vor: av,\n\t\t\tboolBlock_in: boolin,\n\t\t\tanzahl_block_in: ai,\n\t\t\tboolBlockpraef: boolpraef,\n\t\t\tpraeferierte_block: pb,\n\t\t\tbes_raum: br,\n\t\t\traum: rm,\n\t\t\tsprache: sp,\n\t\t\tdozent: dz,\n\t\t\taktueller_zustand: \"Neu\",\n\t\t\thalbjahr: hj,\n\t\t\tart: pa,\n\t\t\tanzahlTeilnehmer: at,\n\t\t\tteilnehmerListe: tl,\n\t\t})\n\t}\n\n\t// Validierung der Textfeldaenderungen \n\ttextFieldValueChange = (event) => {\n\t\tconst value = event.target.value;\n\n\t\tlet error = false;\n\t\tif (value.trim().length === 0) {\n\t\t\terror = true;\n\t\t}\n\t\tthis.setState({\n\t\t\t[event.target.id]: event.target.value,\n\t\t\t[event.target.id + 'ValidationFailed']: error,\n\t\t\t[event.target.id + 'Edited']: true\n\t\t});\n\t}\n\n\t// Validierung der Textfeldaenderungen nur numerische Werte\n\tnumberValueChange = (event) => {\n\t\tconst value = event.target.value;\n\t\tconst re = /^[0-9]{1,3}$/;\n\n\t\tlet error = false;\n\t\tif (value.trim().length === 0) {\n\t\t\terror = true;\n\t\t}\n\t\tif (re.test(event.target.value) === false) {\n\t\t\terror = true;\n\t\t}\n\n\t\tthis.setState({\n\t\t\t[event.target.id]: event.target.value,\n\t\t\t[event.target.id + 'ValidationFailed']: error,\n\t\t\t[event.target.id + 'Edited']: true\n\t\t});\n\t}\n\n\t// Änderung der Checkboxes\n\tcheckboxValueChange = (event) => {\n\t\tthis.setState({\n\t\t\t[event.target.id]: event.target.checked,\n\t\t});\n\t}\n\n\t// Änderung der Radiobuttons\n\tradioValueChange = (event) => {\n\t\tthis.setState({\n\t\t\tsprache: event.target.value,\n\t\t});\n\t}\n\n\t// API Anbindung um alle Semester über das Backend aus der Datenbank zu laden\n\tgetSemester = () => {\n\t\tElectivAPI.getAPI().getSemester()\n\t\t\t.then(semesterBOs =>\n\t\t\t\tthis.setState({\n\t\t\t\t\tsemester: semesterBOs,\n\t\t\t\t\terror: null,\n\t\t\t\t\tloadingInProgress: false,\n\t\t\t\t})).catch(e =>\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tsemester: [],\n\t\t\t\t\t\terror: e,\n\t\t\t\t\t\tloadingInProgress: false,\n\t\t\t\t\t}));\n\t\tthis.setState({\n\t\t\terror: null,\n\t\t\tloadingInProgress: true,\n\t\t\tloadingTeilnahmeError: null\n\t\t});\n\t}\n\n\t// API Anbindung um alle Projektarten über das Backend aus der Datenbank zu laden\n\tgetProjektart = () => {\n\t\tElectivAPI.getAPI().getProjektart().then(projektartBOs =>\n\t\t\tthis.setState({\n\t\t\t\tprojektarten: projektartBOs\n\t\t\t})).then(() => {\n\t\t\t\tconsole.log(this.state.projektarten)\n\n\t\t\t})\n\t\t\t.catch(e =>\n\t\t\t\tthis.setState({\n\t\t\t\t\tprojektarten: []\n\t\t\t\t}));\n\t}\n\n\n\t// API Anbindung um alle Module vom Backend zu bekommen \n\tgetModule = () => {\n\t\tElectivAPI.getAPI().getModule()\n\t\t\t.then(modulBOs =>\n\t\t\t\tthis.setState({\n\t\t\t\t\tmodule: modulBOs,\n\t\t\t\t\terror: null,\n\t\t\t\t\tloadingInProgress: false,\n\t\t\t\t})).catch(e =>\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tmodule: [],\n\t\t\t\t\t\terror: e,\n\t\t\t\t\t\tloadingInProgress: false,\n\t\t\t\t\t}));\n\t\tthis.setState({\n\t\t\terror: null,\n\t\t\tloadingInProgress: true,\n\t\t\tloadingTeilnahmeError: null\n\t\t});\n\t}\n\n\t// API Anbindung um alle Module eines zu bearbeitenden Projekts über das Backend aus der Datenbank zu laden\n\tgetModule_by_projekt_id = () => {\n\t\tElectivAPI.getAPI().getModule_by_projekt_id(this.props.projekt.id)\n\t\t\t.then(modulBOs => {\n\t\t\t\tlet modulIDs = [];\n\t\t\t\tmodulBOs.forEach(modul => {\n\t\t\t\t\tmodulIDs.push(modul.id)\n\t\t\t\t})\n\t\t\t\tthis.setState({\n\t\t\t\t\tmodulwahlBOs: modulBOs,\n\t\t\t\t\tmodulwahl: modulIDs,\n\t\t\t\t\terror: null,\n\t\t\t\t\tloadingInProgress: false,\n\t\t\t\t})\n\t\t\t})\n\t\t\t.catch(e =>\n\t\t\t\tthis.setState({\n\t\t\t\t\tmodulwahlBOs: [],\n\t\t\t\t\tmodulwahl: null,\n\t\t\t\t\terror: e,\n\t\t\t\t\tloadingInProgress: false,\n\t\t\t\t}));\n\t\tthis.setState({\n\t\t\terror: null,\n\t\t\tloadingInProgress: true\n\t\t});\n\t}\n\n\t// Änderungen des Dropdown Menüs für Semester\n\thandleSemesterChange = (semester) => {\n\t\tthis.setState({\n\t\t\thalbjahr: semester.target.value,\n\t\t\thalbjahrEdited: true\n\t\t})\n\t\tsetTimeout(() => {\n\t\t\tconsole.log('Ausgewählte Semester ID:', this.state.halbjahr)\n\t\t}, 0);\n\t};\n\n\t// Änderungen des Dropdown Menüs für Projektarten\n\thandleArtChange = (projektart) => {\n\t\tthis.setState({\n\t\t\tart: projektart.target.value,\n\t\t\tartEdited: true\n\t\t})\n\t\tsetTimeout(() => {\n\t\t\tconsole.log('Ausgewählte Projektart ID:', this.state.art)\n\t\t}, 0);\n\t};\n\n\t// Änderungen des Dropdown Menüs für Module\n\thandleModulChange = (event) => {\n\t\tthis.setState({\n\t\t\tmodulwahl: event.target.value,\n\t\t\tmoduleEdited: true\n\t\t});\n\t\tsetTimeout(() => {\n\t\t\tthis.modulwahlChange();\n\t\t}, 0);\n\t}\n\n\t// Wenn Änderungen an der Modulwahl vorgenommen werden müssen diese mit den IDS der ModulBOS abgeglichen werden\n\tmodulwahlChange = () => {\n\t\tconsole.log('Ausgewählte ModulIDs:', this.state.modulwahl)\n\t\tvar modulBOs = [];\n\t\tthis.state.modulwahl.forEach(id => {\n\t\t\tthis.state.module.forEach(modul => {\n\t\t\t\tif (id === modul.getID()) {\n\t\t\t\t\tmodulBOs.push(modul)\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\t\tthis.setState({\n\t\t\tmodulwahlBOs: modulBOs\n\t\t});\n\t}\n\n\t//Wenn das Dialog geschlossen wird\n\thandleClose = () => {\n\t\t// State zurucksetzen\n\t\tthis.setState(this.baseState);\n\t\tthis.props.onClose(null);\n\t}\n\n\t//Funktion, um alle für die Erstellung/Bearbeitung eines Projekts notwendigen Informationen zu laden\n\tgetInfos = () => {\n\t\tthis.getSemester();\n\t\tthis.getProjektart();\n\t\tthis.getModule();\n\t\tif (this.props.projekt) {\n\t\t\tthis.getUpdateInfos();\n\t\t\tthis.getModule_by_projekt_id();\n\t\t}\n\t}\n\n\t/** Rendert die Komponente */\n\trender() {\n\t\tconst { classes, projekt, show } = this.props;\n\t\tconst {\n\t\t\tname,\n\t\t\tnameValidationFailed,\n\t\t\tnameEdited,\n\n\t\t\tmax_teilnehmer,\n\t\t\tmax_teilnehmerValidationFailed,\n\t\t\tmax_teilnehmerEdited,\n\n\t\t\tbeschreibung,\n\t\t\tbeschreibungValidationFailed,\n\t\t\tbeschreibungEdited,\n\n\t\t\tbetreuer,\n\n\t\t\texterner_partner,\n\n\t\t\twoechentlich,\n\n\t\t\tboolBlock_vor,\n\t\t\tanzahl_block_vor,\n\t\t\tanzahl_block_vorValidationFailed,\n\n\t\t\tboolBlock_in,\n\t\t\tanzahl_block_in,\n\t\t\tanzahl_block_inValidationFailed,\n\n\t\t\tboolBlockpraef,\n\t\t\tpraeferierte_block,\n\t\t\tpraeferierte_blockValidationFailed,\n\n\t\t\tbes_raum,\n\n\t\t\traum,\n\t\t\traumValidationFailed,\n\n\t\t\tsprache,\n\n\t\t\taddingInProgress,\n\t\t\tupdatingInProgress,\n\t\t\taddingError,\n\t\t\tupdatingError,\n\n\t\t\tsemester,\n\t\t\thalbjahr,\n\t\t\thalbjahrEdited,\n\n\t\t\tprojektarten,\n\t\t\tart,\n\t\t\tartEdited,\n\n\t\t\tmodule,\n\t\t\tmodulwahlBOs,\n\t\t\tmodulwahl,\n\t\t\tmoduleEdited,\n\n\t\t} = this.state;\n\t\tlet title = '';\n\t\tlet header = '';\n\n\t\tif (projekt) {\n\t\t\t// Projekt objekt true, somit ein edit\n\t\t\ttitle = `Projekt \"${projekt.name}\" bearbeiten`;\n\t\t\theader = 'Projektdaten einfügen';\n\t\t} else {\n\t\t\ttitle = 'Erstelle ein neues Projekt';\n\t\t\theader = 'Projektdaten einfügen';\n\t\t}\n\n\t\treturn (\n\t\t\tshow ?\n\t\t\t\t<Dialog open={show} onEnter={this.getInfos} onClose={this.handleClose} maxWidth='sm'>\n\t\t\t\t\t<DialogTitle id='form-dialog-title'>{title}\n\t\t\t\t\t\t<IconButton className={classes.closeButton} onClick={this.handleClose}>\n\t\t\t\t\t\t\t<CloseIcon />\n\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t</DialogTitle>\n\t\t\t\t\t<DialogContent>\n\t\t\t\t\t\t<DialogContentText>\n\t\t\t\t\t\t\t{header}\n\t\t\t\t\t\t</DialogContentText>\n\t\t\t\t\t\t<form className={classes.root} noValidate autoComplete='off'>\n\t\t\t\t\t\t\t<TextField autoFocus type='text' required fullWidth margin='normal' id='name' label='Projektname' variant=\"outlined\" value={name}\n\t\t\t\t\t\t\t\tonChange={this.textFieldValueChange} error={nameValidationFailed}\n\t\t\t\t\t\t\t\thelperText={nameValidationFailed ? 'Bitte geben Sie einen Projektnamen an' : ' '} />\n\t\t\t\t\t\t\t<TextField className={classes.max_teilnehmer} type='text' required margin='normal' id='max_teilnehmer' label='Maximale Teilnehmeranzahl' variant=\"outlined\" value={max_teilnehmer}\n\t\t\t\t\t\t\t\tonChange={this.numberValueChange} error={max_teilnehmerValidationFailed}\n\t\t\t\t\t\t\t\thelperText={max_teilnehmerValidationFailed ? 'Bitte eine Anzahl eingeben' : ' '} />\n\n\t\t\t\t\t\t\t<FormControl component=\"fieldset\">\n\t\t\t\t\t\t\t\t<RadioGroup className={classes.radio} row aria-label=\"position\" value={sprache} defaultValue=\"deutsch\" onChange={this.radioValueChange}>\n\t\t\t\t\t\t\t\t\t<FormControlLabel\n\t\t\t\t\t\t\t\t\t\tvalue=\"deutsch\"\n\t\t\t\t\t\t\t\t\t\tcontrol={<Radio color=\"primary\" />}\n\t\t\t\t\t\t\t\t\t\tlabel=\"deutsch\"\n\t\t\t\t\t\t\t\t\t\tlabelPlacement=\"top\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<FormControlLabel\n\t\t\t\t\t\t\t\t\t\tvalue=\"englisch\"\n\t\t\t\t\t\t\t\t\t\tcontrol={<Radio color=\"primary\" />}\n\t\t\t\t\t\t\t\t\t\tlabel=\"englisch\"\n\t\t\t\t\t\t\t\t\t\tlabelPlacement=\"top\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</RadioGroup>\n\t\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsemester ?\n\t\t\t\t\t\t\t\t\t<FormControl required variant=\"outlined\" className={classes.formControl}>\n\t\t\t\t\t\t\t\t\t\t<InputLabel>Semester</InputLabel>\n\t\t\t\t\t\t\t\t\t\t<Select value={halbjahr} label=\"Semester\" onChange={this.handleSemesterChange}>\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tsemester.map(semester =>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<MenuItem value={semester.getID()}><em>{semester.getname()}</em></MenuItem>\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t</Select>\n\t\t\t\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t<FormControl required variant=\"outlined\" className={classes.formControl}>\n\t\t\t\t\t\t\t\t\t\t<InputLabel>Semester</InputLabel>\n\t\t\t\t\t\t\t\t\t\t<Select value=\"\" label=\"Semester\">\n\t\t\t\t\t\t\t\t\t\t\t<MenuItem value=\"\"><em>Semester noch nicht geladen</em></MenuItem>\n\t\t\t\t\t\t\t\t\t\t</Select>\n\t\t\t\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tprojektarten ?\n\t\t\t\t\t\t\t\t\t<FormControl required variant=\"outlined\" className={classes.formControlpa}>\n\t\t\t\t\t\t\t\t\t\t<InputLabel>Projektart</InputLabel>\n\t\t\t\t\t\t\t\t\t\t<Select value={art} label=\"Projektart\" onChange={this.handleArtChange}>\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tprojektarten.map(projektart =>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<MenuItem value={projektart.getID()}><em>{projektart.getname()}</em></MenuItem>\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t</Select>\n\t\t\t\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t<FormControl required variant=\"outlined\" className={classes.formControl}>\n\t\t\t\t\t\t\t\t\t\t<InputLabel>Projektart</InputLabel>\n\t\t\t\t\t\t\t\t\t\t<Select value={art} label=\"Projektart\">\n\t\t\t\t\t\t\t\t\t\t\t<MenuItem value=\"\"><em>Projektarten noch nicht geladen</em></MenuItem>\n\t\t\t\t\t\t\t\t\t\t</Select>\n\t\t\t\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmodule ?\n\t\t\t\t\t\t\t\t\t<FormControl required variant=\"outlined\" className={classes.formControlmo}>\n\t\t\t\t\t\t\t\t\t\t<InputLabel>Anrechenbare Module</InputLabel>\n\t\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t\t\t\t\t\tvalue={modulwahl}\n\t\t\t\t\t\t\t\t\t\t\tmultiple label=\"Anrechenbare Module\"\n\t\t\t\t\t\t\t\t\t\t\tonChange={this.handleModulChange}\n\t\t\t\t\t\t\t\t\t\t\trenderValue={() => (\n\t\t\t\t\t\t\t\t\t\t\t\t<div className={classes.chips}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{modulwahlBOs.map((value) => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Chip key={value} label={value.name} className={classes.chip} />\n\t\t\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t)}>\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tmodule.map(modul =>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<MenuItem key={modul.getID()} value={modul.getID()}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{<Checkbox checked={modulwahl.indexOf(modul.getID()) > -1} />}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListItemText>{modul.getname()} ({modul.getEdv_nr()})</ListItemText>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t</Select>\n\t\t\t\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t<FormControl required variant=\"outlined\" className={classes.formControlmo}>\n\t\t\t\t\t\t\t\t\t\t<InputLabel>Anrechenbare Module</InputLabel>\n\t\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\t\tvalue=\"\"\n\t\t\t\t\t\t\t\t\t\t\tmultiple label=\"Anrechenbare Module\">\n\t\t\t\t\t\t\t\t\t\t\t<MenuItem key=\"\" value=\"\">\n\t\t\t\t\t\t\t\t\t\t\t\tModule nicht geladen\n\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t\t\t\t</Select>\n\t\t\t\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t<br />\n\n\t\t\t\t\t\t\t<FormGroup row>\n\t\t\t\t\t\t\t\t<FormControlLabel control={\n\t\t\t\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\t\t\t\tchecked={woechentlich}\n\t\t\t\t\t\t\t\t\t\tonChange={this.checkboxValueChange}\n\t\t\t\t\t\t\t\t\t\tid=\"woechentlich\"\n\t\t\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tlabel=\"Wöchentliche Termine\"\n\t\t\t\t\t\t\t\t\tlabelPlacement=\"end\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t\t<FormGroup row>\n\t\t\t\t\t\t\t\t<FormControlLabel control={\n\t\t\t\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\t\t\t\tchecked={bes_raum}\n\t\t\t\t\t\t\t\t\t\tonChange={this.checkboxValueChange}\n\t\t\t\t\t\t\t\t\t\tid=\"bes_raum\"\n\t\t\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tlabel=\"Besonderer Raum notwendig\"\n\t\t\t\t\t\t\t\t\tlabelPlacement=\"end\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t\t{bes_raum === true || bes_raum === 1 ?\n\t\t\t\t\t\t\t\t<TextField type='text' required fullWidth margin='normal' id='raum' label='Raum' variant=\"outlined\" value={raum}\n\t\t\t\t\t\t\t\t\tonChange={this.textFieldValueChange} error={raumValidationFailed}\n\t\t\t\t\t\t\t\t\thelperText={raumValidationFailed ? 'Dieses Feld darf nicht leer sein' : ' '} />\n\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t<></>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t<FormGroup row>\n\t\t\t\t\t\t\t\t<FormControlLabel control={\n\t\t\t\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\t\t\t\tchecked={boolBlock_vor}\n\t\t\t\t\t\t\t\t\t\tonChange={this.checkboxValueChange}\n\t\t\t\t\t\t\t\t\t\tid=\"boolBlock_vor\"\n\t\t\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tlabel=\"Blocktage vor Beginn der Vorlesungszeit\"\n\t\t\t\t\t\t\t\t\tlabelPlacement=\"end\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t\t{boolBlock_vor === true ?\n\t\t\t\t\t\t\t\t<TextField type='text' required fullWidth margin='normal' id='anzahl_block_vor' label='Anzahl Blocktage' variant=\"outlined\" value={anzahl_block_vor}\n\t\t\t\t\t\t\t\t\tonChange={this.numberValueChange} error={anzahl_block_vorValidationFailed}\n\t\t\t\t\t\t\t\t\thelperText={anzahl_block_vorValidationFailed ? 'Dieses Feld darf nicht leer sein' : ' '} />\n\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t<></>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t<FormGroup row>\n\t\t\t\t\t\t\t\t<FormControlLabel control={\n\t\t\t\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\t\t\t\tchecked={boolBlock_in}\n\t\t\t\t\t\t\t\t\t\tonChange={this.checkboxValueChange}\n\t\t\t\t\t\t\t\t\t\tid=\"boolBlock_in\"\n\t\t\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tlabel=\"Blocktage in der Prüfungszeit\"\n\t\t\t\t\t\t\t\t\tlabelPlacement=\"end\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t\t{boolBlock_in === true ?\n\t\t\t\t\t\t\t\t<TextField type='text' required fullWidth margin='normal' id='anzahl_block_in' label='Anzahl Blocktage' variant=\"outlined\" value={anzahl_block_in}\n\t\t\t\t\t\t\t\t\tonChange={this.numberValueChange} error={anzahl_block_inValidationFailed}\n\t\t\t\t\t\t\t\t\thelperText={anzahl_block_inValidationFailed ? 'Dieses Feld darf nicht leer sein' : ' '} />\n\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t<></>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t<FormGroup row>\n\t\t\t\t\t\t\t\t<FormControlLabel control={\n\t\t\t\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\t\t\t\tchecked={boolBlockpraef}\n\t\t\t\t\t\t\t\t\t\tonChange={this.checkboxValueChange}\n\t\t\t\t\t\t\t\t\t\tid=\"boolBlockpraef\"\n\t\t\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tlabel=\"Blocktage (Samstage) in der Vorlesungszeit\"\n\t\t\t\t\t\t\t\t\tlabelPlacement=\"end\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t\t{boolBlockpraef === true ?\n\t\t\t\t\t\t\t\t<TextField type='text' required fullWidth margin='normal' id='praeferierte_block' label='Präferierte Tage' variant=\"outlined\" value={praeferierte_block}\n\t\t\t\t\t\t\t\t\tonChange={this.textFieldValueChange} error={praeferierte_blockValidationFailed}\n\t\t\t\t\t\t\t\t\thelperText={praeferierte_blockValidationFailed ? 'Dieses Feld darf nicht leer sein' : ' '} />\n\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t<></>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t<TextField type='text' fullWidth margin='normal' id='betreuer' label='Betreuer' variant=\"outlined\" value={betreuer}\n\t\t\t\t\t\t\t\tonChange={this.textFieldValueChange} />\n\t\t\t\t\t\t\t<TextField type='text' fullWidth margin='normal' id='externer_partner' label='Externe Partner' variant=\"outlined\" value={externer_partner}\n\t\t\t\t\t\t\t\tonChange={this.textFieldValueChange} />\n\t\t\t\t\t\t\t<TextField type='text' required fullWidth margin='normal' id='beschreibung' label='Projektbeschreibung' multiline rows={4} variant=\"outlined\" value={beschreibung}\n\t\t\t\t\t\t\t\tonChange={this.textFieldValueChange} error={beschreibungValidationFailed}\n\t\t\t\t\t\t\t\thelperText={beschreibungValidationFailed ? 'Bitte geben Sie eine Beschreibung ein' : ' '} />\n\t\t\t\t\t\t</form>\n\t\t\t\t\t\t<LoadingProgress show={addingInProgress || updatingInProgress} />\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Show error message in dependency of projekt prop\n\t\t\t\t\t\t\tprojekt ?\n\t\t\t\t\t\t\t\t<ContextErrorMessage error={updatingError} contextErrorMsg={`The projekt ${projekt.getID()} could not be updated.`} onReload={this.updateProjekt} />\n\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t<ContextErrorMessage error={addingError} contextErrorMsg={`The Projekt could not be added.`} onReload={this.addProjekt} />\n\t\t\t\t\t\t}\n\t\t\t\t\t</DialogContent>\n\t\t\t\t\t<DialogActions>\n\t\t\t\t\t\t<Button onClick={this.handleClose} color='secondary'>\n\t\t\t\t\t\t\tAbbrechen\n            \t\t\t</Button>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// If a Projekt is given, show an update button, else an add button\n\t\t\t\t\t\t\tprojekt ?\n\t\t\t\t\t\t\t\t<Button disabled={nameValidationFailed || max_teilnehmerValidationFailed || beschreibungValidationFailed} variant='contained' onClick={this.updateProjekt} color='primary'>\n\t\t\t\t\t\t\t\t\tSpeichern\n              \t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t<Button disabled={nameValidationFailed || !nameEdited || max_teilnehmerValidationFailed || !max_teilnehmerEdited || beschreibungValidationFailed || !beschreibungEdited || !halbjahrEdited || !artEdited || !moduleEdited}\n\t\t\t\t\t\t\t\t\tvariant='contained' onClick={this.addProjekt} color='primary'>\n\t\t\t\t\t\t\t\t\tHinzufügen\n             \t\t\t\t\t</Button>\n\t\t\t\t\t\t}\n\t\t\t\t\t</DialogActions>\n\t\t\t\t</Dialog>\n\t\t\t\t: null\n\t\t);\n\t}\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n\troot: {\n\t\twidth: '100%',\n\t},\n\tcloseButton: {\n\t\tposition: 'absolute',\n\t\tright: theme.spacing(1),\n\t\ttop: theme.spacing(1),\n\t\tcolor: theme.palette.grey[500],\n\t},\n\tmax_teilnehmer: {\n\t\twidth: 250,\n\t\tmarginRight: theme.spacing(2)\n\t},\n\tformControl: {\n\t\tminWidth: 170,\n\t\tmarginBottom: theme.spacing(1),\n\t},\n\tformControlpa: {\n\t\tminWidth: 240,\n\t\tmarginBottom: theme.spacing(1),\n\t\tmarginLeft: theme.spacing(3)\n\t},\n\tformControlmo: {\n\t\twidth: 435,\n\t\tmarginTop: theme.spacing(2),\n\t\tmarginBottom: theme.spacing(2),\n\t},\n\tradio: {\n\t\tmarginTop: theme.spacing(2)\n\t},\n\tchips: {\n\t\tdisplay: 'flex',\n\t\tflexWrap: 'wrap'\n\t},\n\tchip: {\n\t\tmargin: 2\n\t}\n});\n\n\n\n/** PropTypes */\nProjektForm.propTypes = {\n\t/** @ignore */\n\tclasses: PropTypes.object.isRequired,\n\t/** The ProjektBO's to be edited */\n\tprojekt: PropTypes.object,\n\t/** If true, the form is rendered */\n\tshow: PropTypes.bool.isRequired,\n\t/**  \n\t * Handler function which is called, when the dialog is closed.\n\t * Sends the edited or created projektBO's as parameter or null, if cancel was pressed.\n\t *  \n\t * Signature: onClose(ProjektBO's projekt);\n\t */\n\tonClose: PropTypes.func.isRequired,\n}\n\nexport default withStyles(styles)(ProjektForm);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions } from '@material-ui/core';\nimport { ElectivAPI } from '../../api';\nimport Alert from '@material-ui/lab/Alert';\nimport Snackbar from '@material-ui/core/Snackbar';\n\n/**\n * Es wird ein Dialog dargestellt, mit welchem man ein bestimmtes Projekt löschen kann\n * \n * @see See Matieral-UIs [Dialog] (https://material-ui.com/components/dialogs)\n * \n */\n\nclass ProjektDelete extends Component {\n\n  constructor(props) {\n    super(props);\n\n    //initiiere den state\n    this.state = {\n      projekt: props.projekt,\n      showSnackbar: false,\n    };\n\n  }\n\n  closeSnackbar = (event, reason) => {\n    if (reason === 'clockaway') {\n      return;\n    }\n    this.setState({\n      showSnackbar: false\n    });\n  };\n\n  //Wenn das Dialog geschlossen wird\n  handleClose = () => {\n    this.props.onClose(null);\n  }\n\n  // API Anbindung um das Projekt über das Backend in der Datenbank zu löschen\n  deleteProjekt = () => {\n    ElectivAPI.getAPI().deleteProjekt(this.state.projekt.id)\n      .then(() => {\n        this.props.getProjekte();\n        this.props.onClose(null);\n      }).catch(e => {\n        this.setState({\n          showSnackbar: true\n        })\n      })\n  }\n\n  /** Rendert die Komponente */\n  render() {\n    const { show } = this.props;\n    const { projekt, showSnackbar } = this.state;\n\n    return (\n      <div>\n        <Dialog\n          open={show}\n          onClose={this.handleClose}\n          maxWidth='xs'\n        >\n          <DialogTitle>{\"Sind Sie sich sicher?\"}</DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              Wenn Sie das Projekt <b>\"{projekt.name}\"</b> löschen möchten, drücken Sie auf \"JA\".\n                  </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose} color=\"primary\">\n              Abbrechen\n                  </Button>\n            <Button onClick={this.deleteProjekt} color=\"primary\" autoFocus>\n              Ja\n                  </Button>\n          </DialogActions>\n        </Dialog>\n        <Snackbar open={showSnackbar} autoHideDuration={6000} onClose={this.closeSnackbar}>\n          <Alert onClose={this.closeSnackbar} severity=\"error\">\n            Diese Projektart kann nicht gelöscht werden\n                </Alert>\n        </Snackbar>\n      </div>\n    );\n  }\n\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  },\n})\n\n/** PropTypes */\nProjektDelete.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** The ProjektBO's to be edited */\n  projekt: PropTypes.object,\n  /** If true, the form is rendered */\n  show: PropTypes.bool.isRequired,\n  /**  \n   * Handler function which is called, when the dialog is closed.\n   * Sends the edited or created projektBO's as parameter or null, if cancel was pressed.\n   *  \n   * Signature: onClose(ProjektBO's projekt);\n   */\n  onClose: PropTypes.func.isRequired,\n}\n\nexport default withStyles(styles)(ProjektDelete);","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Typography, Accordion, AccordionSummary, AccordionDetails, Grid } from '@material-ui/core';\nimport { Button } from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport IconButton from '@material-ui/core/IconButton';\nimport { ElectivAPI } from '../api';\nimport ProjektForm from './dialogs/ProjektForm';\nimport ProjektDelete from './dialogs/ProjektDelete';\n/*\nimport CustomerDeleteDialog from './dialogs/CustomerDeleteDialog';\nimport AccountList from './AccountList';\n*/\n\n//Muss noch geschrieben werden!\n\n\nclass ProjektDozentListeEintrag extends Component {\n\n    constructor(props) {\n        super(props);\n\n        // Status initalisieren\n        this.state = {\n            projekt: props.projekt,\n            projektarten: [],\n            showProjektForm: false,\n            showProjektDeleteDialog: false,\n            dozentName: \"\"\n        };\n    }\n\n    // Handles events wenn sich der status der oeffnung aendert\n    expansionPanelStateChanged = () => {\n        this.props.onExpandedStateChange(this.props.projekt);\n\n        /*\n        // Teilnahme Button deaktivieren, sofern Teilnehmer bereits in Projekt eingeschrieben\n        if( this.props.projekt.teilnehmerListe.indexOf(this.props.currentStudent.id)> -1){\n            this.setState({teilnahmeButtonDisabled:true});\n        }\n        */\n    }\n\n    //ruft die getProjekte() Funktion in den Props auf\n    getProjekte = () => {\n        this.props.getProjekte();\n    }\n\n    //Wird aufgerufen, wenn das Dialog-Fenster ProjektForm geschlossen wird\n    projektFormClosed = (projekt) => {\n        if (projekt) {\n            this.setState({\n                projekt: projekt,\n                showProjektForm: false\n            });\n        } else {\n            this.setState({\n                showProjektForm: false\n            });\n        }\n        this.props.projektFormClosed()\n    }\n\n    //Öffnet das Dialog-Fenster ProjektForm, wenn der Button geklickt wurde\n    bearbeitenButtonClicked = event => {\n        event.stopPropagation();\n        this.setState({\n            showProjektForm: true\n        });\n    }\n\n    //Öffnet das Dialog-Fenster ProjektDelete, wenn der Button geklickt wurde\n    projektDeleteButtonClicked = event => {\n        event.stopPropagation();\n        this.setState({\n            showProjektDeleteDialog: true\n        });\n    }\n\n    //Wird aufgerufen, wenn das Dialog-Fenster ProjektDelete geschlossen wird\n    projektDeleteClosed = () => {\n        this.setState({\n            showProjektDeleteDialog: false\n        });\n    }\n\n\n    // API Anbindung um Dozent vom Backend zu bekommen \n    getPerson = () => {\n        ElectivAPI.getAPI().getPerson(this.state.projekt.dozent)\n        .then(personBO =>\n            this.setState({\n                dozentName: personBO.getname(),\n                error: null,\n                loadingInProgress: false,\n            }))\n            .catch(e =>\n                this.setState({\n                    dozentName: null,\n                    error: e,\n                    loadingInProgress: false,\n                }));\n        this.setState({\n            error: null,\n            loadingInProgress: true\n        });\n      }\n\n    // Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\n    componentDidMount() {\n        this.getPerson();\n    }\n\n\n    /** Renders the component */\n    render() {\n        const { classes, expandedState, projektarten } = this.props;\n        // Use the states projekt\n        const { projekt, showProjektForm, showProjektDeleteDialog, dozentName } = this.state;\n\n\n        return (\n            <div>\n                <Accordion defaultExpanded={false} className={classes.root} expanded={expandedState}\n                    onChange={this.expansionPanelStateChanged}>\n                    <AccordionSummary\n                        expandIcon={<ExpandMoreIcon />}\n                        id={`projekt${projekt.getID()}Infopanel-header`}\n                    >\n                        <Grid container spacing={1} justify='flex-start' alignItems='center'>\n                            <Grid item>\n                                <Typography variant='body1'\n                                    className={classes.heading}>{projekt.getname()} bei {dozentName}\n                                </Typography>\n                            </Grid>\n                            <Grid item xs />\n                            <Grid item>\n                                <Typography variant='body2' color={'textSecondary'}>Details</Typography>\n                            </Grid>\n                        </Grid>\n                    </AccordionSummary>\n                    <AccordionDetails>\n                        <Typography variant='body1' color={'textSecondary'}>\n                            <b>Beschreibung: </b> {projekt.getbeschreibung()} <br />\n                            <b>Raum: </b>{projekt.getraum()}<br />\n                            <b>Maximale Teilnehmer: </b>{projekt.getmax_teilnehmer()}<br />\n                            <b>Betreuer: </b>{projekt.getbetreuer()}<br />\n                            <b>Externer Partner: </b>{projekt.getexterner_partner()}<br />\n                            <b>Wöchentlich: </b>{projekt.getwoechentlich() === \"1\" ? \"Ja\" : \"Nein\"}<br />\n                            <b>Blocktage vor Prüfungsphase: </b>{projekt.getanzahl_block_vor()}<br />\n                            <b>Blocktage während Prüfungsphase: </b>{projekt.getanzahl_block_in()}<br />\n                            <b>Sprache: </b>{projekt.getsprache()}<br />\n                            {projektarten.length > 0 && projekt ?\n                                <>\n                                    <b>Projektart: </b>{projektarten[projekt.art - 1].name}<br />\n                                    <b>SWS: </b>{projektarten[projekt.art - 1].sws}<br />\n                                    <b>ECTS: </b>{projektarten[projekt.art - 1].ects}<br />\n                                </>\n                                :\n                                <>\n                                    <b>ECTS noch nicht geladen</b><br />\n                                </>\n                            }\n                            <b>Präferierter Block: </b>{projekt.getpraeferierte_block()}<br />\n\n                        </Typography>\n                    </AccordionDetails>\n                    <AccordionDetails>\n                        <Grid container justify=\"flex-end\" alignItems=\"center\" spacing={2}>\n                            <Grid item>\n                                <Tooltip title='Löschen' placement=\"left\">\n                                    <IconButton className={classes.projektDeleteButton} variant=\"contained\"\n                                        onClick={this.projektDeleteButtonClicked}><DeleteIcon /></IconButton>\n                                </Tooltip>\n                            </Grid>\n                            <Grid item>\n                                <Button id='btn' className={classes.bearbeitenButton} variant='contained'\n                                    color='primary' onClick={this.bearbeitenButtonClicked}>\n                                    Bearbeiten\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    </AccordionDetails>\n                </Accordion>\n                <ProjektForm show={showProjektForm} projekt={projekt} onClose={this.projektFormClosed}\n                    getProjekte={this.getProjekte} />\n                <ProjektDelete show={showProjektDeleteDialog} projekt={projekt} onClose={this.projektDeleteClosed}\n                    getProjekte={this.getProjekte} />\n            </div>\n        );\n    }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n    root: {\n        width: '100%',\n        marginBottom: theme.spacing(1),\n        marginTop: theme.spacing(1),\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n    },\n\n});\n\n/** PropTypes */\nProjektDozentListeEintrag.propTypes = {\n    /** @ignore */\n    classes: PropTypes.object.isRequired,\n    /** The ProjektBO to be rendered */\n    projekt: PropTypes.object.isRequired,\n    /** The state of this ProjektDozentListeEintrag. If true the projekt is shown with its accounts */\n    expandedState: PropTypes.bool.isRequired,\n    /** The handler responsible for handle expanded state changes (exanding/collapsing) of this ProjektDozentListeEintrag\n     *\n     * Signature: onExpandedStateChange(projektBo projekt)\n     */\n    onExpandedStateChange: PropTypes.func.isRequired,\n\n}\n\nexport default withStyles(styles)(ProjektDozentListeEintrag);","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, Grid, FormControl, InputLabel } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\n\nimport { withRouter } from 'react-router-dom';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { ElectivAPI } from '../api';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\n\nimport ProjektForm from './dialogs/ProjektForm';\nimport ProjektDozentListeEintrag from './ProjektDozentListeEintrag';\n\n/*\nErstellt eine Liste von ProjektDozentListeEintrag fuer jedes Projekt\n*/\n\n\nclass ProjektDozentListe extends Component {\n\n    constructor(props) {\n        super(props);\n\n        let expandedID = null;\n\n        if (this.props.location.expandProjekt) {\n            expandedID = this.props.location.expandProjekt.getID();\n        }\n\n        //gebe einen leeren status\n        this.state = {\n            projekte: [],\n            filteredProjekte: [],\n            projektFilter: '',\n            error: null,\n            loadingInProgress: false,\n            expandedProjektID: expandedID,\n            showProjekteForm: false,\n            filterValue: 'Neu',\n            projektarten: []\n        };\n    }\n\n    //hole alle Projekte vom Backend\n    getProjekte = () => {\n        if (this.props.currentPerson.getrolle() === 'Admin') {\n            ElectivAPI.getAPI().getProjekteByZustand('Neu')\n                .then(projekteBOs => {\n                    this.setState({\t\t\t\t\t\t\t\t//neuer status wenn fetch komplett\n                        projekte: projekteBOs,\n                        filteredProjekte: [...projekteBOs],\t\t//speicher eine kopie\n                        loadingInProgress: false,\t\t\t\t// deaktiviere ladeindikator\n                        error: null,\n                    })\n                })\n            ElectivAPI.getAPI().getProjekteByZustand('Abgelehnt').then(projekteBOs => {\n                this.setState({\t\t\t\t\t\t\t\t//neuer status wenn fetch komplett\n                    projekte: [...this.state.projekte, ...projekteBOs],\n                    loadingInProgress: false,\t\t\t\t// deaktiviere ladeindikator\n                    error: null,\n                })\n            })\n            ElectivAPI.getAPI().getProjekteByZustand('Genehmigt').then(projekteBOs => {\n                this.setState({\t\t\t\t\t\t\t\t//neuer status wenn fetch komplett\n                    projekte: [...this.state.projekte, ...projekteBOs],\n                    loadingInProgress: false,\t\t\t\t// deaktiviere ladeindikator\n                    error: null,\n                })\n            })\n                .catch(e =>\n                    this.setState({\n                        projekte: [],\n                        loadingInProgress: false,\n                        error: e\n                    }));\n            // setze laden auf wahr\n            this.setState({\n                loadingInProgress: true,\n                error: null\n            });\n        } else {\n            ElectivAPI.getAPI().getProjekteByZustandByDozent(\"Neu\", this.props.currentPerson.getID())\n                .then(projekteBOs => {\n                    this.setState({\t\t\t\t\t\t\t\t//neuer status wenn fetch komplett\n                        projekte: projekteBOs,\n                        filteredProjekte: [...projekteBOs],\t\t//speicher eine kopie\n                        loadingInProgress: false,\t\t\t\t// deaktiviere ladeindikator\n                        error: null\n                    })\n                })\n            ElectivAPI.getAPI().getProjekteByZustandByDozent(\"Abgelehnt\", this.props.currentPerson.getID())\n                .then(projekteBOs => {\n                    this.setState({\t\t\t\t\t\t\t\t//neuer status wenn fetch komplett\n                        projekte: [...this.state.projekte, ...projekteBOs],\n                        loadingInProgress: false,\t\t\t\t// deaktiviere ladeindikator\n                        error: null\n                    })\n                })\n            ElectivAPI.getAPI().getProjekteByZustandByDozent(\"Genehmigt\", this.props.currentPerson.getID())\n                .then(projekteBOs => {\n                    this.setState({\t\t\t\t\t\t\t\t//neuer status wenn fetch komplett\n                        projekte: [...this.state.projekte, ...projekteBOs],\n                        loadingInProgress: false,\t\t\t\t// deaktiviere ladeindikator\n                        error: null\n                    })\n                })\n                .catch(e =>\n                    this.setState({\n                        projekte: [],\n                        loadingInProgress: false,\n                        error: e\n                    }));\n            // setze laden auf wahr\n            this.setState({\n                loadingInProgress: true,\n                error: null\n            });\n        }\n    }\n\n    // Holt alle Projektarten vom Backend mit GET Methode\n    getProjektart = () => {\n        ElectivAPI.getAPI().getProjektart().then(projektartBOs =>\n            this.setState({\n                projektarten: projektartBOs\n            })).catch(e =>\n                this.setState({\n                    projektarten: []\n                }));\n    }\n\n    // Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\n    componentDidMount() {\n        this.getProjekte();\n        this.getProjektart();\n    }\n\n    onExpandedStateChange = projekt => {\n        //  Zum anfang Projekt Eintrag = null\n        let newID = null;\n        // Falls ein Objekt geclicket wird, collapse\n        if (projekt.getID() !== this.state.expandedProjektID) {\n            // Oeffnen mit neuer Projekt ID\n            newID = projekt.getID()\n        }\n        this.setState({\n            expandedProjektID: newID,\n        });\n\n    }\n\n    addProjektButtonClicked = event => {\n        event.stopPropagation();\n        this.setState({\n            showProjekteForm: true\n        });\n    }\n\n    projektFormClosed = projekt => {\n        if (projekt) {\n            const newProjektList = [...this.state.projekte, projekt];\n            this.setState({\n                projekte: newProjektList,\n                filteredProjekte: [...newProjektList],\n                showProjekteForm: false,\n                filterValue: 'Neu'\n            });\n        } else {\n            this.setState({\n                showProjekteForm: false,\n                filterValue: 'Neu'\n            });\n        }\n    }\n\n    filterFieldValueChange = event => {\n\n\n        const filteredProjekte = [];\n        for (let i = 0; i < this.state.projekte.length; i++) {\n            if (this.state.projekte[i].aktueller_zustand === event.target.value) {\n                filteredProjekte.push(this.state.projekte[i]);\n            }\n        }\n\n        this.setState({\n            filteredProjekte: filteredProjekte,\n            filterValue: event.target.value\n        })\n\n    }\n\n\n    /** Renders the component */\n    render() {\n        const { classes, currentPerson } = this.props;\n        const {\n            filteredProjekte,\n            expandedProjektID,\n            loadingInProgress,\n            error,\n            showProjekteForm,\n            filterValue,\n            projektarten\n        } = this.state;\n\n        return (\n            <div className={classes.root}>\n                <Grid className={classes.projektFilter} container spacing={1} justify='flex-start' alignItems='center'>\n                    <Grid item>\n                    </Grid>\n                    <Grid item xs={4}>\n                        <FormControl className={classes.status}>\n                            <InputLabel>Status</InputLabel>\n                            <Select id='projektFilter' value={filterValue} onChange={this.filterFieldValueChange}>\n                                <MenuItem value={'Neu'}>Neu</MenuItem>\n                                <MenuItem value={'Genehmigt'}>Genehmigt</MenuItem>\n                                <MenuItem value={'Abgelehnt'}>Abgelehnt</MenuItem>\n                            </Select>\n                        </FormControl>\n\n\n                    </Grid>\n                    <Grid item xs />\n                    <Grid item>\n                        <Button variant='contained' className={classes.button} color='primary' startIcon={<AddIcon />}\n                            onClick={this.addProjektButtonClicked}>\n                            Projekt anlegen\n                        </Button>\n                    </Grid>\n                </Grid>\n                {\n                    // Show the list of ProjektDozentListeEintrag components\n                    // Do not use strict comparison, since expandedProjektID maybe a string if given from the URL parameters\n\n                    filteredProjekte.map(projekt =>\n                        <ProjektDozentListeEintrag key={projekt.getID()} projekt={projekt}\n                            expandedState={expandedProjektID === projekt.getID()}\n                            onExpandedStateChange={this.onExpandedStateChange}\n                            currentPerson={currentPerson} getProjekte={this.getProjekte}\n                            projektFormClosed={this.projektFormClosed} projektarten={projektarten}\n                        />)\n                }\n                <LoadingProgress show={loadingInProgress} />\n                <ContextErrorMessage error={error} contextErrorMsg={`Projekte konnten nicht geladen werden`}\n                    onReload={this.getProjekte} />\n                <ProjektForm show={showProjekteForm} currentPerson={currentPerson} onClose={this.projektFormClosed}\n                    getProjekte={this.getProjekte} />\n            </div>\n        );\n    }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n    root: {\n        width: '100%',\n    },\n    projektFilter: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(1),\n    },\n    status: {\n        minWidth: 120\n    },\n    button: {\n        marginRight: theme.spacing(1)\n    }\n});\n\n/** PropTypes */\nProjektDozentListe.propTypes = {\n    /** @ignore */\n    classes: PropTypes.object.isRequired,\n    /** @ignore */\n    location: PropTypes.object.isRequired,\n}\n\nexport default withRouter(withStyles(styles)(ProjektDozentListe));\n\n","import React from 'react'\nimport {makeStyles, Paper, Typography, Grid, Card, CardContent, Button, } from '@material-ui/core';\nimport Pascal from '../images/pascal.jpg';\nimport Alex from '../images/Alex.jpg';\nimport Daria from '../images/Daria.jpg';\nimport Jannik from '../images/Jannik.jpg';\nimport Raphael from '../images/Raphael.jpg';\nimport Leander from '../images/Leander.jpg';\n\n/**\n * About Page \n * Link zu Xing Profil der Gruppenmitglieder\n * und Impressum\n * \n * @author [Pascal Gienger](https://github.com/PascalGienger)\n */\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    marginBottom: theme.spacing(2),\n    padding: theme.spacing(1)\n  },\n  content: {\n    margin: theme.spacing(1),\n    textAlign: \"center\",\n  },  \n  header:{\n    textAlign: \"center\",\n    marginBottom:\"3%\",\n    marginTop:\"5%\"\n  },\n  container:{\n    marginBottom:\"2%\",\n  },\n  img:{\n    margin:\"auto\",\n    display: \"flex\",\n    marginTop:\"5%\",\n    paddingTop:\"4%\",\n    width:\"68%\", \n  },\n  button:{\n    display: \"flex\",\n    margin:\"auto\",\n    marginTop: \"-3%\",\n    marginBottom:\"5%\",\n  },\n  hyperlink:{\n    textDecoration: \"none\",\n    color: theme.palette.primary.main,\n  }\n}));\n\n\n\nfunction About() {\n\n  const classes = useStyles();\n\n  return (\n    <div className={classes.content}>\n      \n        <Typography variant='h4' className={classes.header}>\n          Unser Team\n        </Typography>\n\n          <Grid container item xs={12} spacing={3} className={classes.container} >\n            <React.Fragment>\n                <Grid item xs={4}>\n                  <Paper className={classes.paper1}>\n                    <Card className={classes.root1}>\n                      <img alt=\"Bild Raphael Müller\" className={classes.img} src={Raphael} title=\"Raphael Müller\"/>\n                      <CardContent>\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                          Raphael Müller\n                        </Typography>\n                      </CardContent>\n                      <Button className={classes.button} variant=\"contained\" > <a className={classes.hyperlink}  href=\"https://www.xing.com/profile/Raphael_Mueller104/cv \">Xing Profile</a></Button>\n                    </Card>\n                  </Paper>\n                </Grid>\n\n                <Grid item xs={4}>\n                  <Paper className={classes.paper}>\n                    <Card className={classes.root1}>\n                      <img alt=\"Bild Jannik Merz\" className={classes.img} src={Jannik}title=\"Jannik Merz\"/>\n                      <CardContent>\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                          Jannik Merz\n                        </Typography>\n                      </CardContent>\n                      <Button className={classes.button} variant=\"contained\" > <a className={classes.hyperlink} href=\"https://www.xing.com/profile/Jannik_Merz/cv\">Xing Profile</a></Button>\n                    </Card>\n                  </Paper>\n                </Grid>\n                \n                <Grid item xs={4}>\n                  <Paper className={classes.paper}>\n                    <Card className={classes.root1}>\n                      <img alt=\"Bild Leander Peter\" className={classes.img} src={Leander} title=\"Leander Peter\"/>\n                      <CardContent>\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                          Leander Peter\n                        </Typography>\n                      </CardContent>\n                      <Button className={classes.button} variant=\"contained\" > <a className={classes.hyperlink} href=\"https://www.xing.com/profile/Leander_Peter/cv\">Xing Profile</a></Button>\n                    </Card>\n                  </Paper>\n                </Grid>\n            </React.Fragment>\n          </Grid>\n\n\n          <Grid container item xs={12} spacing={3} className={classes.container}>\n            <React.Fragment>\n                <Grid item xs={4}>\n                  <Paper className={classes.paper1}>\n                    <Card className={classes.root1}>\n                      <img alt=\"Bild Daria Bilyk\" className={classes.img} src={Daria} title=\"Daria Bilyk\"/>\n                      <CardContent>\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                          Daria Bilyk\n                        </Typography>\n                      </CardContent>\n                      <Button className={classes.button}  variant=\"contained\" > <a className={classes.hyperlink} href=\"https://www.xing.com/profile/Daria_Bilyk/cv\">Xing Profile</a></Button>\n                    </Card>\n                  </Paper>\n                </Grid>\n\n                <Grid item xs={4}>\n                  <Paper className={classes.paper}>\n                    <Card className={classes.root1}>\n                      <img alt=\"Bild Alexander Hofstetter\" className={classes.img} src={Alex} title=\"Alexander Hofstetter\"/>\n                      <CardContent>\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                          Alexander Hofstetter\n                        </Typography>\n                      </CardContent>\n                      <Button className={classes.button}  variant=\"contained\" > <a className={classes.hyperlink} href=\"https://www.hdm-stuttgart.de/\">Xing Profile</a></Button>\n                    </Card>\n                  </Paper>\n                </Grid>\n\n                <Grid item xs={4}>\n                  <Paper className={classes.paper}>\n                    <Card className={classes.root1}>\n                      <img alt=\"Bild Pascal Gienger\" className={classes.img} src={Pascal} title=\"Pascal Gienger\"/>\n                      <CardContent>\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                          Pascal Gienger\n                        </Typography>\n                      </CardContent>\n                      <Button className={classes.button} variant=\"contained\" > <a className={classes.hyperlink} href=\"https://www.xing.com/profile/Pascal_Gienger2/cv\">Xing Profile</a></Button>\n                    </Card>\n                  </Paper>\n                </Grid> \n            </React.Fragment>\n          </Grid>\n\n         \n        <Typography variant='body2'>\n          © Hochschule der Medien 2020, all rights reserved.\n        </Typography>\n      </div>\n  )\n}\nexport default About;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, IconButton, Dialog, DialogTitle, InputAdornment, TextField } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport { ElectivAPI } from '../../api';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\n\nimport AddStudentEintrag from './AddStudentEintrag';\n\n/**\n * Es wird ein Dialog ausgeführt, in dem alle Studenten angezeigt werden\n * \n * @see See [AddStudentEintrag](#addstudenteintrag)\n * \n * Dozent (oder Admin) kann nach einem bestimmten Studenten suchen  \n * Dozent (oder Admin) kann Studenten zu dem ausgewählten Projekt hinzufügen\n * \n */\n\n\nclass AddStudent extends Component {\n\n    constructor(props) {\n        super(props);\n\n        //gebe einen leeren status\n        this.state = {\n            studenten: [],\n            filteredStudenten: [],\n            studentFilter: '',\n            error: null,\n            loadingInProgress: false,\n        };\n    }\n\n    // API Anbindung um alle Studenten vom Backend zu bekommen \n    // Wenn ein Student (eine Teilnahme) schon an dem Projekt teilnimmt, wird diese nicht angezeigt\n    getStudenten = () => {\n        ElectivAPI.getAPI().getStudenten()\n            .then(studentBOs => {\n                var teilnahmeids = this.props.teilnahmen.map(teilnahme => {\n                    return teilnahme.teilnehmer\n                });\n                studentenvar = studentBOs\n                var a;\n                for (a in teilnahmeids) {\n                    var studentenids = studentenvar.map(student => {\n                        return student.id\n                    });\n                    if (studentenids.indexOf(teilnahmeids[a] !== -1)) {\n                        studentenvar.splice(studentenids.indexOf(teilnahmeids[a]), 1)\n                    }\n                }\n            })\n            .then(() =>\n                this.setState({\n                    studenten: studentenvar,\n                    filteredStudenten: [...studentenvar],\n                    error: null,\n                    loadingInProgress: false,\n                })).catch(e =>\n                    this.setState({\n                        student: [],\n                        filteredStudenten: [],\n                        error: e,\n                        loadingInProgress: false,\n                    }));\n        this.setState({\n            error: null,\n            loadingInProgress: true,\n            loadingProjekteError: null\n        });\n    }\n\n    //wird aufgerufen, wenn das Dialog geschlossen wird\n    handleClose = () => {\n        this.props.onClose(null);\n    }\n\n    //wird aufgerufen, wenn das Dialog geöffnet wird\n    handleOpen = () => {\n        this.getStudenten();\n    }\n\n    //Suche-Funktion zum Suchen nach Studentenname oder Matrikelnummer\n    filterFieldValueChange = event => {\n        const value = event.target.value.toLowerCase();\n        this.setState({\n            filteredStudenten: this.state.studenten.filter(student => {\n                let nameContainsValue = student.getname().toLowerCase().includes(value);\n                let mat_nrContainsValue = student.getmat_nr().toString().includes(value);\n                return nameContainsValue || mat_nrContainsValue;\n            }),\n            studentFilter: value\n        });\n    }\n\n    //Suche leeren\n    clearFilterFieldButtonClicked = () => {\n        this.setState({\n            filteredStudenten: [...this.state.studenten],\n            studentFilter: ''\n        });\n    }\n\n\n    // Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\n    componentDidMount() {\n    }\n\n    /** Renders the component */\n    render() {\n        const { classes, show, currentProjekt } = this.props;\n        const { filteredStudenten, studentFilter, error, loadingInProgress } = this.state;\n\n        return (\n            show ?\n                <Dialog open={show} onEntered={this.handleOpen} onClose={this.handleClose} maxWidth='xs' fullWidth>\n                    <DialogTitle className={classes.dialogtitle}>Student hinzufügen\n                        <IconButton className={classes.closeButton} onClick={this.handleClose}>\n                            <CloseIcon />\n                        </IconButton>\n                    </DialogTitle>\n                    <TextField\n                        className={classes.filter}\n                        id='studentFilter'\n                        type='text'\n                        label='Studenten suchen'\n                        value={studentFilter}\n                        onChange={this.filterFieldValueChange}\n                        InputProps={{\n                            endAdornment: <InputAdornment position='end'>\n                                <IconButton onClick={this.clearFilterFieldButtonClicked}>\n                                    <ClearIcon fontSize=\"small\" />\n                                </IconButton>\n                            </InputAdornment>,\n                        }}\n                    />\n                    <List className={classes.root}>\n                        {\n                            filteredStudenten.map(student =>\n                                <AddStudentEintrag key={student.getID()} student={student} currentProjekt={currentProjekt}\n                                    show={this.props.show}\n                                />)\n                        }\n                        <ListItem>\n                            <LoadingProgress show={loadingInProgress} />\n                            <ContextErrorMessage error={error} contextErrorMsg={`Studenten konnten nicht geladen werden.`} onReload={this.getStudenten} />\n                        </ListItem>\n                    </List>\n                </Dialog>\n                : null\n        );\n    }\n}\n\nvar studentenvar;\n\n/** Component specific styles */\nconst styles = theme => ({\n    root: {\n        width: '100%',\n    },\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n    filter: {\n        margin: theme.spacing(2),\n        marginTop: 0,\n        marginBottom: 0\n    },\n    dialogtitle: {\n        paddingLeft: theme.spacing(2)\n    }\n});\n\n/** PropTypes */\nAddStudent.propTypes = {\n    /** @ignore */\n    classes: PropTypes.object.isRequired,\n    /** If true, the form is rendered */\n    show: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired,\n}\n\nexport default withStyles(styles)(AddStudent);","import { createMuiTheme } from '@material-ui/core/styles';\nimport { colors } from '@material-ui/core';\n\nconst white = '#FFFFFF';\nconst black = '#000000';\nconst darkgrey = '#808080';\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    black,\n    white,\n    darkgrey,\n    primary: {\n      contrastText: white,\n      dark: colors.blueGrey[400],\n      main: colors.blueGrey[600],\n      light: colors.blueGrey[100]\n    },\n    secondary: {\n      contrastText: white,\n      dark: colors.red[900],\n      main: colors.red[700],\n      light: colors.red[100]\n    },\n    success: {\n      contrastText: white,\n      dark: colors.green[900],\n      main: colors.green[600],\n      light: colors.green[400]\n    },\n    info: {\n      contrastText: white,\n      dark: colors.blue[900],\n      main: colors.blue[600],\n      light: colors.blue[400]\n    },\n    warning: {\n      contrastText: white,\n      dark: colors.orange[900],\n      main: colors.orange[600],\n      light: colors.orange[400]\n    },\n    error: {\n      contrastText: white,\n      dark: colors.red[900],\n      main: colors.red[600],\n      light: colors.red[400]\n    },\n    text: {\n      primary: colors.blueGrey[800],\n      secondary: colors.blueGrey[600],\n      link: colors.blue[600]\n    },\n    background: {\n      default: '#F4F6F8',\n      paper: white\n    },\n    icon: colors.blueGrey[600],\n    divider: colors.grey[200]\n  }, \n});\n\n\n// A custom theme for this app\n// const theme = createMuiTheme({\n//   palette: {\n//     primary: {\n//       main: '#556cd6',\n//     },\n//     secondary: {\n//       main: '#19857b',\n//     },\n//     error: {\n//       main: red.A400,\n//     },\n//     background: {\n//       default: '#fff',\n//     },\n//   },\n// });\n\n\nexport default theme;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {Card, Button, Grid, Typography, withStyles, Paper, FormControl, InputLabel, Select, MenuItem, TextField} from '@material-ui/core';\n\n/** \n * Render eine Seite für nicht eingeloggte Nutzer.\n * Dafür wird eine existierende Google Account Sign in Komponente verwendet. \n * Die Komponente nutzt eine Firebase für einen redirect.\n * \n * @see See Googles [firebase authentication](https://firebase.google.com/docs/web/setup)\n * @see See Googles [firebase API reference](https://firebase.google.com/docs/reference/js)\n * \n */\n\n class SignIn extends Component {\n\n\tconstructor(props){\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\trolle: null,\n\t\t\trolleEdited: false,\n\t\t\tnameValidationFailed: false,\n\t\t\tnameEdited: false,\n\t\t\tkuerzelValidationFailed: false,\n\t\t\tkuerzelEdited: false,\n\t\t\tmat_nrValidationFailed: false,\n\t\t\tmat_nrEdited: false\n\t\t};\n\t}\n\n\n\n\t// Handles the click event of the sign in button and calls the prop onSignIn handler\n\thandleSignInButtonClicked = () => {\n\t\tconsole.log(\"Click!\")\n\t\tdocument.cookie = `rolle= ${this.state.rolle};path=/`\n\t\tdocument.cookie = `name= ${document.getElementById('name').value};path=/`\n\t\tif (this.state.rolle === 'Student'){\n\t\t\tdocument.cookie = `kuerzel= ${document.getElementById('kuerzel').value};path=/`\n\t\t\tdocument.cookie = `mat_nr= ${document.getElementById('mat_nr').value};path=/`\n\t\t}\n\t\tsetTimeout(()=>{\n\t\t\tthis.props.onSignIn();\n\t\t},0);\n\t}\n\n\thandleChange = (rolle) => {\n\t\tthis.setState({\n\t\t\trolle: rolle.target.value,\n\t\t\trolleEdited: true\n\t\t})\n\t\tsetTimeout(()=>{\n\t\t\tif (this.state.rolle === \"Student\"){\n\t\t\t\tthis.setState({\n\t\t\t\t\tkuerzelEdited: false,\n\t\t\t\t\tmat_nrEdited: false\n\t\t\t\t})\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.setState({\n\t\t\t\t\tkuerzelEdited: true,\n\t\t\t\t\tmat_nrEdited: true\n\t\t\t\t})\n\t\t\t}\n\t\t},0);\n\t\tsetTimeout(()=>{\n\t\t\tconsole.log(this.state)\n\t\t},500);\n\t};\n\n\t// Validierung der Textfeldaenderungen \n\ttextFieldValueChange = (event) => {\n\t\tconst value = event.target.value;\n\n\t\tlet error = false;\n\t\tif (value.trim().lenght === 0) {\n\t\t\terror = true;\n\t\t}\n\t\tthis.setState({\n\t\t\t[event.target.id + 'ValidationFailed']: error,\n\t\t\t[event.target.id + 'Edited']: true\n\t\t});\n\t}\n\n\tnumberValueChange = (event) => {\n\t\tconst value = event.target.value;\n\t\tconst re = /^[0-9]{1,6}$/;\n\n\t\tlet error = false;\n\t\tif (value.trim().lenght === 0) {\n\t\t\terror = true;\n\t\t}\n\t\tif (re.test(event.target.value) === false) {\n\t\t\terror = true;\n\t\t}\n\t\tthis.setState({\n\t\t\t[event.target.id + 'ValidationFailed']: error,\n\t\t\t[event.target.id + 'Edited']: true\n\t\t});\n\t}\n\n\t// rendert die  Komponente SignIn Seite\n\trender() {\n\t\tconst {rolle, rolleEdited, nameValidationFailed, nameEdited, kuerzelValidationFailed, kuerzelEdited, mat_nrValidationFailed, mat_nrEdited} = this.state;\n\t\tconst { classes } = this.props;\n\n\t\treturn <div>\n\t\t\t\t<Paper>\n\t\t\t\t\t<Card>\n\t\t\t\t\t\t<Typography className={classes.root} align='center' variant='h6'>Willkommen zur HDM Wahlfach App</Typography>\n\t\t\t\t\t\t<Grid container justify='center'>\n\t\t\t\t\t\t\t<Grid item>\n\t\t\t\t\t\t\t\t<FormControl className={classes.formControl}>\n\t\t\t\t\t\t\t\t\t<InputLabel>Rolle</InputLabel>\n\t\t\t\t\t\t\t\t\t\t<Select required onChange={this.handleChange}>\n\t\t\t\t\t\t\t\t\t\t\t<MenuItem value='Student'>Student</MenuItem>\n\t\t\t\t\t\t\t\t\t\t\t<MenuItem value='Dozent'>Dozent</MenuItem>\n\t\t\t\t\t\t\t\t\t\t\t<MenuItem value='Admin'>Admin</MenuItem>\n\t\t\t\t\t\t\t\t\t\t</Select>\n\t\t\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t\t\t\t<form className={classes.form} autoComplete=\"on\">\n\t\t\t\t\t\t\t\t\t<TextField id=\"name\" label=\"Name\" error={nameValidationFailed} onChange = {this.textFieldValueChange}/>\n\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t\t{ rolle === 'Student' ?\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<form className={classes.form} autoComplete=\"on\">\n\t\t\t\t\t\t\t\t\t<TextField id=\"kuerzel\" label=\"Kürzel\" error={kuerzelValidationFailed} onChange = {this.textFieldValueChange}/>\n\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t\t<form className={classes.form} autoComplete=\"on\">\n\t\t\t\t\t\t\t\t<TextField id=\"mat_nr\" label=\"Matrikelnummer\" error={mat_nrValidationFailed} onChange = {this.numberValueChange}/>\n\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t<></>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t<Typography className={classes.root} align='center'>Für die Nutzung der weiteren Funktionen müssen Sie sich authentifizieren.</Typography>\n\t\t\t\t\t\t<Grid container justify='center'>\n\t\t\t\t\t\t\t<Grid item>\n\t\t\t\t\t\t\t\t<Button style={{marginBottom:\"2em\"}}variant='contained' color='primary' onClick={this.handleSignInButtonClicked}\n\t\t\t\t\t\t\t\tdisabled = { !rolleEdited || nameValidationFailed || !nameEdited || kuerzelValidationFailed || !kuerzelEdited || mat_nrValidationFailed || !mat_nrEdited}>\n\t\t\t\t\t\t\t\t\tAnmelden\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Card>\n\t\t\t\t</Paper>\n\t\t\t</div>\n\t}\n}\n\n\n/** Component specific styles */\nconst styles = theme => ({\n\troot: {\n\t\tmargin: theme.spacing(2)\n\t},\n\tformControl: {\n\t\tminWidth: 180\n\t},\n\tform: {\n\t\tmarginTop: theme.spacing(1)\n\t}\n});\n\n/** PropTypes */\nSignIn.propTypes = {\n\t/** @ignore */\n\tclasses: PropTypes.object.isRequired,\n\t/** \n\t * Handler function, which is called if the user wants to sign in.\n\t */\n\tonSignIn: PropTypes.func.isRequired,\n}\n\nexport default withStyles(styles)(SignIn)","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ElectivAPI from '../api/ElectivAPI';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\n\n/**\n * Es wird eine einzelne Teilnahme an einem Projekt mit allen not wendigen Informationen dargestellt\n * \n * Hierfür werden Projektname, Anzahl der ECTS, Semester, Dozent , die Note angezeigt\n * \n * Außerdem kann der Student nach der Benotung seine Teilnahme einem Modul zuweisen\n * \n */\n\n\n//Css Style Klassen für die Tabellen Zellen\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: theme.palette.primary.main,\n    color: theme.palette.common.white,\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\n\n//Css Style Klassen für die Tabellen Zeilen\nconst StyledTableRow = withStyles((theme) => ({\n  root: {\n    '&:nth-of-type(4n+1)': {\n      backgroundColor: theme.palette.action.hover,\n    },\n  },\n}))(TableRow);\n\n\nclass MeineProjekteEintrag extends Component {\n\n    constructor(props){\n        super(props);\n\n        // initiiere einen leeren state\n        this.state = {\n            projekt: null,\n            projektID: null,\n            projektName: null,\n            projektZustand: null,\n            ECTS: null,\n            semester: null,\n            module: null,\n            dozentName: null,\n            note: null,\n            loadingInProgress: false,\n            error: null\n        };\n    }\n\n    // API Anbindung um Projekte vom Backend zu bekommen \n    getProjekt = () => {\n      ElectivAPI.getAPI().getProjekt(this.props.teilnahme.lehrangebot)\n      .then(projektBO =>\n          this.setState({\n            projekt: projektBO,\n            projektID: projektBO.id,\n            projektName: projektBO.name,\n            projektZustand: projektBO.aktueller_zustand,\n            loadingInProgress: false,\n            error: null,\n          })).then(()=>{\n            this.getPerson()\n            this.getBewertung()\n            this.getModule_by_projekt_id()\n            this.getSemester_by_id()\n            this.getECTS()\n          })\n          .catch(e =>\n              this.setState({\n                projekt: null,\n                projektID: null,\n                projektName: null,\n                loadingInProgress: false,\n                error: e,\n              }));\n      this.setState({\n        loadingInProgress: true,\n        error: null\n      });\n    }\n\n    // API Anbindung um ECTS einer Projektart vom Backend zu bekommen \n    getECTS = () => {\n      ElectivAPI.getAPI().getProjektartById(this.state.projekt.art)\n      .then(ProjektartBO =>\n          this.setState({\n              ECTS: ProjektartBO.ects,\n              error: null,\n              loadingInProgress: false,\n          }))\n          .catch(e =>\n              this.setState({\n                  ECTS: null,\n                  error: e,\n                  loadingInProgress: false,\n              }));\n      this.setState({\n          error: null,\n          loadingInProgress: true\n      });\n    }\n\n    // Wenn die Teilnahme schon bewertet wurde, gebe die Note aus\n    getBewertung = () => {\n      if (this.props.teilnahme.resultat !== null){\n      ElectivAPI.getAPI().getBewertung(this.props.teilnahme.resultat)\n      .then(bewertungBO =>\n          this.setState({\n              note: bewertungBO.getnote(),\n              error: null,\n              loadingInProgress: false,\n          }))\n          .catch(e =>\n              this.setState({\n                  note: null,\n                  error: e,\n                  loadingInProgress: false,\n              }));\n      this.setState({\n          error: null,\n          loadingInProgress: true\n      });\n    }\n    }\n\n    // API Anbindung um Semester vom Backend zu bekommen \n    getSemester_by_id = () => {\n      ElectivAPI.getAPI().getSemester_by_id(this.state.projekt.getHalbjahr())\n      .then(semesterBO =>\n          this.setState({\n              semester: semesterBO.name,\n              error: null,\n              loadingInProgress: false,\n          }))\n          .catch(e =>\n              this.setState({\n                  semester: null,\n                  error: e,\n                  loadingInProgress: false,\n              }));\n      this.setState({\n          error: null,\n          loadingInProgress: true\n      });\n    }\n\n    // API Anbindung um wählbare Module für ein Projekt vom Backend zu bekommen \n    getModule_by_projekt_id = () => {\n      ElectivAPI.getAPI().getModule_by_projekt_id(this.state.projektID)\n      .then(modulBOs =>\n          this.setState({\n              module: modulBOs,\n              error: null,\n              loadingInProgress: false,\n          }))\n          .catch(e =>\n              this.setState({\n                  module: null,\n                  error: e,\n                  loadingInProgress: false,\n              }));\n      this.setState({\n          error: null,\n          loadingInProgress: true\n      });\n    }\n\n// API Anbindung um Dozent vom Backend zu bekommen \n    getPerson = () => {\n      ElectivAPI.getAPI().getPerson(this.state.projekt.dozent)\n      .then(personBO =>\n          this.setState({\n              dozentName: personBO.getname(),\n              error: null,\n              loadingInProgress: false,\n          }))\n          .catch(e =>\n              this.setState({\n                  dozentName: null,\n                  error: e,\n                  loadingInProgress: false,\n              }));\n      this.setState({\n          error: null,\n          loadingInProgress: true\n      });\n    }\n\n    // bei Änderung des Modul-Dropdown-Menüs wird das ausgewähte Modul im Backend als Anrechnung der Teilnahme in die Datenbank eingefügt \n    handleChange = async (edv) => {\n      if (this.state.note === null){\n        this.props.teilnahme.setAnrechnung(edv.target.value);\n        // console.log(`Option selected:`, edv.target.value);\n        await ElectivAPI.getAPI().updateTeilnahme(this.props.teilnahme);\n        this.props.getTeilnahmen();\n      }else{\n\n      }\n      \n    };\n\n    // Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\n    componentDidMount() {\n      this.getProjekt();\n    }\n\n    // Wenn die Componente geupdatet wird\n    componentDidUpdate(prevProps){\n      if((this.props.show) && (this.props.show !== prevProps.show)) {\n        this.getProjekt();\n      }\n    }\n\n    /** Renders the component */\n    render(){\n        const {classes, teilnahme} = this.props;\n        const { projektZustand, projektID, projektName, ECTS, semester, module, dozentName, note, loadingInProgress, error } = this.state;\n\n        return(\n          <>\n                <StyledTableRow key={projektID}>\n                  <StyledTableCell align=\"left\">{projektName}</StyledTableCell>\n                  <StyledTableCell align=\"center\">{ECTS}</StyledTableCell>\n                  <StyledTableCell align=\"center\">{semester}</StyledTableCell>\n                  <StyledTableCell align=\"center\">{dozentName}</StyledTableCell> \n                  { projektZustand === 'Abgeschlossen' ?\n                  <StyledTableCell align=\"center\">{note}</StyledTableCell>\n                  :\n                  <StyledTableCell align=\"center\"></StyledTableCell> \n                  }\n                  <StyledTableCell align=\"right\" className={classes.breite}>               \n                                  { module ?\n                                    <FormControl className={classes.formControl}>\n                                      <InputLabel>Modul</InputLabel> \n                                        <Select value = {teilnahme.anrechnung} onChange={this.handleChange}>\n                                          {\n                                          module.map(modul =>\n                                          <MenuItem value={modul.getID()}><em>{modul.getname()}</em></MenuItem>\n                                          )\n                                          }\n                                        </Select>                                                                \n                                    </FormControl>                                  \n                                    :\n                                    <FormControl className={classes.formControl}>\n                                      <InputLabel>Modul</InputLabel>\n                                        <Select value=\"\">\n                                          <MenuItem value=\"\"><em></em></MenuItem>\n                                        </Select>\n                                    </FormControl>\n                                  }\n                  </StyledTableCell>\n                  </StyledTableRow>\n                  <StyledTableRow> \n                    <StyledTableCell colspan=\"10\" className={classes.laden}>\n                      <LoadingProgress show={loadingInProgress}></LoadingProgress>\n                      <ContextErrorMessage error={error} contextErrorMsg = {'Diese Teilnahme konnte nicht geladen werden'} onReload={this.getProjekt} />\n                    </StyledTableCell>\n                  </StyledTableRow>\n          </>                        \n        );\n    }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n    root: {\n        width: '100%',\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n        padding: theme.spacing(1),\n    },\n    content: {\n        margin: theme.spacing(1),\n      },\n    table: {\n        minWidth: 700,\n      },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 200,\n        textAlign: \"left\"\n    },\n    button: {\n        margin: theme.spacing(1),\n        },\n    laden: {\n      padding: 0\n    },\n    breite: {\n      width: 220\n    }\n    });\n\n/** PropTypes */\nMeineProjekteEintrag.propTypes = {\n    /** @ignore */\n    classes: PropTypes.object.isRequired,\n    projekt: PropTypes.object.isRequired,\n    show: PropTypes.bool.isRequired\n  }\n  \n\nexport default withStyles(styles)(MeineProjekteEintrag);\n\n\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ElectivAPI from '../api/ElectivAPI';\nimport { withStyles, Button, Grid } from '@material-ui/core';\nimport { withRouter } from 'react-router-dom';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport SaveIcon from '@material-ui/icons/Save';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport MeineProjekteEintrag from './MeineProjekteEintrag';\n\n/**\n * Es werden alle Projekte des aktuell eingeloggten Studenten angezeigt\n * \n * @see See [MeineProjekteEintrag](#meineprojekteeintrag)\n * \n * Hierfür werden alle Teilnahmen des aktuell eingeloggten Student geladen und in die Componente MeineProjekteEintrag gemappt\n * \n */\n\n\n//Css Style für Tabellen Zellen\nconst StyledTableCell = withStyles((theme) => ({\n    head: {\n      backgroundColor: theme.palette.primary.main,\n      color: theme.palette.common.white,\n    },\n    body: {\n      fontSize: 14,\n    },\n  }))(TableCell);\n\n\n//Css Style für Tabllen Zeilen\nconst StyledTableRow = withStyles((theme) => ({\n    root: {\n      '&:nth-of-type(4n+1)': {\n        backgroundColor: theme.palette.action.hover,\n      },\n    },\n  }))(TableRow);\n\n\nclass MeineProjekte extends Component {\n\n    constructor(props){\n        super(props);\n\n        // initiiere einen leeren state\n        this.state = {\n            teilnahmen : [],\n            currentStudentName: null,\n            currentStudentmat_nr: null,\n            error: null,\n            loadingInProgress: false, \n        };\n    }\n\n\n    // API Anbindung um Teilnahmen des Students vom Backend zu bekommen \n    getTeilnahmen = () => {\n            ElectivAPI.getAPI().getTeilnahmen(this.props.currentStudent.id)\n            .then(teilnahmeBOs =>\n                this.setState({\n                    teilnahmen: teilnahmeBOs,\n                    error: null,\n                    loadingInProgress: false,\n                })).catch(e =>\n                    this.setState({\n                        teilnahmen: [],\n                        error: e,\n                        loadingInProgress: false,\n                    }));\n            this.setState({\n                error: null,\n                loadingInProgress: true,\n                loadingTeilnahmeError: null\n            });\n    }\n\n    // Funktion, die einen Print-Befehl ausführt\n    printSemesterbericht= () => {\n      window.print()\n    }\n\n    // Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\n    componentDidMount() {\n        this.getTeilnahmen();\n        this.setState({\n            currentStudentName: this.props.currentStudent.getname(),\n            currentStudentmat_nr: this.props.currentStudent.getmat_nr(),\n        })\n    }\n    \n    render(){\n\n        const { classes } = this.props;\n        const { teilnahmen, currentStudentName, currentStudentmat_nr, error, loadingInProgress} = this.state;\n        \n        return(\n            <div className={classes.root}>\n                 <Grid container className={classes.header} justify=\"flex-end\" alignItems=\"center\" spacing={2}>\n                    <Grid item xs/>\n                    <Grid item>\n                    <Button variant=\"outlined\" color=\"primary\" disableRipple \n                    style={{ backgroundColor: 'transparent', textTransform: 'None'}}\n                    >Name: {currentStudentName}<br/>Matrikelnummer: {currentStudentmat_nr}</Button>\n                    </Grid>\n                </Grid>\n                <TableContainer component={Paper}>\n                    <Table className={classes.table} aria-label=\"customized table\">\n                        <TableHead>\n                            <StyledTableRow>\n                                <StyledTableCell>Projekt</StyledTableCell>\n                                <StyledTableCell align=\"center\">ECTS</StyledTableCell>\n                                <StyledTableCell align=\"center\">Semester</StyledTableCell>\n                                <StyledTableCell align=\"center\">Dozent</StyledTableCell>\n                                <StyledTableCell align=\"center\">Note</StyledTableCell>\n                                <StyledTableCell align=\"center\">Modulzuweisung</StyledTableCell>\n                            </StyledTableRow>\n                        </TableHead>\n                        <TableBody>\n                            {\n                                teilnahmen ?\n                                <>\n                                {\n                                    teilnahmen.map(teilnahme => \n                                        <MeineProjekteEintrag key={teilnahme.getID()} teilnahme = {teilnahme} \n                                        getTeilnahmen = {this.getTeilnahmen}\n                                        show={this.props.show}\n                                    />) \n                                }\n                                </>\n                                :\n                                <></>\n                            }\n                        </TableBody>\n                    </Table>\n                    <LoadingProgress show={loadingInProgress} />\n                    <ContextErrorMessage error={error} contextErrorMsg = {'Deine Projekte konnten nicht geladen werden'} onReload={this.getTeilnahmen} /> \n                </TableContainer>\n                <Button variant=\"contained\" color=\"primary\" size=\"medium\" className={classes.button} startIcon={<SaveIcon />} onClick={this.printSemesterbericht}>\n                Notenspiegel\n                </Button>             \n            </div>\n        )\n    }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n    root: {\n        width: '100%',\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n      },\n      content: {\n        margin: theme.spacing(1),\n      },\n      table: {\n        minWidth: 700,\n      },\n      header:{\n        marginBottom: theme.spacing(1),\n        paddingLeft: theme.spacing(1),\n        paddingRight: theme.spacing(1),\n      },\n      button:{\n          marginTop: theme.spacing(2),\n          marginBottom: theme.spacing(3),\n          float: 'right'\n      }\n  });\n\n/** PropTypes */\nMeineProjekte.propTypes = {\n    /** @ignore */\n    classes: PropTypes.object.isRequired,\n    /** @ignore */\n    location: PropTypes.object.isRequired,\n    show: PropTypes.bool.isRequired\n}\n\n\n\nexport default withRouter(withStyles(styles)(MeineProjekte));\n\n\n\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ElectivAPI from '../api/ElectivAPI';\nimport { withStyles } from '@material-ui/core/styles';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\n\n/**\n * Es wird eine einzelne Teilnahme an einem Projekt mit allen not wendigen Informationen dargestellt\n * \n * Hierfür werden Projektname, Anzahl der ECTS, Semester, Dozent , die Note angezeigt\n * \n * Außerdem kann der Student nach der Benotung seine Teilnahme einem Modul zuweisen\n * \n */\n\n\n//Css Style Klassen für die Tabellen Zellen\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: theme.palette.primary.main,\n    color: theme.palette.common.white,\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\n\n//Css Style Klassen für die Tabellen Zeilen\nconst StyledTableRow = withStyles((theme) => ({\n  root: {\n    '&:nth-of-type(4n+1)': {\n      backgroundColor: theme.palette.action.hover,\n    },\n  },\n}))(TableRow);\n\n\nclass SemesterberichtEintrag extends Component {\n\n    constructor(props){\n        super(props);\n\n        // initiiere einen leeren state\n        this.state = {\n            projekt: null,\n            projektID: null,\n            projektName: null,\n            projektZustand: null,\n            ECTS: null,\n            semester: null,\n            module: null,\n            dozentName: null,\n            note: null,\n            loadingInProgress: false,\n            error: null\n        };\n    }\n\n    // API Anbindung um Projekte vom Backend zu bekommen \n    getProjekt = () => {\n      ElectivAPI.getAPI().getProjekt(this.props.teilnahme.lehrangebot)\n      .then(projektBO =>\n          this.setState({\n            projekt: projektBO,\n            projektID: projektBO.id,\n            projektName: projektBO.name,\n            projektZustand: projektBO.aktueller_zustand,\n            loadingInProgress: false,\n            error: null,\n          })).then(()=>{\n            this.getPerson()\n            this.getBewertung()\n            this.getModule_by_projekt_id()\n            this.getSemester_by_id()\n            this.getECTS()\n          })\n          .catch(e =>\n              this.setState({\n                projekt: null,\n                projektID: null,\n                projektName: null,\n                loadingInProgress: false,\n                error: e,\n              }));\n      this.setState({\n        loadingInProgress: true,\n        error: null\n      });\n    }\n\n    // API Anbindung um ECTS einer Projektart vom Backend zu bekommen \n    getECTS = () => {\n      ElectivAPI.getAPI().getProjektartById(this.state.projekt.art)\n      .then(ProjektartBO =>\n          this.setState({\n              ECTS: ProjektartBO.ects,\n              error: null,\n              loadingInProgress: false,\n          }))\n          .catch(e =>\n              this.setState({\n                  ECTS: null,\n                  error: e,\n                  loadingInProgress: false,\n              }));\n      this.setState({\n          error: null,\n          loadingInProgress: true\n      });\n    }\n\n    // Wenn die Teilnahme schon bewertet wurde, gebe die Note aus\n    getBewertung = () => {\n      if (this.props.teilnahme.resultat !== null){\n      ElectivAPI.getAPI().getBewertung(this.props.teilnahme.resultat)\n      .then(bewertungBO =>\n          this.setState({\n              note: bewertungBO.getnote(),\n              error: null,\n              loadingInProgress: false,\n          }))\n          .catch(e =>\n              this.setState({\n                  note: null,\n                  error: e,\n                  loadingInProgress: false,\n              }));\n      this.setState({\n          error: null,\n          loadingInProgress: true\n      });\n    }\n    }\n\n    // API Anbindung um Semester vom Backend zu bekommen \n    getSemester_by_id = () => {\n      ElectivAPI.getAPI().getSemester_by_id(this.state.projekt.getHalbjahr())\n      .then(semesterBO =>\n          this.setState({\n              semester: semesterBO.name,\n              error: null,\n              loadingInProgress: false,\n          }))\n          .catch(e =>\n              this.setState({\n                  semester: null,\n                  error: e,\n                  loadingInProgress: false,\n              }));\n      this.setState({\n          error: null,\n          loadingInProgress: true\n      });\n    }\n\n    // API Anbindung um wählbare Module für ein Projekt vom Backend zu bekommen \n    getModule_by_projekt_id = () => {\n      ElectivAPI.getAPI().getModule_by_projekt_id(this.state.projektID)\n      .then(modulBOs =>\n          this.setState({\n              module: modulBOs,\n              error: null,\n              loadingInProgress: false,\n          }))\n          .catch(e =>\n              this.setState({\n                  module: null,\n                  error: e,\n                  loadingInProgress: false,\n              }));\n      this.setState({\n          error: null,\n          loadingInProgress: true\n      });\n    }\n\n// API Anbindung um Dozent vom Backend zu bekommen \n    getPerson = () => {\n      ElectivAPI.getAPI().getPerson(this.state.projekt.dozent)\n      .then(personBO =>\n          this.setState({\n              dozentName: personBO.getname(),\n              error: null,\n              loadingInProgress: false,\n          }))\n          .catch(e =>\n              this.setState({\n                  dozentName: null,\n                  error: e,\n                  loadingInProgress: false,\n              }));\n      this.setState({\n          error: null,\n          loadingInProgress: true\n      });\n    }\n\n    // bei Änderung des Modul-Dropdown-Menüs wird das ausgewähte Modul im Backend als Anrechnung der Teilnahme in die Datenbank eingefügt \n    handleChange = async (edv) => {\n      if (this.state.note === null){\n        this.props.teilnahme.setAnrechnung(edv.target.value);\n        // console.log(`Option selected:`, edv.target.value);\n        await ElectivAPI.getAPI().updateTeilnahme(this.props.teilnahme);\n        this.props.getTeilnahmen();\n      }else{\n\n      }\n      \n    };\n\n    // Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\n    componentDidMount() {\n      this.getProjekt();\n    }\n\n    // Wenn die Componente geupdatet wird\n    componentDidUpdate(prevProps){\n      if((this.props.show) && (this.props.show !== prevProps.show)) {\n        this.getProjekt();\n      }\n    }\n\n    /** Renders the component */\n    render(){\n        const {classes} = this.props;\n        const { projektZustand, projektID, projektName, ECTS, dozentName, note, loadingInProgress, error } = this.state;\n\n        return(\n          <>\n                <StyledTableRow key={projektID}>\n                  <StyledTableCell align=\"left\" className={classes.projekt}>{projektName}</StyledTableCell>\n                  <StyledTableCell align=\"center\" className={classes.dozent}>{dozentName}</StyledTableCell> \n                  <StyledTableCell align=\"center\">{ECTS}</StyledTableCell>\n                  { projektZustand === 'Abgeschlossen' ?\n                  <StyledTableCell align=\"center\">{note}</StyledTableCell>\n                  :\n                  <StyledTableCell align=\"center\"></StyledTableCell> \n                  }\n                  </StyledTableRow>\n                  <StyledTableRow> \n                    <StyledTableCell colspan=\"10\" className={classes.laden}>\n                      <LoadingProgress show={loadingInProgress}></LoadingProgress>\n                      <ContextErrorMessage error={error} contextErrorMsg = {'Diese Teilnahme konnte nicht geladen werden'} onReload={this.getProjekt} />\n                    </StyledTableCell>\n                  </StyledTableRow>\n          </>                        \n        );\n    }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n    root: {\n        width: '100%',\n    },\n    table: {\n        minWidth: 700,\n      },\n    laden: {\n      padding: 0\n    },\n    projekt:{\n      width: 300\n    },\n    dozent:{\n      width: 250\n    }\n    });\n\n/** PropTypes */\nSemesterberichtEintrag.propTypes = {\n    /** @ignore */\n    classes: PropTypes.object.isRequired,\n    projekt: PropTypes.object.isRequired,\n    show: PropTypes.bool.isRequired\n  }\n  \n\nexport default withStyles(styles)(SemesterberichtEintrag);\n\n\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ElectivAPI from '../api/ElectivAPI';\nimport { withStyles, Button, Typography, Grid, MenuItem, FormControl, InputLabel, Select } from '@material-ui/core';\nimport { withRouter } from 'react-router-dom';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport SaveIcon from '@material-ui/icons/Save';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport SemesterberichtEintrag from './SemesterberichtEintrag';\n\n/**\n * Es werden alle Projekte des aktuell eingeloggten Studenten nach dem ausgewählten Semester angezeigt\n * \n * @see See [SemesterberichtEintrag](#semesterberichteintrag)\n * \n * Hierfür werden alle Teilnahmen des aktuell eingeloggten Student eines bestimmten Semesters geladen \n * und in die Componente MeineProjekteEintrag gemappt\n * \n */\n\n\n//Css Style für Tabellen Zellen\nconst StyledTableCell = withStyles((theme) => ({\n    head: {\n      backgroundColor: theme.palette.primary.main,\n      color: theme.palette.common.white,\n    },\n    body: {\n      fontSize: 14,\n    },\n  }))(TableCell);\n\n\n//Css Style für Tabllen Zeilen\nconst StyledTableRow = withStyles((theme) => ({\n    root: {\n      '&:nth-of-type(4n+1)': {\n        backgroundColor: theme.palette.action.hover,\n      },\n    },\n  }))(TableRow);\n\n\nclass Semesterbericht extends Component {\n\n    constructor(props){\n        super(props);\n\n        // initiiere einen leeren state\n        this.state = {\n            teilnahmen : [],\n            semester: [],\n            semesterwahl: null,\n            currentStudentName: null,\n            currentStudentmat_nr: null,\n            error: null,\n            loadingInProgress: false, \n        };\n    }\n\n\n    // API Anbindung um Teilnahmen des Students vom Backend zu bekommen \n    getTeilnahmen = () => {\n            ElectivAPI.getAPI().getTeilnahmenBySemester(this.props.currentStudent.id, this.state.semesterwahl)\n            .then(teilnahmeBOs =>\n                this.setState({\n                    teilnahmen: teilnahmeBOs,\n                    error: null,\n                    loadingInProgress: false,\n                })).catch(e =>\n                    this.setState({\n                        teilnahmen: [],\n                        error: e,\n                        loadingInProgress: false,\n                    }));\n            this.setState({\n                error: null,\n                loadingInProgress: true,\n                loadingTeilnahmeError: null\n            });\n    }\n\n    // API Anbindung um alle Semester vom Backend zu bekommen \n    getSemesterOfStudent = () => {\n        ElectivAPI.getAPI().getSemesterOfStudent(this.props.currentStudent.id)\n        .then(semesterBOs =>\n            this.setState({\n                semester: semesterBOs,\n                error: null,\n                loadingInProgress: false,\n            })).catch(e =>\n                this.setState({\n                    semester: [],\n                    error: e,\n                    loadingInProgress: false,\n                }));\n        this.setState({\n            error: null,\n            loadingInProgress: true,\n            loadingTeilnahmeError: null\n        });\n    }\n\n  //bei Änderung des Semester Dropdown Menüs wird das ausgewählte Semester im State als semesterwahl gesetzt\n  semesterChange = (semester) => {\n    this.setState({\n      semesterwahl: semester.target.value,\n    })\n    setTimeout(() => {\n    //console.log('Ausgewählte Semester ID:',this.state.semesterwahl)   \n    this.getTeilnahmen();\n    }, 0);\n  };\n\n    // Funktion, die einen Print-Befehl ausführt\n    printSemesterbericht= () => {\n      window.print()\n    }\n\n    // Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\n    componentDidMount() {\n        this.getSemesterOfStudent();\n        this.setState({\n            currentStudentName: this.props.currentStudent.getname(),\n            currentStudentmat_nr: this.props.currentStudent.getmat_nr(),\n        })\n    }\n    \n    render(){\n\n        const { classes } = this.props;\n        const {  semesterwahl, teilnahmen, semester, currentStudentName, currentStudentmat_nr, error, loadingInProgress} = this.state;\n        \n        return(\n            <div className={classes.root}>\n                <Grid container className={classes.header} justify=\"center\" alignItems=\"center\" spacing={2}>\n                    <Grid item>\n                    { semester ?\n                        <FormControl className={classes.formControl}>\n                        <InputLabel>Semester</InputLabel> \n                            <Select value={semesterwahl} onChange={this.semesterChange}>\n                            {\n                            semester.map(semester =>\n                            <MenuItem value={semester.getID()}><em>{semester.getname()}</em></MenuItem>\n                            )\n                            }\n                            </Select>                                                                \n                        </FormControl>                                  \n                        :\n                        <FormControl className={classes.formControl}>\n                        <InputLabel>Semester</InputLabel>\n                            <Select value=\"\">\n                            <MenuItem value=\"\"><em>Semester noch nicht geladen</em></MenuItem>\n                            </Select>\n                        </FormControl>\n                    }\n                    </Grid>\n                    <Grid item xs/>\n                    <Grid item>\n                        <Button variant=\"outlined\" color=\"primary\" disableRipple \n                        style={{ backgroundColor: 'transparent', textTransform: 'None'}}\n                        >Name: {currentStudentName}<br/>Matrikelnummer: {currentStudentmat_nr}</Button>\n                    </Grid>\n                </Grid>\n                { semesterwahl ? \n                <>\n                <TableContainer component={Paper}>\n                    <Table className={classes.table} aria-label=\"customized table\">\n                        <TableHead>\n                            <StyledTableRow>\n                                <StyledTableCell>Projekt</StyledTableCell>                                \n                                <StyledTableCell align=\"center\">Dozent</StyledTableCell>\n                                <StyledTableCell align=\"center\">ECTS</StyledTableCell>\n                                <StyledTableCell align=\"center\">Note</StyledTableCell>\n                            </StyledTableRow>\n                        </TableHead>\n                        <TableBody>\n                            {\n                                teilnahmen ?\n                                <>\n                                {\n                                    teilnahmen.map(teilnahme => \n                                        <SemesterberichtEintrag key={teilnahme.getID()} teilnahme = {teilnahme} \n                                        getTeilnahmen = {this.getTeilnahmen}\n                                        show={this.props.show}\n                                    />) \n                                }\n                                </>\n                                :\n                                <></>\n                            }\n                        </TableBody>\n                    </Table>\n                    <LoadingProgress show={loadingInProgress} />\n                    <ContextErrorMessage error={error} contextErrorMsg = {'Deine Projekte konnten nicht geladen werden'} onReload={this.getTeilnahmen} /> \n                </TableContainer>\n                <Button variant=\"contained\" color=\"primary\" size=\"medium\" className={classes.button} startIcon={<SaveIcon />} onClick={this.printSemesterbericht}>\n                Semesterbericht\n                </Button> \n                </>\n                :\n                <>\n                <Typography className={classes.warnung}> Bitte wählen Sie zunächst ein Semester aus</Typography>\n                <LoadingProgress show={loadingInProgress} />\n                <ContextErrorMessage error={error} contextErrorMsg={`Semester konnten nicht geladen werden`} onReload={this.getSemesterOfStudent}/>\n                </>\n                }            \n            </div>\n        )\n    }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n    root: {\n        width: '100%',\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2)\n      },\n      table: {\n        minWidth: 700,\n      },\n      header:{\n        marginBottom: theme.spacing(1),\n        paddingLeft: theme.spacing(1),\n        paddingRight: theme.spacing(1)\n      },\n      button:{\n          marginTop: theme.spacing(2),\n          marginBottom: theme.spacing(3),\n          float: 'right'\n      },\n      formControl: {\n          minWidth: 120,\n          marginBottom: theme.spacing(2),\n      },\n      warnung: {\n        color: theme.palette.secondary.main,\n        paddingLeft: theme.spacing(1)\n      }\n  });\n\n/** PropTypes */\nSemesterbericht.propTypes = {\n    /** @ignore */\n    classes: PropTypes.object.isRequired,\n    /** @ignore */\n    location: PropTypes.object.isRequired,\n    show: PropTypes.bool.isRequired\n}\n\n\n\nexport default withRouter(withStyles(styles)(Semesterbericht));\n\n\n\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\nimport ListItem from '@material-ui/core/ListItem';\nimport { ListItemSecondaryAction, Typography, IconButton } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport Divider from '@material-ui/core/Divider';\nimport { ElectivAPI } from '../../api';\n\n/**\n * Es wird ein einzelner Student und seiner Matrikelnummer dargestellt\n * \n * Man kann Teilnahme hinzufügen\n */\n\n\n\n\nclass AddStudentEintrag extends Component {\n\n  constructor(props) {\n    super(props);\n    // initiiere ein state \n    this.state = {\n      student: props.student,\n      addButtonDisabled: false,\n      error: null,\n      loadingInProgress: false\n    };\n  }\n\n  //fügt Teilnahme zu dem ausgewählten Prjekt hinzu\n  addTeilnahme = () => {\n    this.setState({ addButtonDisabled: true });\n    ElectivAPI.getAPI().setTeilnahme(this.props.currentProjekt, this.state.student.id);\n  }\n\n\n\n  /** Renders the component */\n  render() {\n    const { classes, student } = this.props;\n    const { error, loadingInProgress } = this.state;\n\n    return (\n      <div>\n        <ListItem className={classes.root}>\n          <Typography >{student.mat_nr}</Typography>\n          <Typography className={classes.marginLeft}>{student.name}</Typography>\n          <ListItemSecondaryAction>\n            <IconButton disabled={this.state.addButtonDisabled}><AddIcon onClick={this.addTeilnahme} /></IconButton>\n          </ListItemSecondaryAction>\n        </ListItem>\n        <ListItem>\n          <LoadingProgress show={loadingInProgress}></LoadingProgress>\n          <ContextErrorMessage error={error} contextErrorMsg={'Diese Teilnahme konnte nicht geladen werden'} onReload={this.getProjekt} />\n        </ListItem>\n        <Divider />\n      </div>\n    );\n  }\n}\n\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    marginTop: '16px'\n  },\n  marginLeft: {\n    marginLeft: theme.spacing(2)\n  }\n});\n\n/** PropTypes */\nAddStudentEintrag.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** Projekt to be rendered */\n  student: PropTypes.object.isRequired,\n  show: PropTypes.bool.isRequired\n}\n\n\n\nexport default withStyles(styles)(AddStudentEintrag);\n\n\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ElectivAPI from '../api/ElectivAPI';\nimport { withStyles, TableCell, TableRow, MenuItem, FormControl, Select} from '@material-ui/core';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\n\n//Icons importieren\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport IconButton from '@material-ui/core/IconButton';\n\n\n/**\n * Rendert die Einträge der Projekte (vom Studenten den Namen, die Matrikelnummer, die Note).\n * Die Teilnahme eines Studenten kann bei einem aktuellen Projekt entfernt werden.\n * Bei einem abgeschlossenen Projekt kann die Teilnahme eines Studenten nicht mehr entfernt werden.\n * Die Note kann trotzdem weiterhin nachbearbeitet werden.\n * \n * \n */\n\n//Css Style für die Tabellen Zellen\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: theme.palette.primary.main,\n    color: theme.palette.common.white,\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\n\n//Css Style für die Tabellen Zeilen\nconst StyledTableRow = withStyles((theme) => ({\n  root: {\n    '&:nth-of-type(4n+1)': {\n      backgroundColor: theme.palette.action.hover,\n    },\n  },\n}))(TableRow);\n\nclass ProjektPflegenEintrag extends Component {\n\n    constructor(props){\n        super(props);\n\n        // Initiert den state\n        this.state = {\n            teilnahmen : [],\n            bewertungen: [],\n            studentID: null,\n            studentName: null,\n            mat_nr: null,\n            note: [],\n            loadingInProgress: false,\n            error: null\n        };\n    }\n\n    //Button um die Teilnahme eines Studenten zu entfernen\n    teilnahmeAbwaehlenButtonClicked = event => {\n      //Logik fuer Teilnahme abwaehlen Button\n      this.setState({teilnahmeAbwaehlenButtonDisabled:true});\n      ElectivAPI.getAPI().deleteTeilnahme(this.props.teilnahme.lehrangebot, this.state.studentID).then(()=>this.props.reloadteilnahmen(this.props.teilnahme.lehrangebot));\n      \n    }\n    \n    // API Anbindung teilnehmenden Studenten des Projekts nach der StudentenID vom Backend zu bekommen \n    getStudentByID = () => {\n        ElectivAPI.getAPI().getStudentByID(this.props.teilnahme.getteilnehmer())\n        .then(studentBO =>\n            this.setState({                       //neuer status wenn fetch komplett\n              studentID: studentBO.getID(),\n              studentName: studentBO.getname(),\n              mat_nr:studentBO.getmat_nr(),\n              loadingInProgress: false,           // deaktiviere ladeindikator\n              error: null,\n            })).then(()=>{\n              \n            })\n            .catch(e =>\n                this.setState({\n                  student: null,\n                  studentID: null,\n                  studentName: null,\n                  loadingInProgress: false,\n                  error: e,\n                }));\n        this.setState({\n          loadingInProgress: true,\n          error: null\n        });\n      }\n\n    // API Anbindung um die möglichen Bewertungen vom Backende zu erhalten \n    getBewertungen=()=>{\n      ElectivAPI.getAPI().getBewertungen()\n      .then(bewertungBOs =>\n        this.setState({\n            bewertungen: bewertungBOs,\n            error: null,\n            loadingInProgress: false,\n        })).catch(e =>\n            this.setState({\n                bewertung: [],\n                error: e,\n                loadingInProgress: false,\n            }));\n      this.setState({\n          error: null,\n          loadingInProgress: true,\n          loadingProjekteError: null\n      });\n    }\n    \n    // API Anbindung um die Bewertung des Students vom Backend zu bekommen\n    getBewertung = () => {\n        ElectivAPI.getAPI().getBewertung(this.props.teilnahme.resultat)\n        .then(bewertungBO =>\n            this.setState({\n                note: bewertungBO.getID(),\n                error: null,\n                loadingInProgress: false,\n            }))\n            .catch(e =>\n                this.setState({\n                    note: null,\n                    error: null,\n                    loadingInProgress: false,\n                }));\n        this.setState({\n            error: null,\n            loadingInProgress: true\n        });\n      }\n\n    \n    //Bei Änderung der Bewertung in der Select Komponente wird die Bewertung im Backend geändert\n    handleChange = async (resultat) => { \n              this.props.teilnahme.setResultat(resultat.target.value); \n              this.setState({\n                note: resultat.target.value\n              })               \n              await ElectivAPI.getAPI().updateTeilnahme(this.props.teilnahme)\n              //this.getBewertung()\n    };\n\n    /** Lifecycle Methode, die bei dem Einfügen der Komponente in den Browser DOM aufgerufen wird*/\n    componentDidMount() {\n      this.getStudentByID();\n      this.getBewertung();\n      this.getBewertungen();\n    }\n\n    /** Rendert die Komponente*/\n    render(){\n        const {classes,currentProjektBO} = this.props;\n        const {bewertungen, studentName, mat_nr, note,  loadingInProgress, error } = this.state;\n\n        return(\n            //Tabelleneinträge für die Tabelle in der ProjektBearbeiten.js File\n            <>\n              <StyledTableRow >\n                <StyledTableCell align=\"left\" component=\"th\" scope=\"row\">{studentName}</StyledTableCell>\n                <StyledTableCell align=\"center\">{mat_nr}</StyledTableCell> \n                <StyledTableCell align=\"center\">\n                {bewertungen?\n                    <FormControl className={classes.formControl} >\n                            <Select value={note } onChange={this.handleChange}  >\n                                {\n                                bewertungen.map(bewertung =>\n                                <MenuItem value={bewertung.getID()}><em>{bewertung.getnote()}</em></MenuItem>\n                                )\n                                }\n                            </Select>  \n                    </FormControl>                                  \n                  :\n                    <FormControl className={classes.formControl}>\n                            <Select value={note} >\n                                <MenuItem value={\"\"}><em>Bewertungen nicht geladen</em></MenuItem>\n                            </Select>  \n                    </FormControl>\n                }      \n                </StyledTableCell> \n\n                <StyledTableCell align=\"center\">\n                  {currentProjektBO.aktueller_zustand === \"Abgeschlossen\"?\n                    <>\n                      <IconButton className={classes.teilnahmeAbwaehlenButton}  variant=\"contained\"  onClick={this.teilnahmeAbwaehlenButtonClicked} disabled > <DeleteIcon /></IconButton>\n                    </>\n                    :\n                    <>\n                      <IconButton className={classes.teilnahmeAbwaehlenButton}  variant=\"contained\"  onClick={this.teilnahmeAbwaehlenButtonClicked} > <DeleteIcon /></IconButton>\n                    </>\n                  }  \n                </StyledTableCell>\n              </StyledTableRow>\n              <StyledTableRow> \n              <StyledTableCell colspan=\"10\" className={classes.laden}>\n                <LoadingProgress show={loadingInProgress}></LoadingProgress>\n                <ContextErrorMessage error={error} contextErrorMsg = {'Diese Teilnahme konnte nicht geladen werden'}\n                      onReload={()=>{\n                        this.getStudentByID();\n                        this.getBewertung();\n                        this.getBewertungen();\n                  }} />\n              </StyledTableCell>\n            </StyledTableRow>\n          </>\n        );\n    }\n}\n\n//Css Komponent Spezifischer Style \nconst styles = theme => ({\n    root: {\n      width: '100%',\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(2),\n      padding: theme.spacing(1),\n    },\n    content: {\n        margin: theme.spacing(1),\n      },\n    table: {\n        minWidth: 700,\n      },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 50,\n    },\n    button: {\n        margin: theme.spacing(1),\n        },\n    selectEmpty: {\n      marginTop: theme.spacing(2),\n    },\n    laden: {\n      padding: 0\n    }\n    });\n\n/** PropTypes */\nProjektPflegenEintrag.propTypes = {\n    /** @ignore */\n    classes: PropTypes.object.isRequired,\n    /** Projekt to be rendered */\n    projekt: PropTypes.object.isRequired,\n    /** The state of this ProjektListeEintrag. If true the customer is shown with its accounts */\n    expandedState: PropTypes.bool.isRequired,\n    /** The handler responsible for handle expanded state changes (exanding/collapsing) of this ProjektListeEintrag \n     * \n     * Signature: onExpandedStateChange(CustomerBO customer)\n     */\n    onExpandedStateChange: PropTypes.func.isRequired,\n\n    /** \n     *  Event Handler function which is called after a sucessfull delete of this customer.\n     * \n     * Signature: onCustomerDelete(CustomerBO customer)\n     */\n    onCustomerDeleted: PropTypes.func.isRequired,\n    /** wenn true, dozent wird geladen */\n    show: PropTypes.bool.isRequired\n  }\n  \n\n\nexport default withStyles(styles)(ProjektPflegenEintrag);","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ElectivAPI from '../api/ElectivAPI';\nimport { withStyles, Button, Grid, Typography,Fab,Select,FormControl,\n  MenuItem,Paper,Table,TableRow,TableBody,TableHead,TableCell,TableContainer, InputLabel} from '@material-ui/core';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { withRouter } from 'react-router-dom';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\n\n//Icons importieren\nimport AddIcon from '@material-ui/icons/Add';\n\n//import AddStudent Dialog\nimport AddStudent from './dialogs/AddStudent';\n//import ProjektPflegenEintrag\nimport ProjektPflegenEintrag from './ProjektPflegenEintrag';\n\n\n\n/**\n * dieser Tab wird unter 2 Rollen angezeigt:\n * \n * Unter der Rolle Dozent:\n * Rendert die aktuellen sowie abgeschlossenen Projekte vom Dozenten \n * und die Einträge der Projekte mithilfe der ProjektPflegenEintrag Komponente.\n * Ein Student kann zu einem aktuellen Projekt hinzugefügt werden.\n * Das Projekt kann nach Bewertung in den nächsten Zustand gebracht werden.\n * Bei einem abgeschlossenen Projekt kann kein Teilnehmer mehr hinzugefügt werden.\n * \n * \n * Unter der Rolle Admin:\n * Rendert alle aktuellen sowie abgeschlossenen Projekte \n * und die Einträge der Projekte mithilfe der ProjektPflegenEintrag Komponente.\n * Ein Student kann zu einem aktuellen Projekt hinzugefügt werden.\n * Das Projekt kann nach Bewertung in den nächsten Zustand gebracht werden.\n * Bei einem abgeschlossenen Projekt kann kein Teilnehmer mehr hinzugefügt werden.\n * \n * \n * @see See component [ProjektPflegenEintrag](#projektpflegeneintrag)\n * @see See dialong   [AddStudent](#addstudent)\n * \n */\n\n//Css Style für Tabellen Zellen\nconst StyledTableCell = withStyles((theme) => ({\n    head: {\n      backgroundColor: theme.palette.primary.main,\n      color: theme.palette.common.white,\n    },\n    body: {\n      fontSize: 14,\n    },\n  }))(TableCell);\n//Css Style für Tabllen Zeilen\nconst StyledTableRow = withStyles((theme) => ({\n    root: {\n      '&:nth-of-type(odd)': {\n        backgroundColor: theme.palette.action.hover,\n      },\n    },\n  }))(TableRow);\n\n\nclass ProjektPflegen extends Component {\n\n    constructor(props){\n        super(props);\n        \n        // Initiert den state\n        this.state = {\n            teilnahmen:[],\n            projektzustand: 10,\n            projekte:[],\n            currentProjektBO : null,\n            abgeschlosseneProjekte: [],\n            currentProjekt: null,\n            semester: null,\n            error: null,\n            loadingInProgress: false,\n            showAddStudent: false,\n            \n        };\n        this.getTeilnahmenByProjektId=this.getTeilnahmenByProjektId.bind(this)\n    }\n    \n  //API Anbindung um alle aktuellen Projekte vom Backend zu bekommen\n  getProjekte = () => {\n    //Funtion unter der Rolle des Dozenten \n    //API Anbindung holt alle Projekte im richtigen Zustand, vom jeweiligen Dozenten vom Backendconsole.log(\"Hallo\",this.props.currentPerson)\n    if (this.props.currentPerson.getrolle()===\"Dozent\"){\n      ElectivAPI.getAPI().getProjekteByZustandByDozent(\"in Bewertung\",this.props.currentPerson.getID())\n        .then(projekteBOs =>\n          this.setState({\t\t\t\t\t\t\t\t    //neuer status wenn fetch komplett\n            projekte: projekteBOs, \n            loadingInProgress: false,\t\t\t\t// deaktiviere ladeindikator\n            error: null,\n          })).catch(e =>\n            this.setState({\n              projekte: [],\n              loadingInProgress: false,\n              error: e\n            }));\n      // setze laden auf wahr\n      this.setState({\n        loadingInProgress: true,\n        error: null\n      });\n    }\n    //Funtion unter der Rolle des Admin  \n    //API Anbindung holt alle Projekte im richtigen Zustand vom Backend\n    if (this.props.currentPerson.getrolle()===\"Admin\"){\n\t\t\tElectivAPI.getAPI().getProjekteByZustand(\"in Bewertung\")\n        .then(projekteBOs => \n          this.setState({\t\t\t\t\t\t\t\t    //neuer status wenn fetch komplett\n            projekte: projekteBOs,\t\n            loadingInProgress: false,\t\t\t\t// deaktiviere ladeindikator\n            error: null,\n          })).catch(e =>\n            this.setState({\n              projekte: [],\n              loadingInProgress: false,\n              error: e\n            }));\n    // setze laden auf wahr\n    this.setState({\n      loadingInProgress: true,\n      error: null\n    });\n    }\n  }\n\n  getAbgeschlosseneProjekte = () => {\n    //Funtion unter der Rolle des Dozenten \n    //API Anbindung holt alle Projekte im richtigen Zustand, vom jeweiligen Dozenten vom Backend\n    if (this.props.currentPerson.getrolle()===\"Dozent\"){\n      ElectivAPI.getAPI().getProjekteByZustandByDozent(\"Abgeschlossen\",this.props.currentPerson.getID())\n        .then(projekteBOs =>\n          this.setState({\t\t\t\t\t\t\t\t//neuer status wenn fetch komplett\n            abgeschlosseneProjekte: projekteBOs, \n            loadingInProgress: false,\t\t\t\t// deaktiviere ladeindikator\n            error: null,\n          })).catch(e =>\n            this.setState({\n              abgeschlosseneProjekte: [],\n              loadingInProgress: false,\n              error: e\n            }));\n      // setze laden auf wahr\n      this.setState({\n        loadingInProgress: true,\n        error: null\n      });\n    }\n    //Funtion unter der Rolle des Admin  \n    //API Anbindung holt alle Projekte im richtigen Zustand vom Backend\n    if (this.props.currentPerson.getrolle()===\"Admin\"){\n      ElectivAPI.getAPI().getProjekteByZustand(\"Abgeschlossen\")\n      .then(projekteBOs => \n        this.setState({\t\t\t\t\t\t\t\t//neuer status wenn fetch komplett\n          abgeschlosseneProjekte: projekteBOs,\t\n          loadingInProgress: false,\t\t\t\t// deaktiviere ladeindikator\n          error: null,\n        })).catch(e =>\n          this.setState({\n            abgeschlosseneProjekte: [],\n            loadingInProgress: false,\n            error: e\n          }));\n    // setze laden auf wahr\n    // console.log(this.projekte.toString());\n    this.setState({\n      loadingInProgress: true,\n      error: null\n    });\n    }\n  }\n\n  // API Anbindung holt alle Teilnahmen der jeweiligen Projekt ID vom Backend\n  getTeilnahmenByProjektId=(id)=>{\n    ElectivAPI.getAPI().getTeilnahmenByProjektId(id)\n    .then(teilnahmeBOs =>\n      this.setState({                 //neuer status wenn fetch komplett\n          teilnahmen: teilnahmeBOs,\n          error: null,\n          loadingInProgress: false,   // deaktiviere ladeindikator\n      })\n    ).catch(e =>\n          this.setState({\n              teilnahme: [],\n              error: e,\n              loadingInProgress: false,\n          }));\n    this.setState({\n        error: null,\n        loadingInProgress: true,\n        loadingProjekteError: null\n    });\n  }\n\n  // API Anbindung um alle Senester vom Backend zu bekommen \n  getSemester = () => {\n    ElectivAPI.getAPI().getSemester()\n    .then(semesterBOs =>\n        this.setState({                 //neuer status wenn fetch komplett\n            semester: semesterBOs,\n            error: null,\n            loadingInProgress: false,   // deaktiviere ladeindikator\n        })).catch(e =>\n            this.setState({\n                semester: [],\n                error: e,\n                loadingInProgress: false,\n            }));\n    this.setState({\n        error: null,\n        loadingInProgress: true,\n        loadingTeilnahmeError: null\n    });\n}\n  \n    \n  //bei Klick von dem Button: Bewertung abgeben, wird der Zustand des Projektes in den nächsten Zustand versetzt\n  bewertungAbgeschlossenButtonClicked = event => {\n    //Logik fuer bewertung abgeschlossen Button\n    ElectivAPI.getAPI().setZustandAtProjekt(this.state.currentProjekt, \"Abgeschlossen\").then(()=>{\n      this.getProjekte()\n      this.getAbgeschlosseneProjekte()\n      this.setState({\n        currentProjekt: null,\n        currentProjektBO: null,\n        teilnahmen: null,\n      })\n    }); \n  }\n\n  //bei Klick auf + Button wird ein Dialogfenster geöffnet für das Hinzufügen von Studenten\n  addStudentButtonClicked = event => {\n    event.stopPropagation();\n    this.setState({\n      showAddStudent: true\n    });\n  }\n  //bei Klick auf X Button wird das Dialogfenster wieder geschlossen\n  addStudentClosed = () => {\n      this.setState({\n        showAddStudent: false\n      });\n      this.getTeilnahmenByProjektId(this.state.currentProjekt);\n  }\n\n  /** Lifecycle Methode, die bei dem Einfügen der Komponente in den Browser DOM aufgerufen wird*/\n  componentDidMount() {\n    this.getProjekte();\n    this.getAbgeschlosseneProjekte();\n    this.getSemester();\n  }\n\n  //bei Änderung der Select Komponente wird das ausgewählte Projekt als das aktuelle Projekt ausgewählt  \n  handleChange = currentProjekt => (event) => {\n    let projektBO= event.target.value\n    \n    this.setState({\n      currentProjekt: projektBO.getID(),\n      currentProjektBO: projektBO,\n    })\n    \n    this.getTeilnahmenByProjektId(projektBO.getID())\n  };\n\n  //bei Änderung der Select Komponente des Zeiptunktes wird der neue Zeitpunkt ausgewählt  \n  handleChangeProjektzustand =  (event) => {\n    this.setState({\n      projektzustand: event.target.value,\n      currentProjekt: null,\n      currentProjektBO: null,\n      teilnahmen: null,\n    })      \n  };\n\n\n    /** Rendert die Komponente*/\n    render(){\n        const { classes } = this.props;\n        const { projektzustand, projekte, abgeschlosseneProjekte, currentProjekt, currentProjektBO, teilnahmen, semester, error, loadingInProgress, showAddStudent}  = this.state;\n        \n        return(\n          <div className={classes.root}>          \n            {/*erster sichtbarer Teil wenn noch kein Projekt ausgewählt wurde*/}\n            <Grid className={classes.grid} container spacing={1} display=\"flex\" margin=\"auto\">\n              <Grid item sm={2} >\n                <FormControl className={classes.formControl}>\n                  <InputLabel id=\"demo-simple-select-label\">Status</InputLabel>\n                  <Select value={projektzustand} onChange={this.handleChangeProjektzustand} className={classes.select}>\n                    <MenuItem value={10}>Aktuell</MenuItem>\n                    <MenuItem value={20}>Archiviert</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n                {projektzustand ?\n                  <>{/*wenn der aktuelle Zustand des Projektes aktuell ist*/}\n                    {projektzustand === 10?\n                      <>\n                        <Grid item sm={2} >\n                          <FormControl className={classes.formControl}>\n                            <InputLabel>Projekt </InputLabel>\n                              <Select  className={classes.selectprojekt} value={currentProjektBO}  onChange={this.handleChange(currentProjekt)}>\n                                {\n                                  projekte.map(projekt =>\n                                  <MenuItem value={projekt}><em>{projekt.getname()}</em></MenuItem>\n                                  )\n                                }\n                              </Select>                                                              \n                          </FormControl>\n                        </Grid>\n                      </>\n                      :\n                      <>\n                        <Grid item sm={2} >\n                          {semester?\n                            <>\n                              <FormControl className={classes.formControl}>\n                                  <InputLabel>Projekt </InputLabel>\n                                    <Select  className={classes.selectprojekt} value={currentProjektBO}  onChange={this.handleChange(currentProjekt)}>\n                                      {\n                                      abgeschlosseneProjekte.map(projekt =>\n                                      <MenuItem value={projekt}><em>{projekt.getname()} ({semester[projekt.halbjahr - 1].name})</em></MenuItem>\n                                      )\n                                      }\n                                    </Select>                                                              \n                              </FormControl>\n                            </>\n                            :\n                            <>\n                            </>\n                          }\n                        </Grid>\n                      </>\n                    }\n                  </>\n                  :\n                  <>\n                  </>\n                }\n\n              {/*wenn ein Projekt ausgewählt wurde*/}\n              {currentProjektBO ?\n                  <>\n                    {teilnahmen ?\n                        <>\n                          {/*wenn der aktuelle Zustand des Projektes in Bewertung ist*/}\n                          {currentProjektBO.aktueller_zustand === \"in Bewertung\"?\n                            <>\n                              <Grid item sm={8} align=\"right\">\n                                <Grid item className={classes.grid} >\n                                    <Tooltip title='Teilnehmer hinzufügen' placement=\"left\">\n                                      <Fab size=\"medium\" align=\"right\" className={classes.addButton} color=\"primary\" aria-label=\"add\" onClick={this.addStudentButtonClicked}>\n                                        <AddIcon />\n                                      </Fab> \n                                      </Tooltip>\n                                </Grid>\n                              </Grid>\n                            </>\n                            :\n                            <>\n                            </>\n                          }\n                      { teilnahmen.length > 0 ?\n                      <>\n                        {/*Tabellen Header Zeileninhalte*/}\n                        <TableContainer className={classes.table} component={Paper}>\n                          <Table aria-label=\"customized table\">\n                            <TableHead>\n                              <StyledTableRow>\n                                <StyledTableCell align=\"left\">Student </StyledTableCell>\n                                <StyledTableCell align=\"center\">Matrikelnr.</StyledTableCell>\n                                <StyledTableCell align=\"center\">Note</StyledTableCell>\n                                <StyledTableCell align=\"center\">Teilnahme</StyledTableCell>\n                              </StyledTableRow>\n                            </TableHead>\n                              <TableBody>\n                                {/*Tabellenzelleninhalte in der ProjektBearbeitenEintrag Komponente*/}\n                                {\n                                  teilnahmen.map(teilnahme =>\n                                    <ProjektPflegenEintrag key={teilnahme.getID()} teilnahme = {teilnahme} reloadteilnahmen={this.getTeilnahmenByProjektId} currentProjektBO = {currentProjektBO} currentProjekt = {currentProjekt} />\n                                  )\n                                }\n                              </TableBody> \n                          </Table>\n                        </TableContainer>\n                      </>\n                      : \n                      <>\n                        <Typography className={classes.warnung}>Dieses Projekt hat keine Teilnahmen</Typography>\n                      </>\n                      }\n\n                      {/*Bewertung abschließen Button wird nur angezeigt wenn das Projekt sich noch in dem Bewertungszustand befindet*/}\n                      {currentProjektBO && teilnahmen.length !== 0? \n                        <>\n                          {currentProjektBO.aktueller_zustand === \"in Bewertung\"?\n                            <>\n                              <Grid item xs/>\n                              <Grid item>\n                                <Button variant=\"contained\" color=\"primary\" className={classes.button} onClick={this.bewertungAbgeschlossenButtonClicked} >Bewertung abgeben</Button>\n                              </Grid>\n                            </>\n                            :\n                            <>  \n                            </>\n                          }\n                        </>\n                        :null\n                      }\n                      </>\n                      :\n                      <>\n                      </>\n                    }\n                    </>\n                    :\n                    <>\n                      <Typography className={classes.warnung}>Bitte wählen Sie ein Projekt aus</Typography>\n                    </>\n                  } \n                  \n            </Grid>\n            <LoadingProgress show={loadingInProgress} />\n            <ContextErrorMessage error={error} contextErrorMsg={`Die Projekte oder die Semester konnten nicht geladen werden`} \n                      onReload={()=>{\n                            this.getProjekte();\n                            this.getAbgeschlosseneProjekte();\n                            this.getSemester();\n                      }} />\n            {/*AddStudent Komponente*/}\n            <AddStudent show={showAddStudent} currentProjekt={currentProjekt} teilnahmen={teilnahmen} onClose={this.addStudentClosed}/>   \n          </div>\n        )\n    }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n    root: {\n        width: '100%',\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n        padding: theme.spacing(1)\n      },\n    content: {\n      margin: theme.spacing(1),\n    },\n    warnung: {\n      color: theme.palette.secondary.main,\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(2),\n      width: '100%'\n    },\n    select:{\n      minWidth:\"7rem\",\n    },\n    selectprojekt: {\n      minWidth: 220\n    },\n    table: {\n      marginTop: theme.spacing(2)\n    },\n    button: {\n      marginTop: theme.spacing(1)\n    }\n\n  });\n\n/** PropTypes */\nProjektPflegen.propTypes = {\n    /** @ignore */\n    classes: PropTypes.object.isRequired,\n    /** @ignore */\n    location: PropTypes.object.isRequired,\n\t// logged in Firebase user/person\n    show: PropTypes.bool.isRequired\n}\n\n\n\nexport default withRouter(withStyles(styles)(ProjektPflegen));\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ElectivAPI from '../api/ElectivAPI';\nimport { withStyles } from '@material-ui/core/styles';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\n\n\n/**\n * Die einzelne Teilnahme inklusive aller für den Administrator relevanten Informationen werden dargestellt\n * \n * Hierfür werden der Student inklusive Matrikelnummer, der Dozent sowie die Note angezeigt\n */\n\n//Css Style für Tabellen Zellen\nconst StyledTableCell = withStyles((theme) => ({\n    head: {\n      backgroundColor: theme.palette.darkgrey,\n      color: theme.palette.common.white,\n    },\n    body: {\n      fontSize: 14,\n    },\n  }))(TableCell);\n\n//Css Style für Tabellen Zeilen  \nconst StyledTableRow = withStyles((theme) => ({\n    root: {\n      '&:nth-of-type(4n+1)': {\n        backgroundColor: theme.palette.action.hover,\n      },\n    },\n  }))(TableRow);\n\nclass NotenlisteEintrag extends Component {\n\n    constructor(props){\n        super(props);\n\n        //initiiere einen leeren state\n        this.state = {\n            studentName: null,\n            mat_nr: null,\n            note: null,\n            projekt: null,\n            dozentName: null,\n            loadingInProgress: false,\n            error: null\n        };\n    }\n\n     // API Anbindung um den Student der Teilnahme vom Backend zu bekommen \n     getStudentByID = () => {\n      ElectivAPI.getAPI().getStudentByID(this.props.teilnahme.teilnehmer)\n          .then(studentBO =>\n              this.setState({\n                  studentName: studentBO.getname(),\n                  mat_nr: studentBO.getmat_nr(),\n                  error: null,\n                  loadingInProgress: false,\n              })\n              ).catch(e =>\n                  this.setState({\n                      studentName: null,\n                      mat_nr: null,\n                      error: e,\n                      loadingInProgress: false,\n                  }));\n          this.setState({\n              error: null,\n              loadingInProgress: true\n          });\n      }  \n  \n    // API Anbindung um die Bewertung der Teilnahme vom Backend zu bekommen \n    getBewertung = () => {\n      ElectivAPI.getAPI().getBewertung(this.props.teilnahme.resultat)\n      .then(bewertungBO =>\n          this.setState({\n              note: bewertungBO.getnote(),\n              error: null,\n              loadingInProgress: false,\n          }))\n          .catch(e =>\n              this.setState({\n                  note: null,\n                  error: null,\n                  loadingInProgress: false,\n              }));\n      this.setState({\n          error: null,\n          loadingInProgress: true\n      });\n    }\n\n    // API Anbindung um das Projekt der Teilnahme vom Backend zu bekommen \n    getProjekt = () => {\n      ElectivAPI.getAPI().getProjekt(this.props.teilnahme.lehrangebot)\n      .then(projektBO =>\n          this.setState({\n            projekt: projektBO,\n            loadingInProgress: false,\n            error: null,\n          })).then(()=>{\n            this.getPerson()\n          })\n          .catch(e =>\n              this.setState({\n                projekt: null,\n                loadingInProgress: false,\n                error: e,\n              }));\n      this.setState({\n        loadingInProgress: true,\n        error: null\n      });\n    }\n\n    // API Anbindung um den Dozent des Projekts der Teilnahme vom Backend zu bekommen \n    getPerson = () => {\n      ElectivAPI.getAPI().getPerson(this.state.projekt.dozent)\n      .then(personBO =>\n          this.setState({\n              dozentName: personBO.getname(),\n              error: null,\n              loadingInProgress: false,\n          }))\n          .catch(e =>\n              this.setState({\n                  dozentName: null,\n                  error: e,\n                  loadingInProgress: false,\n              }));\n      this.setState({\n          error: null,\n          loadingInProgress: true\n      });\n    }\n\n    // Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\n    componentDidMount() {\n        this.getStudentByID();\n        this.getBewertung();\n        this.getProjekt();\n    }\n\n    /** Rendert die Komponente */\n    render(){\n        const { classes } = this.props;\n        const { studentName, mat_nr, note, dozentName, loadingInProgress, error } = this.state;\n        \n        return(\n          <>\n              <StyledTableRow key={this.props.teilnahme.id}>\n                <StyledTableCell className={classes.student}>{studentName}</StyledTableCell>\n                <StyledTableCell align=\"center\" className={classes.mat_nr}>{mat_nr}</StyledTableCell> \n                <StyledTableCell align=\"center\">{dozentName}</StyledTableCell>\n                <StyledTableCell align=\"center\">{note}</StyledTableCell> \n              </StyledTableRow>\n              <StyledTableRow> \n                  <StyledTableCell colspan=\"10\" className={classes.laden}>\n                      <LoadingProgress show={loadingInProgress}></LoadingProgress>\n                      <ContextErrorMessage error={error} contextErrorMsg = {'Diese Teilnahme konnte nicht geladen werden'} onReload={this.getProjekt} />\n                  </StyledTableCell>\n              </StyledTableRow>\n          </>\n        );\n    }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n    root: {\n      width: '100%',\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(2),\n      padding: theme.spacing(1),\n    },\n    table: {\n      minWidth: 700,\n    },\n    laden: {\n      padding: 0\n      },\n    mat_nr: {\n      width: 150      \n    },\n    student: {\n      width: 300\n    }\n    });\n\n/** PropTypes */\nNotenlisteEintrag.propTypes = {\n    /** @ignore */\n    classes: PropTypes.object.isRequired,\n    teilnahme: PropTypes.object.isRequired,\n    show: PropTypes.bool.isRequired\n  }\n  \n  export default withStyles(styles)(NotenlisteEintrag);","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, Grid, Typography, Paper } from '@material-ui/core';\nimport { withRouter } from 'react-router-dom';\nimport { ElectivAPI } from '../api';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport SaveIcon from '@material-ui/icons/Save';\nimport Select from '@material-ui/core/Select';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\n\nimport NotenlisteEintrag from './NotenlisteEintrag';\n\n/**\n * Es werden alle benoteten Teilnahmen, welche einem bestimmten Modul in einem bestimmten Semester zugewiesen wurden, angezeigt\n * \n * @see See [NotenListeEintrag](#notenlisteeintrag)\n * \n * Hierfür kann zunächst das gewünschte Semester und das gewünschte Modul per Dropdown ausgewählt werden\n * Zuvor werden alle Semester und alle Module aus der Datenbank geladen\n */\n\n//Css Style für Tabellen Zellen\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: theme.palette.primary.main,\n    color: theme.palette.common.white,\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\n\n//Css Style für Tabellen Zeilen\nconst StyledTableRow = withStyles((theme) => ({\n  root: {\n    '&:nth-of-type(4n+1)': {\n      backgroundColor: theme.palette.action.hover,\n    },\n  },\n}))(TableRow);\n\nclass Notenliste extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\t//initiiere einen leeren state\n\t\tthis.state = {\n      module: [],\n      semester: [],\n      teilnahmen : [],\n      semesterwahl: null,\n\t\t\terror: null,\n\t\t\tloadingInProgress: false,\n\t\t};\n  }\n    // API Anbindung um alle Module vom Backend zu bekommen \n    getModule = () => {\n      ElectivAPI.getAPI().getModule()\n      .then(modulBOs =>\n          this.setState({\n              module: modulBOs,\n              error: null,\n              loadingInProgress: false,\n          })).catch(e =>\n              this.setState({\n                  module: [],\n                  error: e,\n                  loadingInProgress: false,\n              }));\n      this.setState({\n          error: null,\n          loadingInProgress: true,\n          loadingTeilnahmeError: null\n      });\n  }\n\n    // API Anbindung um alle Semester vom Backend zu bekommen \n    getSemester = () => {\n      ElectivAPI.getAPI().getSemester()\n      .then(semesterBOs =>\n          this.setState({\n              semester: semesterBOs,\n              error: null,\n              loadingInProgress: false,\n          })).catch(e =>\n              this.setState({\n                  semester: [],\n                  error: e,\n                  loadingInProgress: false,\n              }));\n      this.setState({\n          error: null,\n          loadingInProgress: true,\n          loadingTeilnahmeError: null\n      });\n  }\n\n  //bei Änderung des Semester Dropdown Menüs wird das ausgewählte Semester im State als semesterwahl gesetzt\n  handleSemesterChange = (semester) => {\n    this.setState({\n      semesterwahl: semester.target.value,\n    })\n    setTimeout(() => {\n    //console.log('Ausgewählte Semester ID:',this.state.semesterwahl)   \n    if (this.state.modulwahl != null) {\n      this.getTeilnahmen_by_modul_und_semester();\n    }\n    }, 0);\n  };\n\n  //bei Änderung des Modul Dropdown Menüs wird das ausgewählte Modul im State als modulwahl gesetzt\n  handleModulChange = (modul) => {\n    this.setState({\n      modulwahl: modul.target.value,\n    })\n    setTimeout(() => {\n      //console.log('Ausgewählte Modul ID:',this.state.modulwahl)   \n    if (this.state.semesterwahl != null) {\n      this.getTeilnahmen_by_modul_und_semester();\n    }\n    }, 0);\n  };\n\n  //Funktion, die einen Print-Befehl ausführt\n  printNotenliste= () => {\n    window.print()\n  }\n\n  //Funktion, um bei einem Fehler alle notwendigen Informationen zu laden\n  handleReload= () => {\n    this.getModule();\n    this.getSemester();\n  }\n\n\t// Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\n\tcomponentDidMount() {\n    this.getModule();\n    this.getSemester();\n\t}\n\n\n    // API Anbindung um Teilnahmen des Students vom Backend zu bekommen \n    getTeilnahmen_by_modul_und_semester = () => {\n      ElectivAPI.getAPI().getTeilnahmen_by_modul_und_semester(this.state.modulwahl, this.state.semesterwahl)\n      .then(teilnahmeBOs =>\n          this.setState({\n              teilnahmen: teilnahmeBOs,\n              error: null,\n              loadingInProgress: false,\n          })).catch(e =>\n              this.setState({\n                  teilnahmen: [],\n                  error: e,\n                  loadingInProgress: false,\n              }));\n      this.setState({\n          error: null,\n          loadingInProgress: true,\n          loadingTeilnahmeError: null\n      });\n    }    \n\n\t/** Rendert die Komponente */\n\trender() {\n    \n    const { classes } = this.props;\n    const { module, semester, semesterwahl, modulwahl, teilnahmen, loadingInProgress, error } = this.state;\n    return (\n    <div className={classes.root}>\n        <Grid className={classes.header} container spacing={1} justify='flex-start' alignItems='space-between'>\n          <Grid item xs={2}>\n          {\n            semester ?\n            <FormControl className={classes.formControl}>\n              <InputLabel>Semester</InputLabel> \n                <Select value = {semester.id} onChange={this.handleSemesterChange}>\n                  {\n                  semester.map(semester =>\n                  <MenuItem value={semester.getID()}><em>{semester.getname()}</em></MenuItem>\n                  )\n                  }\n                </Select>                                                                \n              </FormControl>                                  \n            :\n            <FormControl className={classes.formControl}>\n              <InputLabel>Semester</InputLabel>\n                <Select value=\"\">\n                  <MenuItem value=\"\"><em>Semester noch nicht geladen</em></MenuItem>\n                </Select>\n            </FormControl>\n          }\n          </Grid>\n          <Grid item xs className={classes.marginLeft}>\n          { module ?\n            <FormControl className={classes.formControl}>\n              <InputLabel>Modul</InputLabel> \n                <Select onChange={this.handleModulChange}>\n                  { module.map(modul =>\n                    <MenuItem value={modul.getID()}><em>{modul.getname()} ({modul.getEdv_nr()})</em></MenuItem>\n                    )\n                  }\n                </Select>\n            </FormControl>\n            :\n            <FormControl className={classes.formControl}>\n              <InputLabel>Modul</InputLabel>\n               <Select value=\"\">\n                 <MenuItem value=\"\"><em>Module noch nicht geladen</em></MenuItem>\n                </Select>\n            </FormControl>\n          }\n          </Grid>\n        </Grid>\n        <Grid item>\n        { semesterwahl && modulwahl ?\n          <>\n            \n            {teilnahmen.length > 0 ?\n            <>\n            <TableContainer component={Paper}>\n                  <Table className={classes.table} aria-label=\"customized table\">\n                      <TableHead>\n                          <StyledTableRow>\n                              <StyledTableCell align=\"left\">Student</StyledTableCell>\n                              <StyledTableCell align=\"center\">Matrikelnummer</StyledTableCell>\n                              <StyledTableCell align=\"center\">Dozent</StyledTableCell>\n                              <StyledTableCell align=\"center\">Note</StyledTableCell>\n                          </StyledTableRow>\n                      </TableHead>\n                      <TableBody>\n                        {\n                                teilnahmen ?\n                                <>\n                                {\n                                    teilnahmen.map(teilnahme => \n                                        <NotenlisteEintrag key={teilnahme.getID()} teilnahme = {teilnahme}\n                                        show={this.props.show}\n                                    />) \n                                }\n                                </>\n                                :\n                                <></>\n                            }\n                      </TableBody>\n                    </Table>\n                <LoadingProgress show={loadingInProgress} />\n                <ContextErrorMessage error={error} contextErrorMsg={`Die Notenliste konnte nicht geladen werden`} onReload={this.getTeilnahmen_by_modul_und_semester} />\n              </TableContainer>\n              <Button variant=\"contained\" color=\"primary\" size=\"medium\" className={classes.button} startIcon={<SaveIcon />} onClick={this.printNotenliste}>\n                Notenliste\n              </Button> \n              </> \n              :\n              <>\n              { error ?\n              <>\n              <LoadingProgress show={loadingInProgress} />\n              <ContextErrorMessage error={error} contextErrorMsg={`Die Notenliste konnte nicht geladen werden`} onReload={this.getTeilnahmen_by_modul_und_semester} />\n              </>\n              :\n              <Typography className={classes.warnung}> Leider gibt es für dieses Modul keine Teilnahmen oder es wurde noch keine Teilnahme benotet</Typography>\n              }\n              </>\n              }\n            </>\n            :\n            <>\n            <Typography className={classes.warnung}> Bitte wählen Sie zunächst ein Semester und ein Modul aus</Typography>\n            <LoadingProgress show={loadingInProgress} />\n            <ContextErrorMessage error={error} contextErrorMsg={`Semester und Module konnten nicht geladen werden`} onReload={this.handleReload}/>\n            </>\n            }\n        </Grid>\n    </div>\n    );\n    }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  },\n  header: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(1),\n  },\n  table: {\n    minWidth: 700,\n  },\n  button:{\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(3),\n    float: 'right'\n},\n  formControl: {\n    minWidth: 150,\n    marginLeft: theme.spacing(1)\n  },\n  marginLeft: {\n    marginLeft: theme.spacing(2)\n  },\n  warnung: {\n    color: theme.palette.secondary.main,\n    paddingTop: theme.spacing(1)\n  }\n});\n\n/** PropTypes */\nNotenliste.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** @ignore */\n  location: PropTypes.object.isRequired,\n}\n\nexport default withRouter(withStyles(styles)(Notenliste));\n\t\n","/** The firebase config structure for the Python Bank Project as provided by the firebase admin website */\n\nconst firebaseConfig = {\n\n  apiKey: \"AIzaSyB1lHTsUaz5NUHqupJ4FSFaFBISnswKwaY\",\n  authDomain: \"wahlfachapp.firebaseapp.com\",\n  databaseURL: \"https://wahlfachapp.firebaseio.com\",\n  projectId: \"wahlfachapp\",\n  storageBucket: \"wahlfachapp.appspot.com\",\n  messagingSenderId: \"22479023903\",\n  appId: \"1:22479023903:web:f335a2cda4db280a950a2a\",\n  measurementId: \"G-YDW30DYN6K\"\n\n};\n\nexport default firebaseConfig;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Typography, Accordion, AccordionSummary, AccordionDetails, Grid } from '@material-ui/core';\nimport { Button } from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport AddIcon from '@material-ui/icons/Add';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport { ElectivAPI } from '../api';\nimport ProjektForm from './dialogs/ProjektForm';\n\n\nclass ProjektverwaltungListeEintrag extends Component {\n\n    constructor(props) {\n        super(props);\n\n        // Status initalisieren\n        this.state = {\n            projekt: props.projekt,\n            projektarten: [],\n            showProjektForm: false,\n            showProjektDeleteDialog: false,\n            dozentName: \"\"\n        };\n    }\n\n    // Handles events wenn sich der status der oeffnung aendert\n    expansionPanelStateChanged = () => {\n        this.props.onExpandedStateChange(this.props.projekt);\n    }\n\n    annehmenButtonClicked = event => {\n        event.stopPropagation()\n        //Logik fuer annehmen Button\n        this.setState({ projektAnnehmenButton: true });\n        this.setState({ projektAblehnenButton: true });\n        ElectivAPI.getAPI().setZustandAtProjekt(this.props.projekt.id, \"Genehmigt\");\n    }\n\n    ablehnenButtonClicked = event => {\n        event.stopPropagation()\n        //Logik fuer ablehnen Button\n        this.setState({ projektAnnehmenButton: true });\n        this.setState({ projektAblehnenButton: true });\n        ElectivAPI.getAPI().setZustandAtProjekt(this.props.projekt.id, \"Abgelehnt\");\n    }\n\n\n    // Kummert sich um das close event vom ProjektForm\n    projektFormClosed = (projekt) => {\n        if (projekt) {\n            this.setState({\n                projekt: projekt,\n                showProjektForm: false\n            });\n        } else {\n            this.setState({\n                showProjektForm: false\n            });\n        }\n    }\n\n    // API Anbindung um Dozent vom Backend zu bekommen \n    getPerson = () => {\n        ElectivAPI.getAPI().getPerson(this.state.projekt.dozent)\n        .then(personBO =>\n            this.setState({\n                dozentName: personBO.getname(),\n                error: null,\n                loadingInProgress: false,\n            }))\n            .catch(e =>\n                this.setState({\n                    dozentName: null,\n                    error: e,\n                    loadingInProgress: false,\n                }));\n        this.setState({\n            error: null,\n            loadingInProgress: true\n        });\n      }\n\n    // Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\n    componentDidMount() {\n        this.getPerson();\n    }\n\n\n    /** Renders the component */\n    render() {\n        const { classes, expandedState, projektarten } = this.props;\n        // Use the states projekt\n        const { projekt, showProjektForm, dozentName } = this.state;\n\n\n        return (\n            <div>\n                <Accordion className={classes.root} defaultExpanded={false} expanded={expandedState}\n                    onChange={this.expansionPanelStateChanged}>\n                    <AccordionSummary\n                        expandIcon={<ExpandMoreIcon />}\n                        id={`projekt${projekt.getID()}Infopanel-header`}\n                    >\n                        <Grid container spacing={1} justify='flex-start' alignItems='center'>\n                            <Grid item>\n                                <Typography variant='body1'\n                                    className={classes.heading}>{projekt.getname()} bei {dozentName} </Typography>\n                                <Typography variant='body1' color={'success.main'}>\n                                </Typography>\n                            </Grid>\n                            <Grid item xs />\n                            <Grid item>\n                                <Typography variant='body2' color={'textSecondary'}>Details</Typography>\n                            </Grid>\n                        </Grid>\n                    </AccordionSummary>\n                    <AccordionDetails>\n                        <Typography variant='body1' color={'textSecondary'}>\n\n                            <b>Beschreibung: </b> {projekt.getbeschreibung()} <br />\n                            <b>Betreuer: </b>{projekt.getbetreuer()}<br />\n                            <b>Raum: </b>{projekt.getraum()}<br />\n                            <b>Maximale Teilnehmer: </b>{projekt.getmax_teilnehmer()}<br />\n                            <b>Externe Partner: </b>{projekt.getexterner_partner()}<br />\n                            <b>Wöchentlich: </b>{projekt.getwoechentlich() === \"1\" ? \"Ja\" : \"Nein\"}<br />\n                            <b>Blocktage vor der Prüfungsphase: </b>{projekt.getanzahl_block_vor()}<br />\n                            <b>Blocktage während der Prüfungsphase: </b>{projekt.getanzahl_block_in()}<br />\n                            <b>Sprache: </b>{projekt.getsprache()}<br />\n                            {projektarten.length > 0 && projekt ?\n                                <>\n                                    <b>Projektart: </b>{projektarten[projekt.art - 1].name}<br />\n                                    <b>SWS: </b>{projektarten[projekt.art - 1].sws}<br />\n                                    <b>ECTS: </b>{projektarten[projekt.art - 1].ects}<br />\n                                </>\n                                :\n                                <>\n                                    <b>ECTS noch nicht geladen</b><br />\n                                </>\n                            }\n                            <b>Präferierter Block: </b>{projekt.getpraeferierte_block()}<br />\n\n                        </Typography>\n                    </AccordionDetails>\n                    <AccordionDetails>\n                        <Grid container justify=\"flex-end\" alignItems=\"center\" spacing={2}>\n                            <Grid item>\n                                <Button className={classes.projektAnnehmenButton} variant='contained' size=\"small\"\n                                    color='primary' startIcon={<AddIcon />} onClick={this.annehmenButtonClicked}\n                                    disabled={this.state.projektAnnehmenButton}>\n                                    Annehmen\n                                </Button>\n                            </Grid>\n                            <Grid item>\n                                <Button className={classes.projektAblehnenButton} variant='contained' size=\"small\"\n                                    color='secondary' startIcon={<RemoveIcon />} onClick={this.ablehnenButtonClicked}\n                                    disabled={this.state.projektAblehnenButton}>\n                                    Ablehnen\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    </AccordionDetails>\n\n                </Accordion>\n                <ProjektForm show={showProjektForm} projekt={projekt} onClose={this.projektFormClosed} />\n\n            </div>\n        );\n    }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n    root: {\n        width: '100%',\n        marginBottom: theme.spacing(1),\n        marginTop: theme.spacing(1),\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n    },\n});\n\n/** PropTypes */\nProjektverwaltungListeEintrag.propTypes = {\n    /** @ignore */\n    classes: PropTypes.object.isRequired,\n    /** The ProjektBO to be rendered */\n    projekt: PropTypes.object.isRequired,\n    /** The state of this ProjektverwaltungListeEintrag. If true the projekt is shown with its accounts */\n    expandedState: PropTypes.bool.isRequired,\n    /** The handler responsible for handle expanded state changes (exanding/collapsing) of this ProjektverwaltungListeEintrag\n     *\n     * Signature: onExpandedStateChange(projektBo projekt)\n     */\n    onExpandedStateChange: PropTypes.func.isRequired,\n\n}\n\nexport default withStyles(styles)(ProjektverwaltungListeEintrag);","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, TextField, InputAdornment, IconButton, Grid, Typography } from '@material-ui/core';\nimport ClearIcon from '@material-ui/icons/Clear'\nimport { withRouter } from 'react-router-dom';\nimport { ElectivAPI } from '../api';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\n\nimport ProjektForm from './dialogs/ProjektForm';\nimport ProjektverwaltungListeEintrag from './ProjektverwaltungListeEintrag';\n\n/*\nErstellt eine Liste von Projekten um sie zu verwalten\n*/\n\n\nclass ProjektverwaltungListe extends Component {\n\n    constructor(props) {\n        super(props);\n\n        let expandedID = null;\n\n        if (this.props.location.expandProjekt) {\n            expandedID = this.props.location.expandProjekt.getID();\n        }\n\n        //gebe einen leeren status\n        this.state = {\n            projekte: [],\n            filteredProjekte: [],\n            projektFilter: '',\n            error: null,\n            loadingInProgress: false,\n            expandedProjektID: expandedID,\n            showProjekteForm: false,\n            projektarten: []\n        };\n    }\n\n    //Suche-Funktion zum Suchen von Projekt\n    filterFieldValueChange= event => {\n        const value = event.target.value.toLowerCase();\n        this.setState({\n            filteredProjekte: this.state.projekte.filter(projekt => {\n                let nameContainsValue = projekt.getname().toLowerCase().includes(value);\n                return nameContainsValue;\n            }),\n            projektFilter: value\n        });\n    }\n\n    //Suche leeren\n    clearFilterFieldButtonClicked = () => {\n        this.setState({\n            filteredProjekte: [...this.state.projekte],\n            projektFilter: ''\n        });\n    }\n\n    //hole alle Projekte vom Backend\n    getProjekte = () => {\n        ElectivAPI.getAPI().getProjekteByZustand(\"Neu\")\n            .then(projekteBOs =>\n                this.setState({\t\t\t\t\t\t\t\t//neuer status wenn fetch komplett\n                    projekte: projekteBOs,\n                    filteredProjekte: [...projekteBOs],\t\t//speicher eine kopie\n                    loadingInProgress: false,\t\t\t\t// deaktiviere ladeindikator\n                    error: null,\n                })).catch(e =>\n                    this.setState({\n                        projekte: [],\n                        filteredProjekte: [],\n                        loadingInProgress: false,\n                        error: e\n                    }));\n        // setze laden auf wahr\n        this.setState({\n            loadingInProgress: true,\n            error: null\n        });\n    }\n\n    // API Anbindung um alle Projektarten vom Backend zu bekommen \n    getProjektart = () => {\n        ElectivAPI.getAPI().getProjektart().then(projektartBOs =>\n            this.setState({\n                projektarten: projektartBOs\n            })).catch(e =>\n                this.setState({\n                    projektarten: []\n                }));\n    }\n\n    // Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\n    componentDidMount() {\n        this.getProjekte();\n        this.getProjektart();\n    }\n\n    onExpandedStateChange = projekt => {\n        //  Zum anfang Projekt Eintrag = null\n        let newID = null;\n\n        // Falls ein Objekt geclicket wird, collapse\n        if (projekt.getID() !== this.state.expandedProjektID) {\n            // Oeffnen mit neuer Projekt ID\n            newID = projekt.getID()\n        }\n        this.setState({\n            expandedProjektID: newID,\n        });\n\n    }\n\n    //wird aufgerufen, wenn Dialog Fenster geschloßen wird\n    projektFormClosed = projekt => {\n        if (projekt) {\n            const newProjektList = [...this.state.projekte, projekt];\n            this.setState({\n                projekte: newProjektList,\n                filteredProjekte: [...newProjektList],\n                showProjekteForm: false\n            });\n        } else {\n            this.setState({\n                showProjekteForm: false\n            });\n        }\n    }\n\n\n    /** Renders the component */\n    render() {\n        const { classes, currentStudent } = this.props;\n        const {\n            filteredProjekte,\n            projektFilter,\n            expandedProjektID,\n            loadingInProgress,\n            error,\n            showProjekteForm,\n            projektarten\n        } = this.state;\n\n        return (\n            <div className={classes.root}>\n                <Grid className={classes.projektFilter} container spacing={1} justify='flex-start' alignItems='center'>\n                    <Grid item>\n                        <Typography>\n                            Nicht genehmigte Projekte:\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={4}>\n                        <TextField\n                            autoFocus\n                            fullWidth\n                            id='projektFilter'\n                            type='text'\n                            value={projektFilter}\n                            onChange={this.filterFieldValueChange}\n                            InputProps={{\n                                endAdornment: <InputAdornment position='end'>\n                                    <IconButton onClick={this.clearFilterFieldButtonClicked}>\n                                        <ClearIcon />\n                                    </IconButton>\n                                </InputAdornment>,\n                            }}\n                        />\n                    </Grid>\n                    <Grid item xs />\n                    <Grid item>\n                    </Grid>\n                </Grid>\n                {\n                    // Show the list of ProjektverwaltungsllisteEintrag components\n                    // Do not use strict comparison, since expandedProjektID maybe a string if given from the URL parameters\n\n                    filteredProjekte.map(projekt =>\n                        <ProjektverwaltungListeEintrag key={projekt.getID()} projekt={projekt}\n                            expandedState={expandedProjektID === projekt.getID()}\n                            onExpandedStateChange={this.onExpandedStateChange}\n                            currentStudent={currentStudent} projektarten={projektarten}\n                        />)\n                }\n                <LoadingProgress show={loadingInProgress} />\n                <ContextErrorMessage error={error} contextErrorMsg={`Projekte konnten nicht geladen werden`}\n                    onReload={this.getProjekte} />\n                <ProjektForm show={showProjekteForm} onClose={this.projektFormClosed} />\n            </div>\n        );\n    }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n    root: {\n        width: '100%',\n        marginTop: theme.spacing(2),\n    },\n    projektFilter: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(1),\n        marginLeft: theme.spacing(1)\n    }\n});\n\n/** PropTypes */\nProjektverwaltungListe.propTypes = {\n    /** @ignore */\n    classes: PropTypes.object.isRequired,\n    /** @ignore */\n    location: PropTypes.object.isRequired,\n}\n\nexport default withRouter(withStyles(styles)(ProjektverwaltungListe));\n\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Tabs, Tab, Paper } from '@material-ui/core';\nimport { withRouter } from 'react-router-dom';\nimport { Link as RouterLink } from 'react-router-dom';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\n\n\n/**\n * Stellt einen Sub-Header für administrative Verwaltungsmöglichkeiten der einzelnen BOs dar\n * \n * @see See [SemesterListe](#semesterliste)\n * @see See [ModulListe](#modulliste)\n * @see See [ProjektartListe](#projektartliste)\n * @see See [UserListe](#userliste)\n * \n */\n\nclass Administration extends Component {\n\n  constructor(props) {\n    super(props);\n\n    //initiiere einen leeren state\n    this.state = {\n        tabindex: 0,\n        error: null,\n        loadingInProgress: false,\n    };\n  }\n\n  //Funktion, wenn ein Tab gewächselt wurde: setzt den state tabindex auf den aktuellen index \n  handleTabChange = (e, newIndex) => {\n    this.setState({\n        tabindex: newIndex\n    })\n};\n\n\n  // Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\n  componentDidMount() {\n  }\n\n  /** Renders the component */\n  render() {\n    const { classes } = this.props;\n    const {  loadingInProgress, error} = this.state;\n\n    return (\n      <div className={classes.root}>\n        <Paper>\n          <Tabs className={classes.tabs} indicatorColor='primary' textColor='primary'  centered value={this.state.tabindex} onChange={this.handleTabChange}  >\n              <Tab label='Semester' component={RouterLink} to={`/administration/semester`} />\n              <Tab label=\"Module\" component={RouterLink} to={'/administration/module'}/>\n              <Tab label='Projektarten' component={RouterLink} to={`/administration/projektarten`} />\n              <Tab label='Studenten' component={RouterLink} to={`/administration/student`} />\n              <Tab label='User' component={RouterLink} to={`/administration/user`} />\n          </Tabs>\n          <LoadingProgress show={loadingInProgress} />\n          <ContextErrorMessage error={error} contextErrorMsg={`Die Seite konnte nicht geladen werden.`}  />\n        </Paper>\n      </div>\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  },\n});\n\n/** PropTypes */\nAdministration.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** @ignore */\n  location: PropTypes.object.isRequired,\n}\n\nexport default withRouter(withStyles(styles)(Administration));\n\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    withStyles, Button, IconButton, Dialog, DialogContent, DialogContentText,\n    DialogTitle, DialogActions, TextField\n} from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\n\nimport { ElectivAPI, ModulBO } from '../../api';\n\n/**\n * Es wird ein Dialog mit einem Formular dargestellt, mit welchem man Module erstellen und bearbeiten kann\n * \n * @see See Matieral-UIs [Dialog] (https://material-ui.com/components/dialogs)\n * \n */\n\nclass ModulForm extends Component {\n\n    constructor(props) {\n        super(props);\n\n        //initiiere einen leeren state\n        this.state = {\n            name: '',\n            nameValidationFailed: false,\n            nameEdited: false,\n\n            edv_nr: null,\n            edv_nrValidationFailed: false,\n            edv_nrEdited: false,\n\n            addingError: null,\n            addingInProgress: false,\n\n            updatingError: null,\n            updatingInProgress: false\n        };\n        this.baseState = this.state;\n    }\n\n    // API Anbindung um das Modul über das Backend in die Datenbank einzufügen\n    addModul = () => {\n        let newModul = new ModulBO()\n        newModul.setID(0)\n        newModul.setname(this.state.name)\n        newModul.setEdv_nr(this.state.edv_nr)\n        ElectivAPI.getAPI().addModul(newModul).then(modul => {\n            this.props.getModule()\n            this.setState(this.baseState);\n            this.props.onClose(modul); //Aufrufen parent in backend\n        }).catch(e =>\n            this.setState({\n                addingInProgress: false,\n                addingError: e\n            })\n        );\n        // Ladeanimation einblenden\n        this.setState({\n            addingProgress: true,\n            addingError: null\n        });\n    }\n\n    // API Anbindung um das Modul über das Backend in die Datenbank upzudaten\n    updateModul = () => {\n        let modul = this.props.modul;\n        modul.setname(this.state.name)\n        modul.setEdv_nr(this.state.edv_nr)\n        ElectivAPI.getAPI().updateModul(modul).then(modul => {\n            this.props.getModule()\n            this.setState(this.baseState);\n            this.props.onClose(modul); //Aufrufen parent in backend\n        }).catch(e =>\n            this.setState({\n                updatingInProgress: false,\n                updatingError: e\n            })\n        );\n        // Ladeanimation einblenden\n        this.setState({\n            updatingInProgress: true,\n            updatingError: null\n        });\n    }\n\n    // Validierung der Textfeldaenderungen \n    textFieldValueChange = (event) => {\n        const value = event.target.value;\n\n        let error = false;\n        if (value.trim().length === 0) {\n            error = true;\n        }\n        this.setState({\n            [event.target.id]: event.target.value,\n            [event.target.id + 'ValidationFailed']: error,\n            [event.target.id + 'Edited']: true\n        });\n    }\n\n    // Validierung der Textfeldaenderungen nur numerische Werte\n    numberValueChange = (event) => {\n        const value = event.target.value;\n        const re = /^[0-9]{1,10}$/;\n\n        let error = false;\n        if (value.trim().length === 0) {\n            error = true;\n        }\n        if (re.test(event.target.value) === false) {\n            error = true;\n        }\n\n        this.setState({\n            [event.target.id]: event.target.value,\n            [event.target.id + 'ValidationFailed']: error,\n            [event.target.id + 'Edited']: true\n        });\n    }\n\n    //Infos des zu bearbeitenden Moduls laden\n    getInfos = () => {\n        if (this.props.modul) {\n            let name = this.props.modul.getname();\n            let edv_nr = this.props.modul.getEdv_nr();\n            this.setState({\n                name: name,\n                edv_nr: edv_nr,\n            })\n        }\n    }\n\n    //Wenn das Dialog geschlossen wird\n    handleClose = () => {\n        this.setState(this.baseState);\n        this.props.onClose(null);\n    }\n\n\n    /** Rendert die Komponente */\n    render() {\n        const { classes, show, modul } = this.props;\n        const {\n            name,\n            nameValidationFailed,\n            nameEdited,\n\n            edv_nr,\n            edv_nrValidationFailed,\n            edv_nrEdited,\n\n            addingInProgress,\n            addingError,\n            updatingInProgress,\n            updatingError, } = this.state;\n\n        let title = '';\n        let header = '';\n\n        if (modul) {\n            // Modul objekt true, somit ein edit\n            title = `Modul \"${modul.name}\" bearbeiten`;\n            header = 'Neue Moduldaten einfügen';\n        } else {\n            title = 'Erstelle ein neues Modul';\n            header = 'Moduldaten einfügen';\n        }\n\n        return (\n            show ?\n                <Dialog open={show} onEnter={this.getInfos} onClose={this.handleClose} maxWidth='xs' fullWidth>\n                    <DialogTitle className={classes.dialogtitle}>{title}\n                        <IconButton className={classes.closeButton} onClick={this.handleClose}>\n                            <CloseIcon />\n                        </IconButton>\n                    </DialogTitle>\n                    <DialogContent>\n                        <DialogContentText>\n                            {header}\n                        </DialogContentText>\n\n                        <form className={classes.root} noValidate autoComplete='off'>\n\n                            <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='small' id='name' label='Modulname' variant=\"outlined\" value={name}\n                                onChange={this.textFieldValueChange} error={nameValidationFailed} />\n\n                            <TextField className={classes.textfield} type='text' required fullWidth margin='small' id='edv_nr' label='EDV-Nummer' variant=\"outlined\" value={edv_nr}\n                                onChange={this.numberValueChange} error={edv_nrValidationFailed} />\n                        </form>\n                        <LoadingProgress show={addingInProgress || updatingInProgress} />\n                        {\n                            // Show error message in dependency of modul prop\n                            modul ?\n                                <ContextErrorMessage error={updatingError} contextErrorMsg={`The Modul ${modul.getID()} could not be updated.`} onReload={this.updateModul} />\n                                :\n                                <ContextErrorMessage error={addingError} contextErrorMsg={`The Modul could not be added.`} onReload={this.addModul} />\n                        }\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.handleClose} color='secondary'>\n                            Abbrechen\n                        </Button>\n                        {\n                            // If a Modul is given, show an  (update) button, else an hinzufügen (add) button\n                            modul ?\n                                <Button disabled={nameValidationFailed || edv_nrValidationFailed} variant='contained' onClick={this.updateModul} color='primary'>\n                                    Speichern\n                        </Button>\n                                :\n                                <Button disabled={nameValidationFailed || !nameEdited || edv_nrValidationFailed || !edv_nrEdited}\n                                    variant='contained' onClick={this.addModul} color='primary'>\n                                    Hinzufügen\n                        </Button>\n                        }\n                    </DialogActions>\n                </Dialog>\n                : null\n        );\n    }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n    root: {\n        width: '100%',\n    },\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n    textfield: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1)\n    }\n});\n\n/** PropTypes */\nModulForm.propTypes = {\n    /** @ignore */\n    classes: PropTypes.object.isRequired,\n    show: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired,\n}\n\nexport default withStyles(styles)(ModulForm);","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions } from '@material-ui/core';\nimport { ElectivAPI } from '../../api';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Alert from '@material-ui/lab/Alert';\n\n/**\n * Es wird ein Dialog dargestellt, mit welchem man ein bestimmtes Modul löschen kann\n * \n * @see See Matieral-UIs [Dialog] (https://material-ui.com/components/dialogs)\n * \n */\n\nclass ModulDelete extends Component {\n\n  constructor(props) {\n    super(props);\n\n    //initiiere den state\n    this.state = {\n      modul: props.modul,\n      showSnackbar: false,\n    };\n  }\n\n  closeSnackbar = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    this.setState({\n      showSnackbar: false\n    });\n  };\n\n  //Wenn das Dialog geschlossen wird\n  handleClose = () => {\n    this.props.onClose(null);\n  }\n\n  // API Anbindung um das Modul über das Backend in der Datenbank zu löschen\n  deleteModul = () => {\n    ElectivAPI.getAPI().deleteModul(this.state.modul.id)\n      .then(() => {\n        this.props.getModule();\n        this.props.onClose(null);\n      }).catch(e => {\n        this.setState({\n          showSnackbar: true\n        })\n      })\n  }\n\n  /** Rendert die Komponente */\n  render() {\n    const { show } = this.props;\n    const { modul, showSnackbar } = this.state;\n    return (\n      <div>\n        <Dialog\n          open={show}\n          onClose={this.handleClose}\n          maxWidth='xs'\n        >\n          <DialogTitle>{\"Sind Sie sich sicher?\"}</DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              Wenn Sie das Modul <b>\"{modul.name}\"</b> löschen möchten, drücken Sie auf \"JA\".\n                  </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose} color=\"primary\">\n              Abbrechen\n                  </Button>\n            <Button onClick={this.deleteModul} color=\"primary\" autoFocus>\n              Ja\n                  </Button>\n          </DialogActions>\n        </Dialog>\n        <Snackbar open={showSnackbar} autoHideDuration={6000} onClose={this.closeSnackbar}>\n          <Alert onClose={this.closeSnackbar} severity=\"error\">\n            Dieses Modul kann nicht gelöscht werden\n                </Alert>\n        </Snackbar>\n      </div>\n    );\n  }\n\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  },\n})\n\n/** PropTypes */\nModulDelete.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  show: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n}\n\nexport default withStyles(styles)(ModulDelete);","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport ListItem from '@material-ui/core/ListItem';\nimport { Typography, IconButton, Grid, Tooltip } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport Divider from '@material-ui/core/Divider';\n//import {ElectivAPI} from '../api';\n\nimport ModulForm from './dialogs/ModulForm';\nimport ModulDelete from './dialogs/ModulDelete';\n\n\n/**\n * Es wird ein einzelnes Modul mit allen notwendigen Informationen angezeigt\n * Außerdem lassen sich Moduleinträge löschen und bearbeiten\n * \n * @see See [ModulDelete](#moduldelte)\n * @see See [ModulForm](#modulform)\n */\n\n\n\nclass ModulListeEintrag extends Component {\n\n    constructor(props){\n        super(props);\n\n        //initiiere einen leeren state\n        this.state = {\n            showModulForm: false,\n            showModulDelete: false,\n            error: null,\n            loadingInProgress: false\n        };\n    }\n\n    //ruft die getModule Funktion in den Props auf\n    getModule = () => {\n      this.props.getModule();\n    }\n\n    //Wird aufgerufen, wenn das Dialog-Fenster Modulform geschlossen wird\n    modulFormClosed = (modul) => {\n      if (modul){\n        this.setState({\n          modul: modul,\n          showModulForm: false\n        });\n      }else {\n        this.setState({\n          showModulForm: false\n        });\n      }\n    }\n    \n    //Öffnet das Dialog-Fenster ModulForm, wenn der Button geklickt wurde\n    bearbeitenButtonClicked = event => {\n      event.stopPropagation();\n      this.setState({\n        showModulForm: true\n      });\n    }\n    \n    //Öffnet das Dialog-Fenster ModulDelete, wenn der Button geklickt wurde\n    modulDeleteButtonClicked =  event => {\n      event.stopPropagation();\n      this.setState({\n        showModulDelete: true\n      });\n    }\n    \n    //Wird aufgerufen, wenn das Dialog-Fenster ModulDelete geschlossen wird\n    modulDeleteClosed = () => {\n        this.setState({\n          showModulDelete: false\n        });\n        this.getModule();\n    }\n\n    /** Rendert die Komponente */\n    render(){\n        const {classes, modul} = this.props;\n        const { showModulForm, showModulDelete,  error, loadingInProgress } = this.state;\n\n        return(\n          <div>\n            <ListItem className={classes.root}>\n                  <Grid container  alignItems=\"center\" spacing={2}>\n                    <Grid item>\n                        <Typography >{modul.edv_nr}</Typography>\n                    </Grid>\n                    <Grid item>\n                        <Typography >{modul.name}</Typography>\n                    </Grid>\n                    <Grid item xs/>\n                    <Grid item>\n                    <Tooltip title='Bearbeiten' placement=\"bottom\">\n                      <IconButton  className={classes.bearbeitenButton} variant='contained' onClick={this.bearbeitenButtonClicked}>\n                          <EditIcon />\n                      </IconButton>\n                    </Tooltip>\n                    </Grid>\n                    <Grid item>\n                      <Tooltip title='Löschen' placement=\"bottom\">\n                          <IconButton variant=\"contained\"  onClick={this.modulDeleteButtonClicked}><DeleteIcon /></IconButton>\n                      </Tooltip>\n                    </Grid>\n                    </Grid>\n            </ListItem>\n            <ListItem>\n              <LoadingProgress show={loadingInProgress}/>\n              <ContextErrorMessage error={error} contextErrorMsg = {'Dieses Modul konnte nicht geladen werden'} onReload={this.getModule} />\n            </ListItem>\n            <Divider/>\n            <ModulForm show={showModulForm} modul={modul} onClose={this.modulFormClosed} getModule= {this.getModule}/>\n            <ModulDelete show={showModulDelete} modul={modul} onClose={this.modulDeleteClosed} getModule= {this.getModule} />       \n          </div>                        \n        );\n    }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n      root: {\n        width: '100%',\n        marginTop: '16px'\n      },\n    });\n\n/** PropTypes */\nModulListeEintrag.propTypes = {\n    /** @ignore */\n    classes: PropTypes.object.isRequired,\n    show: PropTypes.bool.isRequired\n  }\n  \n\n\nexport default withStyles(styles)(ModulListeEintrag);\n\n\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, IconButton, InputAdornment, TextField,  Paper , Grid} from '@material-ui/core';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { withRouter } from 'react-router-dom';\nimport { ElectivAPI } from '../api';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport List from '@material-ui/core/List';\n\nimport ModulListeEintrag from './ModulListeEintrag';\nimport ModulForm from './dialogs/ModulForm';\n\n\n/**\n * Es werden alle Module der Datenbank dargestellt\n * \n * @see See [ModulListeEintrag](#modullisteeintrag)\n * \n * Außerdem kann der Administrator neue Module anlegen\n * \n * @see See [ModulForm](#modulform)\n */\n\nclass ModulListe extends Component {\n\n  constructor(props) {\n    super(props);\n\n    //initiiere einen leeren state\n    this.state = {\n        module: [],\n        filteredModule: [],\n        modulFilter: '',\n        showModulForm: false,\n        showDeleteForm: false,\n        error: null,\n        loadingInProgress: false,\n    };\n  }\n\n  //Öffnet das Dialog-Fenster Modulfrom, wenn der Button geklickt wurde\n  addButtonClicked = event => {\n    event.stopPropagation();\n    this.setState({\n      showModulForm: true\n    });\n  }\n\n  //Such-Funktion, um nach bestimmten Module zu filtern\n  filterFieldValueChange= event => {\n    const value = event.target.value.toLowerCase();\n    this.setState({\n        filteredModule: this.state.module.filter(modul => {\n            let nameContainsValue = modul.getname().toLowerCase().includes(value);\n            let edv_nrContainsValue = modul.getEdv_nr().toString().includes(value);\n            return nameContainsValue || edv_nrContainsValue;\n        }),\n        modulFilter: value\n    });\n}\n\n//Funktion, um die Eingaben der Such-Funktion zu löschen\nclearFilterFieldButtonClicked = () => {\n    this.setState({\n        filteredModule: [...this.state.module],\n        modulFilter: ''\n    });\n}\n\n//Wird aufgerufen, wenn das Dialog-Fenster Modulform geschlossen wird\nmodulFormClosed = modul => {\n    this.getModule();\n    if (modul) {\n      const newModulList = [...this.state.module, modul];\n      this.setState({\n        module: newModulList,\n        filteredModule: [...newModulList],\n        showModulForm: false\n      });\n    } else {\n      this.setState({\n        showModulForm: false\n      });\n    }\n  }\n\n  // API Anbindung um alle Module vom Backend zu bekommen \n  getModule = () => {\n    ElectivAPI.getAPI().getModule()\n    .then(modulBOs =>\n        this.setState({\n            module: modulBOs,\n            filteredModule: [...modulBOs],\n            error: null,\n            loadingInProgress: false,\n        })).catch(e =>\n            this.setState({\n                module: [],\n                filteredModule: [],\n                error: e,\n                loadingInProgress: false,\n            }));\n    this.setState({\n        error: null,\n        loadingInProgress: true,\n    });\n}\n\n\n\n  // Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\n  componentDidMount() {\n      this.getModule();\n  }\n\n\n\n  /** Renders the component */\n  render() {\n    const { classes } = this.props;\n    const {  loadingInProgress, error, modulFilter, filteredModule, showModulForm} = this.state;\n\n    return (\n      <div className={classes.root}>\n        <Grid container spacing={2} alignItems=\"center\">\n            <Grid item >\n            <TextField\n                className={classes.filter}\n                type='text'\n                label='Module suchen'\n                value={modulFilter}\n                onChange={this.filterFieldValueChange}\n                InputProps={{\n                    endAdornment: <InputAdornment position='end'>\n                    <IconButton onClick={this.clearFilterFieldButtonClicked}>\n                        <ClearIcon fontSize=\"small\"/>\n                    </IconButton>\n                    </InputAdornment>,\n                }}\n            />\n            </Grid>\n            <Grid item xs/>\n            <Grid item>\n                <Tooltip title='Modul anlegen' placement=\"left\">\n                    <Fab size=\"medium\"  className={classes.addButton} color=\"primary\" aria-label=\"add\" onClick={this.addButtonClicked}>\n                        <AddIcon />\n                    </Fab>\n                </Tooltip>\n            </Grid>\n        </Grid>\n        <Paper>\n            <List className={classes.root} dense>\n                {\n                filteredModule.map(modul => \n                    <ModulListeEintrag key={modul.getID()} modul = {modul} show={this.props.show} getModule={this.getModule}/>)\n                }\n            </List>\n          <LoadingProgress show={loadingInProgress} />\n          <ContextErrorMessage error={error} contextErrorMsg={`Module konnten nicht geladen werden.`} onReload={this.getModule}/>\n        </Paper>\n        <ModulForm show={showModulForm} onClose={this.modulFormClosed} getModule= {this.getModule}/>\n      </div>\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n      width: '100%',\n      marginTop: theme.spacing(2),\n      paddingTop: '4px'\n  },\n  addButton: {\n      marginRight: theme.spacing(2)\n  },\n  filter: {\n      marginLeft: theme.spacing(2)\n  }\n});\n\n/** PropTypes */\nModulListe.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** @ignore */\n  location: PropTypes.object.isRequired,\n}\n\nexport default withRouter(withStyles(styles)(ModulListe));\n\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    withStyles, Button, IconButton, Dialog, DialogContent, DialogContentText,\n    DialogTitle, DialogActions, TextField\n} from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\n\nimport { ElectivAPI, SemesterBO } from '../../api';\n\n/**\n * Es wird ein Dialog mit einem Formular dargestellt, mit welchem man Semester erstellen / bearbeiten kann \n * \n * @see See Material-UIs [Dialog](https://material-ui.com/components/dialogs)\n * \n */\n\nclass SemesterForm extends Component {\n\n    constructor(props) {\n        super(props);\n\n        //gebe einen leeren status\n        this.state = {\n            name: '',\n            nameValidationFailed: false,\n            nameEdited: false,\n\n            addingError: null,\n            addingInProgress: false,\n\n            updatingError: null,\n            updatingInProgress: false\n        };\n        this.baseState = this.state;\n    }\n\n    // API Anbindung um das Semester über das Backend in die Datenbank einzufügen\n    addSemester = () => {\n        let newSemester = new SemesterBO()\n        newSemester.setID(0)\n        newSemester.setname(this.state.name)\n        ElectivAPI.getAPI().addSemester(newSemester).then(semester => {\n            this.props.getSemester()\n            this.setState(this.baseState);\n            this.props.onClose(semester); //Aufrufen parent in Backend\n        }).catch(e =>\n            this.setState({\n                addingInProgress: false,\n                addingError: e\n            })\n        );\n        // Ladeanimation einblenden\n        this.setState({\n            addingProgress: true,\n            addingError: null\n        });\n    }\n\n    // API Anbindung um das Semester über das Backend in der Datenbank upzudaten\n    updateSemester = () => {\n        let semester = this.props.semester;\n        semester.setname(this.state.name)\n        ElectivAPI.getAPI().updateSemester(semester).then(semester => {\n            this.props.getSemester()\n            this.setState(this.baseState);\n            this.props.onClose(semester); //Aufrufen parent in backend\n        }).catch(e =>\n            this.setState({\n                updatingInProgress: false,\n                updatingError: e\n            })\n        );\n        // Ladeanimation einblenden\n        this.setState({\n            updatingInProgress: true,\n            updatingError: null\n        });\n    }\n\n    // Validierung der Textfeldaenderungen um einheitlicher Format des Semesters zu speichern\n    textFieldValueChange = (event) => {\n        const value = event.target.value;\n        const re = /(^SS[0-9]{2}$)|(^WS[0-9]{2}\\/[0-9]{2}$)/;\n\n        let error = false;\n        if (value.trim().length === 0) {\n            error = true;\n        }\n        if (re.test(event.target.value) === false) {\n            error = true;\n        }\n\n        this.setState({\n            [event.target.id]: event.target.value,\n            [event.target.id + 'ValidationFailed']: error,\n            [event.target.id + 'Edited']: true\n        });\n    }\n\n    //Infos das zu bearbeutenden Semester laden\n    getInfos = () => {\n        if (this.props.semester) {\n            let name = this.props.semester.getname();\n            this.setState({\n                name: name,\n            })\n        }\n    }\n\n    //wird aufgerufen, wenn das Dialog geschlossen wird\n    handleClose = () => {\n        this.setState(this.baseState);\n        this.props.onClose(null);\n    }\n\n    /** Renders the component */\n    render() {\n        const { classes, show, semester } = this.props;\n        const {\n            name,\n            nameValidationFailed,\n            nameEdited,\n\n            addingInProgress,\n            addingError,\n            updatingInProgress,\n            updatingError, } = this.state;\n\n        let title = '';\n        let header = '';\n\n        if (semester) {\n            // Semester objekt true, somit ein edit\n            title = `Semester \"${semester.name}\" bearbeiten`;\n            header = 'Bitte Format SS** oder WS**/** verwenden';\n        } else {\n            title = 'Neues Semester erstellen';\n            header = 'Bitte Format SS** oder WS**/** verwenden';\n        }\n\n        return (\n            show ?\n                <Dialog open={show} onEnter={this.getInfos} onClose={this.handleClose} maxWidth='xs' fullWidth>\n                    <DialogTitle className={classes.dialogtitle}>{title}\n                        <IconButton className={classes.closeButton} onClick={this.handleClose}>\n                            <CloseIcon />\n                        </IconButton>\n                    </DialogTitle>\n                    <DialogContent>\n                        <DialogContentText>\n                            {header}\n                        </DialogContentText>\n\n                        <form className={classes.root} noValidate autoComplete='off'>\n\n                            <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='small' id='name' label='Semester' variant=\"outlined\" value={name}\n                                onChange={this.textFieldValueChange} error={nameValidationFailed} />\n\n                        </form>\n                        <LoadingProgress show={addingInProgress || updatingInProgress} />\n                        {\n                            // Show error message in dependency of semester prop\n                            semester ?\n                                <ContextErrorMessage error={updatingError} contextErrorMsg={`Semester ${semester.getID()} could not be updated.`} onReload={this.updateSemester} />\n                                :\n                                <ContextErrorMessage error={addingError} contextErrorMsg={`The Semester could not be added.`} onReload={this.addSemester} />\n                        }\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.handleClose} color='secondary'>\n                            Abbrechen\n                        </Button>\n                        {\n                            // If a Semester is given, show an speichern (update) button, else an hinzufügen button\n                            semester ?\n                                <Button disabled={nameValidationFailed} variant='contained' onClick={this.updateSemester} color='primary'>\n                                    Speichern\n                        </Button>\n                                :\n                                <Button disabled={nameValidationFailed || !nameEdited}\n                                    variant='contained' onClick={this.addSemester} color='primary'>\n                                    Hinzufügen\n                        </Button>\n                        }\n                    </DialogActions>\n                </Dialog>\n                : null\n        );\n    }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n    root: {\n        width: '100%',\n    },\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n    textfield: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1)\n    }\n});\n\n/** PropTypes */\nSemesterForm.propTypes = {\n    /** @ignore */\n    classes: PropTypes.object.isRequired,\n    /** If true, the form is rendered */\n    show: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired,\n}\n\nexport default withStyles(styles)(SemesterForm);","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions } from '@material-ui/core';\nimport { ElectivAPI } from '../../api';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Alert from '@material-ui/lab/Alert';\n\n/**\n * Es wird ein Dialog dargestellt, mit welchem man ein bestimmtes Semester löschen kann \n * \n * @see See Material-UIs [Dialog](https://material-ui.com/components/dialogs)\n * \n */\n\nclass SemesterDelete extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // Status initalisieren\n    this.state = {\n      semester: props.semester,\n      showSnackbar: false\n    };\n  }\n\n  closeSnackbar = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    this.setState({\n      showSnackbar: false\n    });\n  };\n\n  //wird aufgerufen, wenn das Dialog geschlossen wird\n  handleClose = () => {\n    this.props.onClose(null);\n  }\n\n  // API Anbindung um das Semester über das Backend aus der Datenbank löschen\n  deleteSemester = () => {\n    ElectivAPI.getAPI().deleteSemester(this.state.semester.id)\n      .then(() => {\n        this.props.getSemester();\n        this.props.onClose(null);\n      }).catch(e => {\n        this.setState({\n          showSnackbar: true\n        })\n      })\n  }\n\n  /** Renders the component */\n  render() {\n    const { show } = this.props;\n    const { semester, showSnackbar } = this.state;\n    return (\n      <div>\n        <Dialog\n          open={show}\n          onClose={this.handleClose}\n          maxWidth='xs'\n        >\n          <DialogTitle>{\"Sind Sie sich sicher?\"}</DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              Wenn Sie das Semester <b>\"{semester.name}\"</b> löschen möchten, klicken Sie auf \"JA\".\n                  </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose} color=\"primary\">\n              Abbrechen\n                  </Button>\n            <Button onClick={this.deleteSemester} color=\"primary\" autoFocus>\n              Ja\n                  </Button>\n          </DialogActions>\n        </Dialog>\n        <Snackbar open={showSnackbar} autoHideDuration={6000} onClose={this.closeSnackbar}>\n          <Alert onClose={this.closeSnackbar} severity=\"error\">\n            Dieses Semester kann nicht gelöscht werden\n                </Alert>\n        </Snackbar>\n      </div>\n    );\n  }\n\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  },\n})\n\n/** PropTypes */\nSemesterDelete.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  show: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n}\n\nexport default withStyles(styles)(SemesterDelete);","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles} from '@material-ui/core/styles';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport ListItem from '@material-ui/core/ListItem';\nimport {Typography, IconButton, Grid, Tooltip} from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport Divider from '@material-ui/core/Divider';\n\nimport SemesterForm from './dialogs/SemesterForm';\nimport SemesterDelete from './dialogs/SemesterDelete';\n\n\n/**\n * Es wird ein einzelnes Semester angezeigt\n * \n * @see See [SemesterForm](#semesterform)\n * @see See [SemesterDelete](#semesterdelete)\n * \n * Außerdem lassen sich Semestereinträge löschen und bearbeiten\n * \n */\n\nclass SemesterListeEintrag extends Component {\n\n    constructor(props){\n        super(props);\n\n        //gebe einen leeren status\n        this.state = {\n            showSemesterForm: false,\n            showSemesterDelete: false,\n            error: null,\n            loadingInProgress: false\n        };\n    }\n\n    // API Anbindung um Semester vom Backend zu bekommen \n    getSemester = () => {\n      this.props.getSemester();\n    }\n\n    // wird aufgerufen, wenn Dialog Fenster geschloßen werden soll\n    semesterFormClosed = (semester) => {\n      if (semester){\n        this.setState({\n          semester: semester,\n          showSemesterForm: false\n        });\n      }else {\n        this.setState({\n          showSemesterForm: false\n        });\n      }\n    }\n  \n    // wird aufgerufen, wenn ein Semester bearbeitet werden soll\n    bearbeitenButtonClicked = event => {\n      event.stopPropagation();\n      this.setState({\n        showSemesterForm: true\n      });\n    }\n    \n    // wird aufgerufen, wenn ein Semester gelöscht werden soll\n    semesterDeleteButtonClicked =  event => {\n      event.stopPropagation();\n      this.setState({\n        showSemesterDelete: true\n      });\n    }\n  \n    // wird aufgerufen, wenn DELETE Dialog Fenster geschloßen werden soll\n    semesterDeleteClosed = () => {\n        this.setState({\n          showSemesterDelete: false\n        });\n        this.getSemester();\n    }\n\n    /** Renders the component */\n    render(){\n        const {classes, semester} = this.props;\n        const { showSemesterForm, showSemesterDelete,  error, loadingInProgress } = this.state;\n\n        return(\n          <div>\n            <ListItem className={classes.root}>\n                  <Grid container  alignItems=\"center\" spacing={2}>\n                    <Grid item>\n                        <Typography >{semester.name}</Typography>\n                    </Grid>\n                    <Grid item xs/>\n                    <Grid item>\n                    <Tooltip title='Bearbeiten' placement=\"bottom\">\n                      <IconButton  className={classes.bearbeitenButton} variant='contained' onClick={this.bearbeitenButtonClicked}>\n                          <EditIcon />\n                      </IconButton>\n                    </Tooltip>\n                    </Grid>\n                    <Grid item>\n                      <Tooltip title='Löschen' placement=\"bottom\">\n                          <IconButton variant=\"contained\"  onClick={this.semesterDeleteButtonClicked}><DeleteIcon /></IconButton>\n                      </Tooltip>\n                    </Grid>\n                  </Grid>\n            </ListItem>\n            <ListItem>\n              <LoadingProgress show={loadingInProgress}/>\n              <ContextErrorMessage error={error} contextErrorMsg = {'Dieses Semester konnte nicht geladen werden'} onReload={this.getSemester} />\n            </ListItem>\n            <Divider/>\n            <SemesterForm show={showSemesterForm} semester={semester} onClose={this.semesterFormClosed} getSemester= {this.getSemester}/>\n            <SemesterDelete show={showSemesterDelete} semester={semester} onClose={this.semesterDeleteClosed} getSemester= {this.getSemester}/>       \n          </div>                        \n        );\n    }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n      root: {\n        width: '100%',\n        marginTop: '16px'\n      },\n    });\n\n/** PropTypes */\nSemesterListeEintrag.propTypes = {\n    /** @ignore */\n    classes: PropTypes.object.isRequired,\n    show: PropTypes.bool.isRequired\n  }\n  \n\nexport default withStyles(styles)(SemesterListeEintrag);\n\n\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, IconButton, InputAdornment, TextField,  Paper , Grid} from '@material-ui/core';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { withRouter } from 'react-router-dom';\nimport { ElectivAPI } from '../api';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport List from '@material-ui/core/List';\n\nimport SemesterListeEintrag from './SemesterListeEintrag';\nimport SemesterForm from './dialogs/SemesterForm';\n\n\n/**\n * Es werden alle Semester angezeit, die man bearbeiten, löschen oder neu hinzufügen kann\n * \n * @see See [SemesterListeEintrag](#semesterlisteeintrag)\n * @see See [SemesterForm](#semesterform)\n * \n * Die Seite ist nur für Admin sichtbar. Er kann die Semester löschen oder mit Hilfe von einem Dialog-Fenster bearbeiten\n * Mit Hilfe von einem Dialog-Fenster kann er neue Semester anlegen\n * \n */\n\nclass SemesterListe extends Component {\n\n  constructor(props) {\n    super(props);\n\n    //gebe einen leeren status\n    this.state = {\n        semester: [],\n        filteredSemester: [],\n        semesterFilter: '',\n        showSemesterForm: false,\n        showDeleteForm: false,\n        error: null,\n        loadingInProgress: false,\n    };\n  }\n\n  //Button um neue Semester anlegen. Damit öffnet sich das Dialog Fenster\n  addButtonClicked = event => {\n    event.stopPropagation();\n    this.setState({\n      showSemesterForm: true\n    });\n  }\n\n  //Suche-Funktion zum Suchen von Semester\n  filterFieldValueChange= event => {\n    const value = event.target.value.toLowerCase();\n    this.setState({\n        filteredSemester: this.state.semester.filter(semester => {\n            let nameContainsValue = semester.getname().toLowerCase().includes(value);\n            return nameContainsValue;\n        }),\n        semesterFilter: value\n    });\n}\n\n//Suche leeren\nclearFilterFieldButtonClicked = () => {\n    this.setState({\n        filteredSemester: [...this.state.semester],\n        semesterFilter: ''\n    });\n}\n\n//wird aufgerufen, wenn Dialog Fenster geschloßen wird\nsemesterFormClosed = semester => {\n    if (semester) {\n      const newSemesterList = [...this.state.semester, semester];\n      this.setState({\n        semester: newSemesterList,\n        filteredSemester: [...newSemesterList],\n        showSemesterForm: false\n      });\n    } else {\n      this.setState({\n        showSemesterForm: false\n      });\n    }\n  }\n\n  // API Anbindung um alle Module vom Backend zu bekommen \n  getSemester = () => {\n    ElectivAPI.getAPI().getSemester()\n    .then(semesterBOs =>\n        this.setState({\n            semester: semesterBOs,\n            filteredSemester: [...semesterBOs],\n            error: null,\n            loadingInProgress: false,\n        })).catch(e =>\n            this.setState({\n                semester: [],\n                filteredSemester: [],\n                error: e,\n                loadingInProgress: false,\n            }));\n    this.setState({\n        error: null,\n        loadingInProgress: true,\n    });\n}\n\n\n  // Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\n  componentDidMount() {\n      this.getSemester();\n  }\n  \n\n  /** Renders the component */\n  render() {\n    const { classes } = this.props;\n    const {  loadingInProgress, error, semesterFilter, filteredSemester, showSemesterForm} = this.state;\n\n    return (\n      <div className={classes.root}>\n        <Grid container spacing={2} alignItems=\"center\">\n            <Grid item >\n            <TextField\n                className={classes.filter}\n                type='text'\n                label='Semester suchen'\n                value={semesterFilter}\n                onChange={this.filterFieldValueChange}\n                InputProps={{\n                    endAdornment: <InputAdornment position='end'>\n                    <IconButton onClick={this.clearFilterFieldButtonClicked}>\n                        <ClearIcon fontSize=\"small\"/>\n                    </IconButton>\n                    </InputAdornment>,\n                }}\n            />\n            </Grid>\n            <Grid item xs/>\n            <Grid item>\n                <Tooltip title='Semester anlegen' placement=\"left\">\n                    <Fab size=\"medium\"  className={classes.addButton} color=\"primary\" aria-label=\"add\" onClick={this.addButtonClicked}>\n                        <AddIcon />\n                    </Fab>\n                </Tooltip>\n            </Grid>\n        </Grid>\n        <Paper>\n            <List className={classes.root} dense>\n                {\n                filteredSemester.map(semester => \n                    <SemesterListeEintrag key={semester.getID()} semester = {semester} show={this.props.show} getSemester={this.getSemester}/>)\n                }\n            </List>\n          <LoadingProgress show={loadingInProgress} />\n          <ContextErrorMessage error={error} contextErrorMsg={`Semester konnten nicht geladen werden.`} onReload={this.getSemester} />\n        </Paper>\n        <SemesterForm show={showSemesterForm} onClose={this.semesterFormClosed} getSemester= {this.getSemester}/>\n      </div>\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n      width: '100%',\n      marginTop: theme.spacing(2),\n      paddingTop: '4px'\n  },\n  addButton: {\n      marginRight: theme.spacing(2)\n  },\n  filter: {\n      marginLeft: theme.spacing(2)\n  }\n});\n\n/** PropTypes */\nSemesterListe.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** @ignore */\n  location: PropTypes.object.isRequired,\n}\n\nexport default withRouter(withStyles(styles)(SemesterListe));\n\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    withStyles, Button, IconButton, Dialog, DialogContent, DialogContentText,\n    DialogTitle, DialogActions, TextField\n} from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\n\nimport { ElectivAPI, ProjektartBO } from '../../api';\n\n\nclass ProjektartenForm extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: '',\n            nameValidationFailed: false,\n            nameEdited: false,\n\n            ects: null,\n            ectsValidationFailed: false,\n            ectsEdited: false,\n\n            sws: null,\n            swsValidationFailed: false,\n            swsEdited: false,\n\n            addingError: null,\n            addingInProgress: false,\n\n            updatingError: null,\n            updatingInProgress: false\n        };\n        this.baseState = this.state;\n    }\n\n    addProjektart = () => {\n        let newProjektart = new ProjektartBO()\n        newProjektart.setID(0)\n        newProjektart.setname(this.state.name)\n        newProjektart.set_ects(this.state.ects)\n        newProjektart.set_sws(this.state.sws)\n        ElectivAPI.getAPI().addProjektart(newProjektart).then(projektart => {\n            this.props.getProjektart()\n            this.setState(this.baseState);\n            this.props.onClose(projektart); //Aufrufen parent in backend\n        }).catch(e =>\n            this.setState({\n                addingInProgress: false,\n                addingError: e\n            })\n        );\n        // Ladeanimation einblenden\n        this.setState({\n            addingProgress: true,\n            addingError: null\n        });\n    }\n\n    updateProjektart = () => {\n        let projektart = this.props.projektart;\n        projektart.setname(this.state.name)\n        projektart.set_ects(this.state.ects)\n        projektart.set_sws(this.state.sws)\n        ElectivAPI.getAPI().updateProjektart(projektart).then(projektart => {\n            this.props.getProjektart()\n            this.setState(this.baseState);\n            this.props.onClose(projektart); //Aufrufen parent in backend\n        }).catch(e =>\n            this.setState({\n                updatingInProgress: false,\n                updatingError: e\n            })\n        );\n        // Ladeanimation einblenden\n        this.setState({\n            updatingInProgress: true,\n            updatingError: null\n        });\n    }\n\n    // Validierung der Textfeldaenderungen \n    textFieldValueChange = (event) => {\n        const value = event.target.value;\n\n        let error = false;\n        if (value.trim().length === 0) {\n            error = true;\n        }\n        this.setState({\n            [event.target.id]: event.target.value,\n            [event.target.id + 'ValidationFailed']: error,\n            [event.target.id + 'Edited']: true\n        });\n    }\n\n    numberValueChange = (event) => {\n        const value = event.target.value;\n        const re = /^[0-9]{1,10}$/;\n\n        let error = false;\n        if (value.trim().length === 0) {\n            error = true;\n        }\n        if (re.test(event.target.value) === false) {\n            error = true;\n        }\n\n        this.setState({\n            [event.target.id]: event.target.value,\n            [event.target.id + 'ValidationFailed']: error,\n            [event.target.id + 'Edited']: true\n        });\n    }\n\n    getInfos = () => {\n        if (this.props.projektart) {\n            let name = this.props.projektart.getname();\n            let ects = this.props.projektart.get_ects();\n            let sws = this.props.projektart.get_sws();\n            this.setState({\n                name: name,\n                ects: ects,\n                sws: sws,\n            })\n        }\n    }\n\n\n    handleClose = () => {\n        this.setState(this.baseState);\n        this.props.onClose(null);\n    }\n\n\n\n    render() {\n        const { classes, show, projektart } = this.props;\n        const {\n            name,\n            nameValidationFailed,\n            nameEdited,\n\n            ects,\n            ectsValidationFailed,\n            ectsEdited,\n\n            sws,\n            swsValidationFailed,\n            swsEdited,\n\n            addingInProgress,\n            addingError,\n            updatingInProgress,\n            updatingError, } = this.state;\n\n        let title = '';\n        let header = '';\n\n        if (projektart) {\n            // Projekt objekt true, somit ein edit\n            title = `Projektart \"${projektart.name}\" bearbeiten`;\n            header = 'Neue Projektart Daten einfügen';\n        } else {\n            title = 'Erstelle eine neue Projektart';\n            header = 'Projektart Daten einfügen';\n        }\n\n\n        return (\n            show ?\n                <Dialog open={show} onEnter={this.getInfos} onClose={this.handleClose} maxWidth='xs' fullWidth>\n                    <DialogTitle className={classes.dialogtitle}>{title}\n                        <IconButton className={classes.closeButton} onClick={this.handleClose}>\n                            <CloseIcon />\n                        </IconButton>\n                    </DialogTitle>\n                    <DialogContent>\n                        <DialogContentText>\n                            {header}\n                        </DialogContentText>\n\n                        <form className={classes.root} noValidate autoComplete='off'>\n\n                            <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='small' id='name' label='Projektartname' variant=\"outlined\" value={name}\n                                onChange={this.textFieldValueChange} error={nameValidationFailed} />\n\n                            <TextField className={classes.textfield} type='text' required fullWidth margin='small' id='ects' label='ECTS' variant=\"outlined\" value={ects}\n                                onChange={this.numberValueChange} error={ectsValidationFailed} />\n\n                            <TextField className={classes.textfield} type='text' required fullWidth margin='small' id='sws' label='SWS' variant=\"outlined\" value={sws}\n                                onChange={this.numberValueChange} error={swsValidationFailed} />\n\n                        </form>\n                        <LoadingProgress show={addingInProgress || updatingInProgress} />\n                        {\n                            // Show error message in dependency of Projektart prop\n                            projektart ?\n                                <ContextErrorMessage error={updatingError} contextErrorMsg={`The Projektart ${projektart.getID()} could not be updated.`} onReload={this.updateProjektart} />\n                                :\n                                <ContextErrorMessage error={addingError} contextErrorMsg={`The Projektart could not be added.`} onReload={this.addProjektart} />\n                        }\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.handleClose} color='secondary'>\n                            Abbrechen\n                        </Button>\n                        {\n                            // If a Projekt is given, show an update button, else an add button\n                            projektart ?\n                                <Button disabled={nameValidationFailed || ectsValidationFailed || swsValidationFailed} variant='contained' onClick={this.updateProjektart} color='primary'>\n                                    Speichern\n                        </Button>\n                                :\n                                <Button disabled={nameValidationFailed || !nameEdited || ectsValidationFailed || !ectsEdited || swsValidationFailed || !swsEdited}\n                                    variant='contained' onClick={this.addProjektart} color='primary'>\n                                    Hinzufügen\n                        </Button>\n                        }\n                    </DialogActions>\n                </Dialog>\n                : null\n        );\n    }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n    root: {\n        width: '100%',\n    },\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n    textfield: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1)\n    }\n});\n\n/** PropTypes */\nProjektartenForm.propTypes = {\n    /** @ignore */\n    classes: PropTypes.object.isRequired,\n    /** If true, the form is rendered */\n    show: PropTypes.bool.isRequired,\n    /**  \n     * Handler function which is called, when the dialog is closed.\n     * Sends the edited or created projektBO's as parameter or null, if cancel was pressed.\n     *  \n     * Signature: onClose(ProjektBO's projekt);\n     */\n    onClose: PropTypes.func.isRequired,\n}\n\nexport default withStyles(styles)(ProjektartenForm);","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions } from '@material-ui/core';\nimport { ElectivAPI } from '../../api';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Alert from '@material-ui/lab/Alert';\n\n\nclass ProjektartDelete extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // Status initalisieren\n    this.state = {\n      projektart: props.projektart,\n      showSnackbar: false,\n    };\n  }\n\n  closeSnackbar = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    this.setState({\n      showSnackbar: false\n    });\n  };\n\n\n  handleClose = () => {\n    this.props.onClose(null);\n  }\n\n  deleteProjektart = () => {\n    ElectivAPI.getAPI().deleteProjektart(this.state.projektart.id)\n      .then(() => {\n        this.props.getProjektart();\n        this.props.onClose(null);\n      }).catch(e => {\n        this.setState({\n          showSnackbar: true\n        })\n      })\n  }\n\n  render() {\n\n    const { show } = this.props;\n    const { projektart, showSnackbar } = this.state;\n    return (\n      <div>\n        <Dialog\n          open={show}\n          onClose={this.handleClose}\n          maxWidth='xs'\n        >\n          <DialogTitle>{\"Sind Sie sich sicher?\"}</DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              Wenn Sie die Projektart <b>\"{projektart.name}\"</b> löschen möchten, drücken Sie auf \"JA\".\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose} color=\"primary\">\n              Abbrechen\n                  </Button>\n            <Button onClick={this.deleteProjektart} color=\"primary\" autoFocus>\n              Ja\n                  </Button>\n          </DialogActions>\n        </Dialog>\n        <Snackbar open={showSnackbar} autoHideDuration={6000} onClose={this.closeSnackbar}>\n          <Alert onClose={this.closeSnackbar} severity=\"error\">\n            Diese Projektart kann nicht gelöscht werden\n                </Alert>\n        </Snackbar>\n      </div>\n    );\n  }\n\n}\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  },\n})\n\n/** PropTypes */\nProjektartDelete.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** The ProjektBO's to be edited */\n  projekt: PropTypes.object,\n  /** If true, the form is rendered */\n  show: PropTypes.bool.isRequired,\n  /**  \n   * Handler function which is called, when the dialog is closed.\n   * Sends the edited or created projektBO's as parameter or null, if cancel was pressed.\n   *  \n   * Signature: onClose(ProjektBO's projekt);\n   */\n  onClose: PropTypes.func.isRequired,\n}\n\nexport default withStyles(styles)(ProjektartDelete);","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\n\nimport ListItem from '@material-ui/core/ListItem';\nimport { Typography, IconButton, Grid, Tooltip } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport Divider from '@material-ui/core/Divider';\n\n\nimport ProjektartenForm from './dialogs/ProjektartenForm';\nimport ProjektartDelete from './dialogs/ProjektartDelete';\n\n/**\n * Es wird ein einzelnes Projektarten mit allen notwendigen Informationen angezeigt\n * Außerdem lassen sich Projektarteneinträge löschen und bearbeiten\n * \n * @see See [ProjektartDelete](#projektartdelte)\n * @see See [ProjektartForm](#projektartform)\n */\n\n\n\n\nclass ProjektartListeEintrag extends Component {\n\n    constructor(props){\n        super(props);\n\n        //initiiere einen leeren state\n        this.state = {\n            showProjektartForm: false,\n            showProjektartDelete: false,\n            error: null,\n            loadingInProgress: false\n        };\n    }\n\n    //ruft die getModule Funktion in den Props auf\n    getProjektart = () => {\n      this.props.getProjektart();\n    }\n\n    //Wird aufgerufen, wenn das Dialog-Fenster Projektartform geschlossen wird\n    projektartFormClosed = (projektart) => {\n      if (projektart){\n        this.setState({\n          projektart: projektart,\n          showProjektartForm: false\n        });\n      }else {\n        this.setState({\n          showProjektartForm: false\n        });\n      }\n    }\n  \n    //Öffnet das Dialog-Fenster ProjekartForm, wenn der Button geklickt wurde\n    bearbeitenButtonClicked = event => {\n      event.stopPropagation();\n      this.setState({\n        showProjektartForm: true\n      });\n    }\n    \n     //Öffnet das Dialog-Fenster ProjektartDelete, wenn der Button geklickt wurde\n    projektartDeleteButtonClicked =  event => {\n      event.stopPropagation();\n      this.setState({\n        showProjektartDelete: true\n      });\n    }\n  \n    //Wird aufgerufen, wenn das Dialog-Fenster ProjektartDelete geschlossen wird\n    projektartDeleteClosed = () => {\n        this.setState({\n          showProjektartDelete: false\n        });\n        this.getProjektart();\n    }\n\n    /** Rendert die Komponente */\n    render(){\n        const {classes, projektart} = this.props;\n        const { showProjektartForm, showProjektartDelete,  error, loadingInProgress } = this.state;\n\n        return(\n          <div>\n            <ListItem className={classes.root}>\n                  <Grid container  alignItems=\"center\" spacing={2}>\n                    <Grid item xs={4}>\n                        <Typography >{projektart.name}</Typography>\n                    </Grid>\n                    <Grid item xs={2}>\n                        <Typography >ECTS: {projektart.ects}</Typography>\n                    </Grid>\n                    <Grid item xs={2}>\n                        <Typography >SWS: {projektart.sws}</Typography>\n                    </Grid>\n                    <Grid item xs/>\n                    <Grid item>\n                    <Tooltip title='Bearbeiten' placement=\"bottom\">\n                      <IconButton  className={classes.bearbeitenButton} variant='contained' onClick={this.bearbeitenButtonClicked}>\n                          <EditIcon />\n                      </IconButton>\n                    </Tooltip>\n                    </Grid>\n                    <Grid item>\n                      <Tooltip title='Löschen' placement=\"bottom\">\n                          <IconButton className={classes.projektDeleteButton}  variant=\"contained\"  onClick={this.projektartDeleteButtonClicked}><DeleteIcon /></IconButton>\n                      </Tooltip>\n                    </Grid>\n                    </Grid>\n            </ListItem>\n            <ListItem>\n              <LoadingProgress show={loadingInProgress}/>\n              <ContextErrorMessage error={error} contextErrorMsg = {'Diese Projektart konnte nicht geladen werden'} onReload={this.getProjektart} />\n            </ListItem>\n            <Divider/>\n            <ProjektartenForm show={showProjektartForm} projektart={projektart} onClose={this.projektartFormClosed} getProjektart= {this.getProjektart}/>\n            <ProjektartDelete show={showProjektartDelete} projektart={projektart} onClose={this.projektartDeleteClosed} getProjektart= {this.getProjektart}/>       \n          </div>                        \n        );\n    }\n}\nconst styles = theme => ({\n      root: {\n        width: '100%',\n        marginTop: '16px'\n      },\n    });\n\n/** PropTypes */\nProjektartListeEintrag.propTypes = {\n    /** @ignore */\n    classes: PropTypes.object.isRequired,\n    show: PropTypes.bool.isRequired\n  }\n  \n\n\nexport default withStyles(styles)(ProjektartListeEintrag);\n\n\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, IconButton, InputAdornment, TextField,  Paper , Grid} from '@material-ui/core';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { withRouter } from 'react-router-dom';\nimport { ElectivAPI } from '../api';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport List from '@material-ui/core/List';\n\n// import ModulListeEintrag from './ModulListeEintrag';\nimport ProjektartenForm from './dialogs/ProjektartenForm';\n\nimport ProjektartListeEintrag from './ProjektartListeEintrag';\n\n\n\n\nclass ProjektartListe extends Component {\n\n  constructor(props) {\n    super(props);\n\n    //gebe einen leeren status\n    this.state = {\n        projektarten: [],\n        filteredProjektarten: [],\n        projektartFilter: '',\n        showProjektartenForm: false,\n        showDeleteForm: false,\n        error: null,\n        loadingInProgress: false,\n    };\n  }\n\n  // Add Button - Oeffnet den Projektarten hinzufuegen Dialog\n  addButtonClicked = event => {\n    event.stopPropagation();\n    this.setState({\n      showProjektartenForm: true\n    });\n  }\n\n  //Suche-Funktion zum Suchen von Projektarten\n  filterFieldValueChange= event => {\n    const value = event.target.value.toLowerCase();\n    this.setState({\n        filteredProjektarten: this.state.projektarten.filter(projektart => {\n            let nameContainsValue = projektart.getname().toLowerCase().includes(value);\n            return nameContainsValue;\n        }),\n        projektartFilter: value\n    });\n}\n\n//Suche leeren\nclearFilterFieldButtonClicked = () => {\n    this.setState({\n        filteredProjektarten: [...this.state.projektarten],\n        projektartFilter: ''\n    });\n}\n\n//wird aufgerufen, wenn Dialog Fenster geschloßen wird\nprojektartFormClosed = projektart => {\n    this.getProjektart();\n    if (projektart) {\n      const newProjektartList = [...this.state.projektarten, projektart];\n      this.setState({\n        projektarten: newProjektartList,\n        filteredProjektarten: [...newProjektartList],\n        showProjektartenForm: false\n      });\n    } else {\n      this.setState({\n        showProjektartenForm: false\n      });\n    }\n  }\n\n  // API Anbindung um alle Projektarten vom Backend zu bekommen \n  getProjektart = () => {\n    ElectivAPI.getAPI().getProjektart()\n    .then(projektartBOs =>\n        this.setState({\n            projektarten: projektartBOs,\n            filteredProjektarten: [...projektartBOs],\n            error: null,\n            loadingInProgress: false,\n        })).catch(e =>\n            this.setState({\n                projektarten: [],\n                filteredProjektarten: [],\n                error: e,\n                loadingInProgress: false,\n            }));\n    this.setState({\n        error: null,\n        loadingInProgress: true,\n    });\n}\n\n\n\n  // Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\n  componentDidMount() {\n      this.getProjektart();\n  }\n\n\n\n  /** Renders the component */\n  render() {\n    const { classes } = this.props;\n    const {  loadingInProgress, error, projektartFilter, filteredProjektarten, showProjektartenForm} = this.state;\n\n    return (\n      <div className={classes.root}>\n        <Grid container spacing={2} alignItems=\"center\">\n            <Grid item >\n            <TextField\n                className={classes.filter}\n                type='text'\n                label='Projektart suchen'\n                value={projektartFilter}\n                onChange={this.filterFieldValueChange}\n                InputProps={{\n                    endAdornment: <InputAdornment position='end'>\n                    <IconButton onClick={this.clearFilterFieldButtonClicked}>\n                        <ClearIcon fontSize=\"small\"/>\n                    </IconButton>\n                    </InputAdornment>,\n                }}\n            />\n            </Grid>\n            <Grid item xs/>\n            <Grid item>\n                <Tooltip title='Projektart anlegen' placement=\"left\">\n                    <Fab size=\"medium\"  className={classes.addButton} color=\"primary\" aria-label=\"add\" onClick={this.addButtonClicked}>\n                        <AddIcon />\n                    </Fab>\n                </Tooltip>\n            </Grid>\n        </Grid>\n        <Paper>\n            <List className={classes.root} dense>\n                {\n                filteredProjektarten.map(projektart => \n                    <ProjektartListeEintrag key={projektart.getID()} projektart = {projektart} show={this.props.show} getProjektart={this.getProjektart}/>)\n                }\n            </List>\n          <LoadingProgress show={loadingInProgress} />\n          <ContextErrorMessage error={error} contextErrorMsg={`Projektartliste konnte nicht geladen werden.`} onReload={this.getProjektart} />\n        </Paper>\n        <ProjektartenForm show={showProjektartenForm} onClose={this.projektartFormClosed} getProjektart = {this.getProjektart}/>\n      </div>\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n      width: '100%',\n      marginTop: theme.spacing(2),\n      paddingTop: '4px'\n  },\n  addButton: {\n      marginRight: theme.spacing(2)\n  },\n  filter: {\n      marginLeft: theme.spacing(2)\n  }\n});\n\n/** PropTypes */\nProjektartListe.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** @ignore */\n  location: PropTypes.object.isRequired,\n}\n\nexport default withRouter(withStyles(styles)(ProjektartListe));\n\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    withStyles, Button, IconButton, Dialog, DialogContent, DialogContentText,\n    DialogTitle, DialogActions, TextField\n} from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\n\nimport { ElectivAPI } from '../../api';\n\n\n/**\n * Es wird ein Dialog mit einem Formular dargestellt, mit welchem man Studenten bearbeiten kann\n *\n * @see See Matieral-UIs [Dialog] (https://material-ui.com/components/dialogs)\n *\n */\nclass StudentForm extends Component {\n\n    constructor(props) {\n        super(props);\n\n        //initiiere einen leeren state\n        this.state = {\n            name: '',\n            nameValidationFailed: false,\n            nameEdited: false,\n\n            mat_nr: null,\n            mat_nrValidationFailed: false,\n            mat_nrEdited: false,\n\n            addingError: null,\n            addingInProgress: false,\n\n            updatingError: null,\n            updatingInProgress: false\n        };\n        this.baseState = this.state;\n    }\n\n    // API Anbindung um den Studenten upzudaten\n    updateUser = () => {\n        let user = this.props.user;\n        user.name = this.state.name\n        user.mat_nr = this.state.mat_nr\n        ElectivAPI.getAPI().updateStudent(user.id, this.state.name, this.state.mat_nr).then(user => {\n\n            this.setState(this.baseState);\n            this.props.onClose(user); //Aufrufen parent in backend\n        }).catch(e =>\n            this.setState({\n                updatingInProgress: false,\n                updatingError: e\n            })\n        );\n        // Ladeanimation einblenden\n        this.setState({\n            updatingInProgress: true,\n            updatingError: null\n        });\n    }\n\n    // Validierung der Textfeldaenderungen\n    textFieldValueChange = (event) => {\n        const value = event.target.value;\n\n        let error = false;\n        if (value.trim().length === 0) {\n            error = true;\n        }\n        this.setStateValueChange(event, error);\n    }\n\n    //Setzen der Werte aus der Validierung\n    setStateValueChange(event, error) {\n        this.setState({\n            [event.target.id]: event.target.value,\n            [event.target.id + 'ValidationFailed']: error,\n            [event.target.id + 'Edited']: true\n        });\n    }\n\n    // Validierung der Textfeldaenderungen nur numerische Werte\n    numberValueChange = (event) => {\n        const value = event.target.value;\n        const re = /^[0-9]{1,10}$/;\n\n        let error = false;\n        if (value.trim().length === 0) {\n            error = true;\n        }\n        if (re.test(event.target.value) === false) {\n            error = true;\n        }\n        this.setStateValueChange(event, error);\n    }\n\n    //Infos des zu bearbeitenden Studenten laden\n    getInfos = () => {\n        if (this.props.user) {\n            let name = this.props.user.name;\n            let mat_nr = this.props.user.mat_nr;\n            this.setState({\n                name: name,\n                mat_nr: mat_nr,\n            })\n        }\n    }\n\n\n    //Setzen des Status, bei schließen des Dialogs\n    handleClose = () => {\n        this.setState(this.baseState);\n        this.props.onClose(null);\n    }\n\n    /** Rendert die Komponente */\n    render() {\n        const { classes, show, user } = this.props;\n        const {\n            name,\n            nameValidationFailed,\n            mat_nr,\n            mat_nrValidationFailed,\n            addingInProgress,\n            updatingInProgress,\n            updatingError,\n        } = this.state;\n\n        let title = `User \"${user.name}\" bearbeiten`\n        let header = 'Neue Userdaten einfügen';\n\n        return (\n            show ?\n                <Dialog open={show} onEnter={this.getInfos} onClose={this.handleClose} maxWidth='xs' fullWidth>\n                    <DialogTitle className={classes.dialogtitle}>{title}\n                        <IconButton className={classes.closeButton} onClick={this.handleClose}>\n                            <CloseIcon />\n                        </IconButton>\n                    </DialogTitle>\n                    <DialogContent>\n                        <DialogContentText>\n                            {header}\n                        </DialogContentText>\n\n                        <form className={classes.root} noValidate autoComplete='off'>\n\n                            <TextField className={classes.textfield} autoFocus type='text' required fullWidth\n                                margin='small' id='name' label='Name' variant=\"outlined\" value={name}\n                                onChange={this.textFieldValueChange} error={nameValidationFailed} />\n\n                            <TextField className={classes.textfield} type='text' required fullWidth margin='small'\n                                id='mat_nr' label='Matrikelnummer' variant=\"outlined\" value={mat_nr}\n                                onChange={this.numberValueChange} error={mat_nrValidationFailed} />\n                        </form>\n                        <LoadingProgress show={addingInProgress || updatingInProgress} />\n                        {\n\n                            <ContextErrorMessage error={updatingError}\n                                contextErrorMsg={`The User ${user.getID()} could not be updated.`}\n                                onReload={this.updateUser} />\n\n                        }\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.handleClose} color='secondary'>\n                            Abbrechen\n                        </Button>\n                        {\n                            // If a Projekt is given, show an update button, else an add button\n                            <Button disabled={nameValidationFailed || mat_nrValidationFailed} variant='contained'\n                                onClick={this.updateUser} color='primary'>\n                                Speichern\n                            </Button>\n\n                        }\n                    </DialogActions>\n                </Dialog>\n                : null\n        );\n    }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n    root: {\n        width: '100%',\n    },\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n    textfield: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1)\n    }\n});\n\n/** PropTypes */\nStudentForm.propTypes = {\n    /** @ignore */\n    classes: PropTypes.object.isRequired,\n    /** If true, the form is rendered */\n    show: PropTypes.bool.isRequired,\n    /**\n     * Handler function which is called, when the dialog is closed.\n     * Sends the edited or created projektBO's as parameter or null, if cancel was pressed.\n     *\n     * Signature: onClose(ProjektBO's projekt);\n     */\n    onClose: PropTypes.func.isRequired,\n}\n\nexport default withStyles(styles)(StudentForm);","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {withStyles} from '@material-ui/core/styles';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\n\nimport ListItem from '@material-ui/core/ListItem';\nimport {Typography, IconButton, Grid, Tooltip} from '@material-ui/core';\n\nimport EditIcon from '@material-ui/icons/Edit';\nimport Divider from '@material-ui/core/Divider';\n\n\nimport UserForm from './dialogs/StudentForm';\n\n\nclass StudentListeEintrag extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showUserForm: false,\n            error: null,\n            loadingInProgress: false\n        };\n    }\n\n    getUser = () => {\n        this.props.getUser();\n    }\n\n\n    bearbeitenButtonClicked = event => {\n        event.stopPropagation();\n        this.setState({\n            showUserForm: true\n        });\n    }\n\n    userFormClosed = (user) => {\n        if (user) {\n            this.setState({\n                user: user,\n                showUserForm: false\n            });\n        } else {\n            this.setState({\n                showUserForm: false\n            });\n        }\n    }\n\n\n    render() {\n        const {classes, user} = this.props;\n        const {showUserForm, error, loadingInProgress} = this.state;\n\n        return (\n            <div>\n                <ListItem className={classes.root}>\n                    <Grid container alignItems=\"center\" spacing={2}>\n                        <Grid item>\n                            <Typography>{user.mat_nr}</Typography>\n                        </Grid>\n                        <Grid item xs={2}>\n                            <Typography>{user.name}</Typography>\n                        </Grid>\n                        <Grid item xs/>\n                        <Grid item>\n                        </Grid>\n                        <Tooltip title='Bearbeiten' placement=\"bottom\">\n                            <IconButton className={classes.bearbeitenButton} variant='contained'\n                                        onClick={this.bearbeitenButtonClicked}>\n                                <EditIcon/>\n                            </IconButton>\n                        </Tooltip>\n                    </Grid>\n                </ListItem>\n                <ListItem>\n                    <LoadingProgress show={loadingInProgress}/>\n                    <ContextErrorMessage error={error} contextErrorMsg={'Student konnte nicht geladen werden'}\n                                         onReload={this.getUser}/>\n                </ListItem>\n                <Divider/>\n                <UserForm show={showUserForm} user={user} onClose={this.userFormClosed} getModule={this.getUser}/>\n            </div>\n        );\n    }\n}\n\nconst styles = theme => ({\n    root: {\n        width: '100%',\n        marginTop: '16px'\n    },\n});\n\n/** PropTypes */\nStudentListeEintrag.propTypes = {\n    /** @ignore */\n    classes: PropTypes.object.isRequired,\n    show: PropTypes.bool.isRequired\n}\n\n\nexport default withStyles(styles)(StudentListeEintrag);\n\n\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {withRouter} from 'react-router-dom';\nimport {ElectivAPI} from '../api';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport {withStyles, IconButton, InputAdornment, TextField, Paper, Grid} from '@material-ui/core';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport List from '@material-ui/core/List';\nimport ClearIcon from '@material-ui/icons/Clear';\n\nimport StudentListeEintrag from './StudentListeEintrag';\n\nclass StudentListe extends Component {\n\n    constructor(props) {\n        super(props);\n\n        //gebe einen leeren status\n        this.state = {\n            user: [],\n            filteredUser: [],\n            userFilter: '',\n            showDeleteForm: false,\n            error: null,\n            loadingInProgress: false,\n        };\n    }\n\n\n    // API Anbindung um alle Module vom Backend zu bekommen\n    getUser = () => {\n        ElectivAPI.getAPI().getStudenten()\n            .then(userBOs =>\n                this.setState({\n                    user: userBOs,\n                    filteredUser: [...userBOs],\n                    error: null,\n                    loadingInProgress: false,\n                })).catch(e =>\n            this.setState({\n                user: [],\n                filteredUser: [],\n                error: e,\n                loadingInProgress: false,\n            }));\n        this.setState({\n            error: null,\n            loadingInProgress: true,\n        });\n    }\n\n    //Suche leeren\n    clearFilterFieldButtonClicked = () => {\n        this.setState({\n            filteredSemester: [...this.state.semester],\n            semesterFilter: ''\n        });\n    }\n\n    //Suche-Funktion zum Suchen von Semester\n    filterFieldValueChange = event => {\n        const value = event.target.value.toLowerCase();\n        this.setState({\n            filteredUser: this.state.user.filter(user => {\n                return user.getname().toLowerCase().includes(value);\n            }),\n            userFilter: value\n        });\n    }\n\n\n    // Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\n    componentDidMount() {\n        this.getUser();\n    }\n\n\n    /** Renders the component */\n    render() {\n        const {classes} = this.props;\n        const {loadingInProgress, error, filteredUser, userFilter} = this.state;\n\n        return (\n            <div className={classes.root}>\n                <Grid container spacing={2} alignItems=\"center\">\n\n                    <Grid item>\n                        <TextField\n                            className={classes.filter}\n                            type='text'\n                            label='Student suchen'\n                            value={userFilter}\n                            onChange={this.filterFieldValueChange}\n                            InputProps={{\n                                endAdornment: <InputAdornment position='end'>\n                                    <IconButton onClick={this.clearFilterFieldButtonClicked}>\n                                        <ClearIcon fontSize=\"small\"/>\n                                    </IconButton>\n                                </InputAdornment>,\n                            }}\n                        />\n                    </Grid>\n                </Grid>\n                <Paper>\n                    <List className={classes.root} dense>\n                        {\n                            filteredUser.map(user =>\n                                <StudentListeEintrag key={user.getID()} user={user} show={this.props.show}\n                                                     getUser={this.getUser}/>)\n                        }\n                    </List>\n                    <LoadingProgress show={loadingInProgress}/>\n                    <ContextErrorMessage error={error} contextErrorMsg={`Studentliste konnte nicht geladen werden`} onReload={this.getUser}/>\n                </Paper>\n\n            </div>\n        );\n    }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n    root: {\n        width: '100%',\n        marginTop: theme.spacing(2),\n        paddingTop: '4px'\n    },\n    addButton: {\n        marginRight: theme.spacing(2)\n    },\n    filter: {\n        marginLeft: theme.spacing(2)\n    }\n});\n\n/** PropTypes */\nStudentListe.propTypes = {\n    /** @ignore */\n    classes: PropTypes.object.isRequired,\n    /** @ignore */\n    location: PropTypes.object.isRequired,\n}\n\nexport default withRouter(withStyles(styles)(StudentListe));\n\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    withStyles, Button, IconButton, Dialog, DialogContent, DialogContentText,\n    DialogTitle, DialogActions, TextField\n} from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\n\nimport { ElectivAPI } from '../../api';\n\n/**\n * Es wird ein Dialog mit einem Formular dargestellt, mit welchem man User bearbeiten kann\n *\n * @see See Matieral-UIs [Dialog] (https://material-ui.com/components/dialogs)\n *\n */\nclass UserForm extends Component {\n\n    constructor(props) {\n        super(props);\n\n        //initiiere einen leeren state\n        this.state = {\n            name: '',\n            nameValidationFailed: false,\n            nameEdited: false,\n            email: null,\n            emailValidationFailed: false,\n            emailEdited: false,\n            addingError: null,\n            addingInProgress: false,\n            updatingError: null,\n            updatingInProgress: false\n        };\n        this.baseState = this.state;\n    }\n\n    // API Anbindung um den User upzudaten\n    updateUser = () => {\n        let user = this.props.user;\n        user.name = this.state.name\n        user.email = this.state.email\n        ElectivAPI.getAPI().updateUser(user.id, this.state.name, this.state.email).then(user => {\n            this.setState(this.baseState);\n            this.props.onClose(user); //Aufrufen parent in backend\n        }).catch(e =>\n            this.setState({\n                updatingInProgress: false,\n                updatingError: e\n            })\n        );\n        // Ladeanimation einblenden\n        this.setState({\n            updatingInProgress: true,\n            updatingError: null\n        });\n    }\n\n    // Validierung der Textfeldaenderungen\n    textFieldValueChange = (event) => {\n        const value = event.target.value;\n\n        let error = false;\n        if (value.trim().length === 0) {\n            error = true;\n        }\n        this.setState({\n            [event.target.id]: event.target.value,\n            [event.target.id + 'ValidationFailed']: error,\n            [event.target.id + 'Edited']: true\n        });\n    }\n\n    //Infos des zu bearbeitenden Studenten laden\n    getInfos = () => {\n        if (this.props.user) {\n            let name = this.props.user.name;\n            let email = this.props.user.email;\n            this.setState({\n                name: name,\n                email: email,\n            })\n        }\n    }\n\n    //Setzen des Status, bei schließen des Dialogs\n    handleClose = () => {\n        this.setState(this.baseState);\n        this.props.onClose(null);\n    }\n\n\n    render() {\n        const { classes, show, user } = this.props;\n        const {\n            name,\n            nameValidationFailed,\n            email,\n            emailValidationFailed,\n            addingInProgress,\n            updatingInProgress,\n            updatingError,\n        } = this.state;\n\n        let title = `User \"${user.name}\" bearbeiten`\n        let header = 'Neue Userdaten einfügen';\n\n        return (\n            show ?\n                <Dialog open={show} onEnter={this.getInfos} onClose={this.handleClose} maxWidth='xs' fullWidth>\n                    <DialogTitle className={classes.dialogtitle}>{title}\n                        <IconButton className={classes.closeButton} onClick={this.handleClose}>\n                            <CloseIcon />\n                        </IconButton>\n                    </DialogTitle>\n                    <DialogContent>\n                        <DialogContentText>\n                            {header}\n                        </DialogContentText>\n\n                        <form className={classes.root} noValidate autoComplete='off'>\n\n                            <TextField className={classes.textfield} autoFocus type='text' required fullWidth\n                                margin='small' id='name' label='Name' variant=\"outlined\" value={name}\n                                onChange={this.textFieldValueChange} error={nameValidationFailed} />\n\n                            <TextField className={classes.textfield} type='text' required fullWidth margin='small'\n                                id='email' label='email' variant=\"outlined\" value={email}\n                                onChange={this.textFieldValueChange} error={emailValidationFailed} />\n                        </form>\n                        <LoadingProgress show={addingInProgress || updatingInProgress} />\n                        {\n\n                        <ContextErrorMessage error={updatingError}\n                        contextErrorMsg={`The User ${user.getID()} could not be updated.`}\n                        onReload={this.updateUser} />\n\n                        }\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.handleClose} color='secondary'>\n                            Abbrechen\n                        </Button>\n                        {\n                            // If a Projekt is given, show an update button, else an add button\n                            <Button disabled={nameValidationFailed || emailValidationFailed} variant='contained'\n                                onClick={this.updateUser} color='primary'>\n                                Speichern\n                            </Button>\n\n                        }\n                    </DialogActions>\n                </Dialog>\n                : null\n        );\n    }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n    root: {\n        width: '100%',\n    },\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n    textfield: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1)\n    }\n});\n\n/** PropTypes */\nUserForm.propTypes = {\n    /** @ignore */\n    classes: PropTypes.object.isRequired,\n    /** If true, the form is rendered */\n    show: PropTypes.bool.isRequired,\n    /**\n     * Handler function which is called, when the dialog is closed.\n     * Sends the edited or created projektBO's as parameter or null, if cancel was pressed.\n     *\n     * Signature: onClose(ProjektBO's projekt);\n     */\n    onClose: PropTypes.func.isRequired,\n}\n\nexport default withStyles(styles)(UserForm);","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\n\nimport ListItem from '@material-ui/core/ListItem';\nimport { Typography, IconButton, Grid, Tooltip } from '@material-ui/core';\n\nimport EditIcon from '@material-ui/icons/Edit';\nimport Divider from '@material-ui/core/Divider';\n\n\nimport UserForm from './dialogs/UserForm';\n\nclass UserListeEintrag extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showUserForm: false,\n            error: null,\n            loadingInProgress: false\n        };\n    }\n\n    getUser = () => {\n        this.props.getUser();\n    }\n\n\n    bearbeitenButtonClicked = event => {\n        event.stopPropagation();\n        this.setState({\n            showUserForm: true\n        });\n    }\n\n    userFormClosed = (user) => {\n        if (user) {\n            this.setState({\n                user: user,\n                showUserForm: false\n            });\n        } else {\n            this.setState({\n                showUserForm: false\n            });\n        }\n    }\n\n\n    render() {\n        const { classes, user } = this.props;\n        const { showUserForm, error, loadingInProgress } = this.state;\n\n        return (\n            <div>\n                <ListItem className={classes.root}>\n                    <Grid container alignItems=\"center\" spacing={2}>\n                        <Grid item xs={2}>\n                            <Typography>{user.rolle}</Typography>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <Typography>{user.name}</Typography>\n                        </Grid>\n                        <Grid item xs={3}>\n                            <Typography>{user.email}</Typography>\n                        </Grid>\n                        <Grid item xs />\n                        <Grid item>\n                        </Grid>\n                        <Tooltip title='Bearbeiten' placement=\"bottom\">\n                            <IconButton className={classes.bearbeitenButton} variant='contained'\n                                onClick={this.bearbeitenButtonClicked}>\n                                <EditIcon />\n                            </IconButton>\n                        </Tooltip>\n                    </Grid>\n                </ListItem>\n                <ListItem>\n                    <LoadingProgress show={loadingInProgress} />\n                    <ContextErrorMessage error={error} contextErrorMsg={'Der User konnte nicht geladen werden'}\n                        onReload={this.getUser} />\n                </ListItem>\n                <Divider />\n                <UserForm show={showUserForm} user={user} onClose={this.userFormClosed} getModule={this.getUser} />\n            </div>\n        );\n    }\n}\n\nconst styles = theme => ({\n    root: {\n        width: '100%',\n        marginTop: '16px'\n    },\n});\n\n/** PropTypes */\nUserListeEintrag.propTypes = {\n    /** @ignore */\n    classes: PropTypes.object.isRequired,\n    show: PropTypes.bool.isRequired\n}\n\n\nexport default withStyles(styles)(UserListeEintrag);\n\n\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { ElectivAPI } from '../api';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport { withStyles, IconButton, InputAdornment, TextField, Paper, Grid } from '@material-ui/core';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport List from '@material-ui/core/List';\nimport ClearIcon from '@material-ui/icons/Clear';\n\nimport UserListeEintrag from './UserListeEintrag';\n\nclass UserListe extends Component {\n\n    constructor(props) {\n        super(props);\n\n        //gebe einen leeren status\n        this.state = {\n            user: [],\n            filteredUser: [],\n            userFilter: '',\n            showDeleteForm: false,\n            error: null,\n            loadingInProgress: false,\n        };\n    }\n\n\n    // API Anbindung um alle Module vom Backend zu bekommen\n    getUser = () => {\n        ElectivAPI.getAPI().getPersons()\n            .then(userBOs =>\n                this.setState({\n                    user: userBOs,\n                    filteredUser: [...userBOs],\n                    error: null,\n                    loadingInProgress: false,\n                })).catch(e =>\n                    this.setState({\n                        user: [],\n                        filteredUser: [],\n                        error: e,\n                        loadingInProgress: false,\n                    }));\n        this.setState({\n            error: null,\n            loadingInProgress: true,\n        });\n    }\n\n    //Suche leeren\n    clearFilterFieldButtonClicked = () => {\n        this.setState({\n            filteredSemester: [...this.state.semester],\n            semesterFilter: ''\n        });\n    }\n\n    //Suche-Funktion zum Suchen von Semester\n    filterFieldValueChange = event => {\n        const value = event.target.value.toLowerCase();\n        this.setState({\n            filteredUser: this.state.user.filter(user => {\n                return user.getname().toLowerCase().includes(value);\n            }),\n            userFilter: value\n        });\n    }\n\n\n    // Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\n    componentDidMount() {\n        this.getUser();\n    }\n\n\n    /** Renders the component */\n    render() {\n        const { classes } = this.props;\n        const { loadingInProgress, error, filteredUser, userFilter } = this.state;\n\n        return (\n            <div className={classes.root}>\n                <Grid container spacing={2} alignItems=\"center\">\n\n                    <Grid item>\n                        <TextField\n                            className={classes.filter}\n                            type='text'\n                            label='User suchen'\n                            value={userFilter}\n                            onChange={this.filterFieldValueChange}\n                            InputProps={{\n                                endAdornment: <InputAdornment position='end'>\n                                    <IconButton onClick={this.clearFilterFieldButtonClicked}>\n                                        <ClearIcon fontSize=\"small\" />\n                                    </IconButton>\n                                </InputAdornment>,\n                            }}\n                        />\n                    </Grid>\n                </Grid>\n                <Paper>\n                    <List className={classes.root} dense>\n                        {\n                            filteredUser.map(user =>\n                                <UserListeEintrag key={user.getID()} user={user} show={this.props.show}\n                                    getUser={this.getUser} />)\n                        }\n                    </List>\n                    <LoadingProgress show={loadingInProgress} />\n                    <ContextErrorMessage error={error} contextErrorMsg={`Userliste konnte nicht geladen werden.`} onReload={this.getUser} />\n                </Paper>\n\n            </div>\n        );\n    }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n    root: {\n        width: '100%',\n        marginTop: theme.spacing(2),\n        paddingTop: '4px'\n    },\n    addButton: {\n        marginRight: theme.spacing(2)\n    },\n    filter: {\n        marginLeft: theme.spacing(2)\n    }\n});\n\n/** PropTypes */\nUserListe.propTypes = {\n    /** @ignore */\n    classes: PropTypes.object.isRequired,\n    /** @ignore */\n    location: PropTypes.object.isRequired,\n}\n\nexport default withRouter(withStyles(styles)(UserListe));\n\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\nimport { Container, ThemeProvider, CssBaseline } from '@material-ui/core';\nimport firebase from 'firebase/app'; //Firebase module\nimport 'firebase/auth'; //Firebase module\nimport Header from './components/layout/Header';\nimport ProjektListe from './components/ProjektListe';\nimport ProjektDozentListe from './components/ProjektDozentListe';\n  \n// import Electivs from '/components/Electivs';\nimport About from './components/pages/About';\nimport Theme from './Theme';\nimport SignIn from './components/pages/SignIn';\nimport MeineProjekte from './components/MeineProjekte';\nimport Semesterbericht from './components/Semesterbericht';\nimport ProjektPflegen from './components/ProjektPflegen';\nimport Notenliste from './components/Notenliste';\nimport LoadingProgress from './components/dialogs/LoadingProgress';\nimport ContextErrorMessage from './components/dialogs/ContextErrorMessage';\nimport ElectivAPI from './api/ElectivAPI';\nimport firebaseConfig from './firebaseconfig';\nimport ProjektverwaltungListe from './components/ProjektverwaltungListe';\nimport Administration from './components/Administration';\nimport ModulListe from './components/ModulListe';\nimport SemesterListe from './components/SemesterListe';\nimport ProjektartListe from './components/ProjektartListe';\nimport StudentListe from './components/StudentListe';\nimport UserListe from './components/UserListe';\n\n\n/*\nMain page of the electivApp. First firebase to verify users. Then routing to the pages via react-router-dom\n*/\n\nclass App extends React.Component {\n  // initialize firebase\n  constructor(props){\n    super(props);\n\n    // initialize empty values\n    this.state = {\n      currentUser: null,\n      appError: null,\n      authError: null,\n      authLoading: false,\n      currentStudent: null,\n      currentPerson: null\n    };\n  }\n  // creating error boundry. receiving all errors below the component tree\n\n  static getDerivedStateFromError(error) {\n    // update state for fallback UI\n    return { appError: error };\n  }\n  \n  // handles all user login states with firebase\n  handleAuthStateChange = user => {\n    if (user) {\n      this.setState({\n        authLoading: true, \n      });\n      // user signed in\n      user.getIdToken().then(token => {\n        // Token gets storend into cookie\n        // Server (backend) can then read out that cookie\n        // only token information, safety risk!\n        document.cookie = `token=${token};path=/`;\n        // set user when token arrives\n        this.setState({\n          currentUser: user,\n          authError: null,\n          authLoading: false\n        })}).then(() => {\n        this.getUserByGoogleID()\n      }).catch(e => {\n        this.setState({\n          authError: e,\n          authLoading: false\n        });\n      });\n    } else {\n      // user loggend out -> clear id token\n      document.cookie = 'token=;path=/';\n\n      // Set the logged out user to null\n      this.setState({\n        currentUser: null,\n        authLoading: false\n      });\n    }\n  }\n\n  // handles the sign in component with firebase.auth()\n  handleSignIn = () => {\n    this.setState({\n      authLoading: true\n    });\n    const provider = new firebase.auth.GoogleAuthProvider();\n    firebase.auth().signInWithRedirect(provider);\n  }\n\n  //aktuell eingeloggten Student vom Backend abfragen\n  getUserByGoogleID = () => {\n    let rolle = this.getCookie(\"rolle\")\n\n    if (rolle === \"Student\") {\n      ElectivAPI.getAPI().getStudentByGoogleID(this.state.currentUser.uid)\n        .then(studentBO =>\n            this.setState({\n                currentStudent: studentBO,\n                error: null,\n                loadingInProgress: false,\n            })\n            ).catch(e =>\n                this.setState({\n                    currentStudent: null,\n                    error: e,\n                    loadingInProgress: false,\n                }));\n        this.setState({\n            error: null,\n            loadingInProgress: true\n        });\n    }\n    else{\n      ElectivAPI.getAPI().getPersonByGoogleID(this.state.currentUser.uid)\n        .then(personBO =>\n            this.setState({\n                currentPerson: personBO,\n                error: null,\n                loadingInProgress: false,\n            })\n            ).catch(e =>\n                this.setState({\n                    currentPerson: null,\n                    error: e,\n                    loadingInProgress: false,\n                }));\n        this.setState({\n            error: null,\n            loadingInProgress: true\n        });\n    }\n    setTimeout(()=>{\n      console.log(this.state);\n    },1000);\n    }\n    \n    //openbook getcookie von Galileo\n    getCookie = (name) => {\n      var i=0;  //Suchposition im Cookie\n      var suche = name + \"=\";\n      while (i<document.cookie.length) {\n         if (document.cookie.substring(i, i + suche.length) === suche) {\n            var ende = document.cookie.indexOf(\";\", i + suche.length);\n            ende = (ende > -1) ? ende : document.cookie.length;\n            var cook = document.cookie.substring(i + suche.length, ende);\n            return unescape(cook);\n         }\n         i++;\n      }\n      return \"\";\n   }\n\n\n  // lifecycle method\n  componentDidMount() {\n    firebase.initializeApp(firebaseConfig);\n    firebase.auth().languageCode = 'en';\n    firebase.auth().onAuthStateChanged(this.handleAuthStateChange);\n  }\n\n  render() {\n    const { currentUser, appError, authError, authLoading, currentStudent, currentPerson } = this.state;\n\n    return (\n      <ThemeProvider theme={Theme}>\n        {/* Global CSS reset and browser normalization. CssBaseline kickstarts an elegant, consistent, and simple baseline to build upon. */}\n        <CssBaseline />\n        <Router basename={process.env.PUBLIC_URL}>\n          <Container maxWidth='md'>\n            <Header user={currentUser} currentStudent={currentStudent} currentPerson= {currentPerson}/> \n          \n            {\n              // is the user signed in?\n              currentUser && (currentStudent || currentPerson) ?\n                <>\n                  <Redirect from='/' to='projekte' />\n                  <Route path='/projekte' component ={ProjektListe}>\n                    <ProjektListe currentStudent={currentStudent} currentPerson= {currentPerson}/>\n                  </Route>\n                  <Route path='/about' component={About} />\n\n                  <Route path='/projekteDozent' component={ProjektDozentListe}>\n                    <ProjektDozentListe currentStudent={currentStudent} currentPerson= {currentPerson}/>\n                  </Route>\n\n                  <Route path='/projektverwaltung' component={ProjektverwaltungListe}>\n                    <ProjektverwaltungListe currentStudent={currentStudent} currentPerson= {currentPerson}/>\n                  </Route>\n                  <Route path='/projektpflegen' component={ProjektPflegen}>\n                    <ProjektPflegen currentStudent={currentStudent} currentPerson= {currentPerson}/>\n                  </Route>\n                  \n                  <Route path='/meineprojekte' component={MeineProjekte}>\n                    <MeineProjekte currentStudent={currentStudent} />\n                  </Route>\n\n                  <Route path='/semesterbericht' component={Semesterbericht}>\n                    <Semesterbericht currentStudent={currentStudent}/>\n                  </Route>\n                  \n                  <Route path='/notenliste' component={Notenliste}>\n                    <Notenliste currentStudent={currentStudent} currentPerson= {currentPerson}/>\n                  </Route>\n\n                  <Route path='/administration' component={Administration}>\n                    <Administration currentPerson= {currentPerson}/>\n                  </Route>\n\n                  <Route path='/administration/semester' component={SemesterListe}>\n                    <SemesterListe currentPerson= {currentPerson}/>\n                  </Route>\n\n                  <Route path='/administration/module' component={ModulListe}>\n                    <ModulListe currentPerson= {currentPerson}/>\n                  </Route>\n\n                  <Route path='/administration/projektarten' component={ProjektartListe}>\n                    <ProjektartListe currentPerson= {currentPerson}/>\n                  </Route>\n\n                  <Route path='/administration/student' component={StudentListe}>\n                    <StudentListe currentPerson= {currentPerson}/>\n                  </Route>\n\n                  <Route path='/administration/user' component={UserListe}>\n                    <UserListe currentPerson= {currentPerson}/>\n                  </Route>\n\n                </>\n                :\n                // if not signed in show sign in page\n                <>\n                  <Redirect to='/index.html' />\n                  <SignIn onSignIn={this.handleSignIn} />\n                </>\n            }\n            <LoadingProgress show={authLoading} />\n            <ContextErrorMessage error={authError} contextErrorMsg={`Something went wrong during signIn process.`} onReload={this.handleSignIn} />\n            <ContextErrorMessage error={appError} contextErrorMsg={`Doh! Something went wrong inside the app. Please reload the page.`} />\n          </Container>\n        </Router>\n      </ThemeProvider>\n    );\n\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}