{"version":3,"sources":["components/images/pascal.jpg","components/images/Alex.jpg","components/images/Daria.jpg","components/images/Jannik.jpg","components/images/Raphael.jpg","components/images/Leander.jpg","components/dialogs/ProfileDropDown.js","components/layout/Header.js","api/BusinessObject.js","api/NamedBusinessObject.js","api/ProjektBO.js","api/PersonBO.js","api/StudentBO.js","api/TeilnahmeBO.js","api/BewertungBO.js","api/ModulBO.js","api/SemesterBO.js","api/ProjektartBO.js","api/ElectivAPI.js","components/dialogs/ContextErrorMessage.js","components/dialogs/LoadingProgress.js","components/ProjektListeEintrag.js","components/ProjektListe.js","components/dialogs/ProjektForm.js","components/dialogs/ProjektDelete.js","components/ProjektDozentListeEintrag.js","components/ProjektDozentListe.js","components/pages/About.js","components/dialogs/AddStudent.js","Theme.js","components/pages/SignIn.js","components/MeineProjekteEintrag.js","components/MeineProjekte.js","components/SemesterberichtEintrag.js","components/Semesterbericht.js","components/dialogs/AddStudentEintrag.js","components/ProjektPflegenEintrag.js","components/ProjektPflegen.js","components/NotenlisteEintrag.js","components/Notenliste.js","firebaseconfig.js","components/ProjektverwaltungListeEintrag.js","components/ProjektverwaltungListe.js","components/Administration.js","components/dialogs/ModulForm.js","components/dialogs/ModulDelete.js","components/ModulListeEintrag.js","components/ModulListe.js","components/dialogs/SemesterForm.js","components/dialogs/SemesterDelete.js","components/SemesterListeEintrag.js","components/SemesterListe.js","components/dialogs/ProjektartenForm.js","components/dialogs/ProjektartDelete.js","components/ProjektartListeEintrag.js","components/ProjektartListe.js","components/dialogs/StudentForm.js","components/StudentListeEintrag.js","components/StudentListe.js","components/dialogs/UserForm.js","components/UserListeEintrag.js","components/UserListe.js","App.js","index.js"],"names":["module","exports","ProfileDropDown","props","createRef","handleAvatarButtonClick","setState","open","state","handleClose","handleSignOutButtonClicked","firebase","auth","signOut","this","classes","user","IconButton","className","avatarButton","ref","onClick","Avatar","src","photoURL","Popover","anchorEl","current","onClose","anchorOrigin","vertical","horizontal","transformOrigin","ClickAwayListener","onClickAway","Paper","profileBox","Typography","align","Divider","divider","variant","displayName","email","Grid","container","justify","item","Button","color","Component","withStyles","theme","float","margin","spacing","padding","background","palette","default","Header","handleTabChange","e","newIndex","tabindex","currentStudent","currentPerson","root","text1","component","text2","Tabs","indicatorColor","textColor","centered","value","onChange","Tab","label","RouterLink","to","rolle","tab","withRouter","width","minWidth","paddingLeft","marginTop","marginBottom","BusinessObject","id","result","prop","NamedBusinessObject","aname","name","ProjektBO","aid","amax_teilnehmer","aprojektbeschreibung","abetreuer","aexterner_partner","awoechentlich","aanzahl_block_vor","aanzahl_block_in","apraeferierte_block","abes_raum","araum","asprache","adozent","azustand","ahalbjahr","aart","aanzahlTeilnehmer","ateilnehmerListe","max_teilnehmer","beschreibung","betreuer","externer_partner","woechentlich","anzahl_block_vor","anzahl_block_in","praeferierte_block","bes_raum","raum","sprache","dozent","aktueller_zustand","halbjahr","art","anzahlTeilnehmer","teilnehmerListe","ects","aects","projekte","results","Array","isArray","forEach","c","Object","setPrototypeOf","prototype","push","PersonBO","aemail","agoogle_user_id","arolle","google_user_id","personen","StudentBO","amat_nr","akuerzel","mat_nr","kuerzel","studenten","TeilnahmeBO","ateilnehmer","alehrangebot","aanrechnung","aresultat","teilnehmer","lehrangebot","anrechnung","resultat","teilnahmen","BewertungBO","anote","note","bewertungen","ModulBO","aedv_nr","edv_nr","SemesterBO","semester","ProjektartBO","asws","sws","projektart","ElectivAPI","projektId","zustandId","projektname","zustand_id","dozent_id","student_id","semester_id","modul_id","lehrangebotId","teilnehmerId","matrNr","projekt_id","url","init","fetch","credentials","then","res","ok","Error","status","statusText","json","method","responseJSON","projektBOs","fromJSON","console","info","Promise","resolve","zustand","projektartBos","projektartBO","headers","body","JSON","stringify","responseProjektartBO","sort","a","b","projektBO","responseProjektBO","personBO","studentID","teilnahmeBOs","studentBO","teilnahmeBO","getID","responseTeilnahmeBO","bewertungBO","bewertungBOs","modulBOs","modulBO","responseModulBO","studentBOs","semesterBO","semesterBOs","responseSemesterBO","personBOs","ContextErrorMessage","error","contextErrorMsg","onReload","Alert","severity","AlertTitle","margins","message","startIcon","LoadingProgress","show","LinearProgress","ProjektListeEintrag","expansionPanelStateChanged","onExpandedStateChange","projekt","teilnahmeButtonClicked","event","stopPropagation","teilnahmeButtonDisabled","teilnahmeAbwaehlenButtonDisabled","setAnzahlTeilnehmer","parseInt","projektarten","ectsCountFunc","getAPI","setTeilnahme","teilnahmeAbwaehlenButtonClicked","deleteTeilnahme","teilnahmeChanged","getInfosMount","indexOf","length","ectsAdded","getInfosUpdate","showProjektForm","showProjektDeleteDialog","prevProps","ectsCount","expandedState","Accordion","defaultExpanded","expanded","AccordionSummary","expandIcon","alignItems","heading","getname","getdozent","xs","getAnzahlTeilnehmer","getmax_teilnehmer","teilnahmeAbwaehlenButton","size","disabled","teilnahmeButton","AccordionDetails","details","getbeschreibung","getbetreuer","getraum","getexterner_partner","getwoechentlich","getanzahl_block_vor","getanzahl_block_in","getsprache","getpraeferierte_block","paddingTop","paddingBottom","ProjektListe","setTimeout","getProjekte","getProjekteByZustand","projekteBOs","filteredProjekte","loadingInProgress","catch","getProjektarten","getProjektart","projekteartBos","getPPersonen","getPersons","newID","expandedProjektID","expandedID","location","expandProjekt","projektFilter","ausgewaehlteEcts","showProjekteForm","grid","buttonEcts","disableRipple","style","backgroundColor","filter","getArt","map","key","marginLeft","marginRight","ProjektForm","addProjekt","newProjekt","postProjekte_hat_module","modulwahl","baseState","updatingInProgress","updatingError","updateProjekt","setname","setmax_teilnehmer","setbeschreibung","setbetreuer","setexterner_partner","setwoechentlich","setanzahl_block_vor","setanzahl_block_in","setpraeferierte_block","setbes_raum","setraum","setsprache","setAktuellerZustand","setHalbjahr","setArt","setTeilnehmerListe","updateProjekte_hat_module","getUpdateInfos","nm","mt","bs","bt","ep","wt","av","ai","pb","br","getbes_raum","rm","sp","dz","at","tl","getTeilnehmerListe","hj","getHalbjahr","pa","boolvor","boolin","boolpraef","boolBlock_vor","boolBlock_in","boolBlockpraef","textFieldValueChange","target","trim","numberValueChange","test","checkboxValueChange","checked","radioValueChange","getSemester","loadingTeilnahmeError","projektartBOs","log","getModule","getModule_by_projekt_id","modulIDs","modul","modulwahlBOs","handleSemesterChange","halbjahrEdited","handleArtChange","artEdited","handleModulChange","moduleEdited","modulwahlChange","getInfos","nameValidationFailed","nameEdited","max_teilnehmerValidationFailed","max_teilnehmerEdited","beschreibungValidationFailed","beschreibungEdited","betreuerValidationFailed","betreuerEdited","externer_partnerValidationFailed","externer_partnerEdited","woechentlichValidationFailed","woechentlichEdited","anzahl_block_vorValidationFailed","anzahl_block_vorEdited","anzahl_block_inValidationFailed","anzahl_block_inEdited","praeferierte_blockValidationFailed","praeferierte_blockEdited","bes_raumValidationFailed","bes_raumEdited","raumValidationFailed","raumEdited","spracheValidationFailed","spracheEdited","dozentValidationFailed","dozentEdited","anzahlTeilnehmerValidationFailed","anzahlTeilnehmerEdited","teilnehmerListeValidationFailed","teilnehmerListeEdited","addingInProgress","addingError","title","header","Dialog","onEnter","maxWidth","DialogTitle","closeButton","DialogContent","DialogContentText","noValidate","autoComplete","TextField","autoFocus","type","required","fullWidth","helperText","FormControl","RadioGroup","radio","row","aria-label","defaultValue","FormControlLabel","control","Radio","labelPlacement","formControl","InputLabel","Select","MenuItem","formControlpa","formControlmo","multiple","renderValue","chips","Chip","chip","Checkbox","ListItemText","getEdv_nr","FormGroup","multiline","rows","DialogActions","position","right","top","grey","display","flexWrap","ProjektDelete","closeSnackbar","reason","showSnackbar","deleteProjekt","Snackbar","autoHideDuration","ProjektDozentListeEintrag","projektFormClosed","bearbeitenButtonClicked","projektDeleteButtonClicked","projektDeleteClosed","Tooltip","placement","projektDeleteButton","bearbeitenButton","ProjektDozentListe","getrolle","getProjekteByZustandByDozent","addProjektButtonClicked","newProjektList","filterValue","filterFieldValueChange","i","button","useStyles","makeStyles","content","textAlign","img","hyperlink","textDecoration","primary","main","About","studentenvar","Fragment","paper1","Card","root1","alt","Raphael","CardContent","gutterBottom","href","paper","Jannik","Leander","Daria","Alex","Pascal","white","createMuiTheme","black","darkgrey","contrastText","dark","colors","blueGrey","light","secondary","red","success","green","blue","warning","orange","text","link","icon","SignIn","handleSignInButtonClicked","document","cookie","getElementById","onSignIn","handleChange","rolleEdited","kuerzelEdited","mat_nrEdited","lenght","kuerzelValidationFailed","mat_nrValidationFailed","form","StyledTableCell","head","common","fontSize","TableCell","StyledTableRow","action","hover","TableRow","MeineProjekteEintrag","getProjekt","teilnahme","projektID","projektName","projektZustand","getPerson","getBewertung","getSemester_by_id","getECTS","getProjektartById","ECTS","getnote","dozentName","edv","setAnrechnung","updateTeilnahme","getTeilnahmen","breite","colspan","laden","table","MeineProjekte","printSemesterbericht","window","print","currentStudentName","currentStudentmat_nr","getmat_nr","textTransform","TableContainer","Table","TableHead","TableBody","paddingRight","SemesterberichtEintrag","Semesterbericht","getTeilnahmenBySemester","semesterwahl","getSemesterOfStudent","semesterChange","warnung","AddStudentEintrag","addTeilnahme","addButtonDisabled","currentProjekt","student","ListItem","ListItemSecondaryAction","AddStudent","getStudenten","teilnahmeids","studentenids","splice","filteredStudenten","loadingProjekteError","handleOpen","toLowerCase","nameContainsValue","includes","mat_nrContainsValue","toString","studentFilter","clearFilterFieldButtonClicked","onEntered","dialogtitle","InputProps","endAdornment","InputAdornment","List","ProjektPflegenEintrag","reloadteilnahmen","getStudentByID","getteilnehmer","studentName","getBewertungen","bewertung","setResultat","currentProjektBO","scope","selectEmpty","ProjektPflegen","getAbgeschlosseneProjekte","abgeschlosseneProjekte","getTeilnahmenByProjektId","bewertungAbgeschlossenButtonClicked","setZustandAtProjekt","addStudentButtonClicked","showAddStudent","addStudentClosed","handleChangeProjektzustand","projektzustand","bind","sm","select","selectprojekt","Fab","addButton","NotenlisteEintrag","Notenliste","getTeilnahmen_by_modul_und_semester","printNotenliste","handleReload","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ProjektverwaltungListeEintrag","annehmenButtonClicked","projektAnnehmenButton","projektAblehnenButton","ablehnenButtonClicked","ProjektverwaltungListe","Administration","tabs","ModulForm","addModul","newModul","setID","setEdv_nr","addingProgress","updateModul","edv_nrValidationFailed","edv_nrEdited","textfield","ModulDelete","deleteModul","ModulListeEintrag","modulFormClosed","showModulForm","modulDeleteButtonClicked","showModulDelete","modulDeleteClosed","ModulListe","addButtonClicked","filteredModule","edv_nrContainsValue","modulFilter","newModulList","showDeleteForm","dense","SemesterForm","addSemester","newSemester","updateSemester","SemesterDelete","deleteSemester","SemesterListeEintrag","semesterFormClosed","showSemesterForm","semesterDeleteButtonClicked","showSemesterDelete","semesterDeleteClosed","SemesterListe","filteredSemester","semesterFilter","newSemesterList","ProjektartenForm","addProjektart","newProjektart","set_ects","set_sws","updateProjektart","get_ects","get_sws","ectsValidationFailed","ectsEdited","swsValidationFailed","swsEdited","ProjektartDelete","deleteProjektart","ProjektartListeEintrag","projektartFormClosed","showProjektartForm","projektartDeleteButtonClicked","showProjektartDelete","projektartDeleteClosed","ProjektartListe","showProjektartenForm","filteredProjektarten","projektartFilter","newProjektartList","StudentForm","updateUser","updateStudent","setStateValueChange","StudentListeEintrag","getUser","showUserForm","userFormClosed","StudentListe","userBOs","filteredUser","userFilter","UserForm","emailValidationFailed","emailEdited","UserListeEintrag","UserListe","App","handleAuthStateChange","authLoading","getIdToken","token","currentUser","authError","getUserByGoogleID","handleSignIn","provider","GoogleAuthProvider","signInWithRedirect","getCookie","getStudentByGoogleID","uid","getPersonByGoogleID","suche","substring","ende","cook","unescape","appError","initializeApp","languageCode","onAuthStateChanged","ThemeProvider","Theme","CssBaseline","basename","process","Container","from","path","React","ReactDOM","render"],"mappings":"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","file":"static/js/main.bf5c2229.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pascal.3da9eb9b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Alex.7a99dc3b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Daria.57ac10fa.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Jannik.faf59a7d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Raphael.0fe03bd1.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Leander.562d57ad.jpg\";","import React, { Component, createRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Popover, IconButton, Avatar, ClickAwayListener, withStyles, Typography, Paper, Button, Grid, Divider } from '@material-ui/core';\r\nimport firebase from 'firebase/app';\r\n\r\n/*\r\nshows drop down list of projects -> information inside\r\n*/\r\n\r\nclass ProfileDropDown extends Component {\r\n\r\n  // a refernce to the avatar button\r\n  #avatarButtonRef = createRef();\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Init the state\r\n    this.state = {\r\n      open: false,\r\n    }\r\n  }\r\n\r\n  /** Handles click events on the avatar button and toggels visibility */\r\n  handleAvatarButtonClick = () => {\r\n    this.setState({\r\n      open: !this.state.open\r\n    });\r\n  }\r\n\r\n  /** \r\n   * Handles click events from the ClickAwayListener.\r\n   * \r\n   * @see See Material-UIs [ClickAwayListener](https://material-ui.com/components/click-away-listener/)\r\n   */\r\n  handleClose = () => {\r\n    this.setState({\r\n      open: false\r\n    });\r\n  }\r\n\r\n  /** \r\n   * Handles the click event of the sign in button and uses the firebase.auth() component to sign in.\r\n   * \r\n   * @see See Google [firebase.auth](https://firebase.google.com/docs/reference/js/firebase.auth.Auth)\r\n   * @see See Google [firebase.auth().signOut](https://firebase.google.com/docs/reference/js/firebase.auth.Auth#signout)\r\n   */\r\n  handleSignOutButtonClicked = () => {\r\n    firebase.auth().signOut();\r\n  }\r\n\r\n  /** Renders the profile drop down if a loggin user is given as a prop */\r\n  render() {\r\n    const { classes, user } = this.props;\r\n    const { open } = this.state;\r\n\r\n    return (\r\n      user ?\r\n        <div>\r\n          <IconButton className={classes.avatarButton} ref={this.#avatarButtonRef} onClick={this.handleAvatarButtonClick}>\r\n            <Avatar src={user.photoURL} />\r\n          </IconButton>\r\n\r\n          <Popover open={open} anchorEl={this.#avatarButtonRef.current} onClose={this.handleClose}\r\n            anchorOrigin={{\r\n              vertical: 'top',\r\n              horizontal: 'left',\r\n            }}\r\n            transformOrigin={{\r\n              vertical: 'top',\r\n              horizontal: 'right',\r\n            }}>\r\n            <ClickAwayListener onClickAway={this.handleClose}>\r\n              <Paper className={classes.profileBox}>\r\n                <Typography align='center'>Hello</Typography>\r\n                <Divider className={classes.divider} />\r\n                <Typography align='center' variant='body2'>{user.displayName}</Typography>\r\n                <Typography align='center' variant='body2'>{user.email}</Typography>\r\n                <Divider className={classes.divider} />\r\n                <Grid container justify='center'>\r\n                  <Grid item>\r\n                    <Button color='primary' onClick={this.handleSignOutButtonClicked}>Logout</Button>\r\n                  </Grid>\r\n                </Grid>\r\n              </Paper>\r\n            </ClickAwayListener>\r\n          </Popover>\r\n        </div>\r\n        : null\r\n    )\r\n  }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  avatarButton: {\r\n    float: 'right'\r\n  },\r\n  divider: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  profileBox: {\r\n    padding: theme.spacing(1),\r\n    background: theme.palette.background.default,\r\n  }\r\n});\r\n\r\n/** PropTypes */\r\nProfileDropDown.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** The logged in firesbase user */\r\n  user: PropTypes.object,\r\n}\r\n\r\nexport default withStyles(styles)(ProfileDropDown)\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Paper, Typography, Tabs, Tab } from '@material-ui/core';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport ProfileDropDown from '../dialogs/ProfileDropDown';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\n/**\r\n * \r\n * Zeigt den Header mit den verfügbaren Navigations Tabs.\r\n * Je nach Rolle (Student, Dozent, Admin) sind andere Tabs zum auswählen verfügbar.\r\n * \r\n * @see See Material-UIs [Tabs](https://material-ui.com/components/tabs/)\r\n * @see See Material-UIs [Paper](https://material-ui.com/components/paper/)\r\n * \r\n * \r\n**/\r\n\r\nclass Header extends Component {\r\n\tconstructor(props) {\r\n    super(props);\r\n  \r\n\r\n\t\t//init empty state\r\n\t\tthis.state = {\r\n\t\t\ttabindex: 0\r\n\t\t};\r\n\t}\r\n\t// handles changes of the state of tabs component\r\n\thandleTabChange = (e, newIndex) => {\r\n\t\tthis.setState({\r\n\t\t\ttabindex: newIndex\r\n\t\t})\r\n\t};\r\n\t// Rendert Komponente\r\n\trender() {\r\n    const { classes, user, currentStudent, currentPerson } = this.props;\r\n\t\treturn (\r\n      <Paper className={classes.root} variant='outlined' >\r\n        <ProfileDropDown user={user} />\r\n        <Typography className={classes.text1} variant='h3' component='h1' align='center'>\r\n          HdM Wahlfach App\r\n        </Typography>\r\n        <Typography className={classes.text2} variant='h5' component='h2' align='center'>\r\n        STUDIEREN. WISSEN. MACHEN.\r\n        </Typography>\r\n        {\r\n          user ?\r\n            \r\n              <>\r\n              {currentStudent ?\r\n                <>\r\n                <Paper variant='outlined'>\r\n                  <Tabs indicatorColor='secondary' textColor='secondary' variant='fullWidth' centered value={this.state.tabindex} onChange={this.handleTabChange}>\r\n                    <Tab label='Projektwahl' component={RouterLink} to={`/projekte`} />\r\n                    <Tab label=\"Meine Projekte\" component={RouterLink} to={'/meineprojekte'}/>\r\n                    <Tab label=\"Semesterbericht\" component={RouterLink} to={'/semesterbericht'}/>\r\n                    <Tab label='About' component={RouterLink} to={`/about`} />\r\n                  </Tabs>\r\n                </Paper>\r\n                </>\r\n                :null\r\n              }\r\n              {currentPerson?\r\n                <>\r\n                  {currentPerson.rolle === \"Dozent\"?\r\n                  <>\r\n                  <Paper variant='outlined'>\r\n                    <Tabs indicatorColor='secondary' textColor='secondary' variant='fullWidth' centered value={this.state.tabindex} onChange={this.handleTabChange}  >\r\n                      <Tab label='Wahl' component={RouterLink} to={`/projekte`} />\r\n                      <Tab label='Projektpflege' component={RouterLink} to={`/projektpflegen`} />\r\n                      <Tab label='Projektverwaltung' component={RouterLink} to={`/projekteDozent`} />\r\n                      <Tab label='About' component={RouterLink} to={`/about`} />\r\n                    </Tabs>\r\n                  </Paper>\r\n                  </>\r\n                  :null\r\n                  }\r\n                  {currentPerson.rolle === \"Admin\"?\r\n                  <>\r\n                  <Paper variant='outlined'>\r\n                    <Tabs indicatorColor='secondary' textColor='secondary' centered value={this.state.tabindex} onChange={this.handleTabChange}  >\r\n                      <Tab className={classes.tab} label='Wahl' component={RouterLink} to={`/projekte`} />\r\n                      <Tab className={classes.tab} label='Pflege' component={RouterLink} to={`/projektpflegen`} />\r\n                      <Tab className={classes.tab} label='Verwaltung' component={RouterLink} to={`/projekteDozent`} />\r\n                      <Tab className={classes.tab} label='Prüfung' component={RouterLink} to={`/projektverwaltung`} />\r\n                      <Tab className={classes.tab} label=\"Notenliste\" component={RouterLink} to={'/notenliste'}/>\r\n                      <Tab className={classes.tab} label='Administration' component={RouterLink} to={`/administration/semester`} />\r\n                    </Tabs>\r\n                  </Paper>\r\n                  </>\r\n                  :null\r\n                  }\r\n                </>\r\n              :null\r\n              }\r\n            </>\r\n            : null\r\n        }\r\n      </Paper>\r\n    )\r\n  }\r\n}\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  tab: {\r\n    minWidth: 150, // a number of your choice\r\n    width: 150, // a number of your choice\r\n  },\r\n  text1: {\r\n    paddingLeft: '64px',\r\n    marginTop: theme.spacing(2)\r\n  },\r\n  text2: {\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n\r\n});\r\n\r\n\r\n// Prop Type\r\nHeader.propTypes = {\r\n\t// logged in Firebase user/person\r\n\tuser: PropTypes.object,\r\n}\r\n\r\nexport default withRouter(withStyles(styles)(Header));","/*\r\nBasisklasse fuer alle BO's welche eine ID besitzen\r\n*/\r\n\r\nexport default class BusinessObject {\r\n\t/*\r\n\tNull constructor\r\n\t*/\r\n\tconstructor(id){\r\n\t\tthis.id = id;\r\n\t}\r\n\r\n\t/*\r\n\tJedes Business Object erhaelt eine neue ID, die aId.\r\n\t*/\r\n\tsetID(id){\r\n\t\tthis.id =id\r\n\t}\r\n\r\n\t/*\r\n\tGebe die ID vom BO zurueck\r\n\t*/\r\n\tgetID(){\r\n\t\treturn this.id;\r\n\t}\r\n\r\n\t/*\r\n\tGibt eine darstellung des BO's in Form eines String zuruck\r\n\t*/\r\n\ttoString() {\r\n\t\tlet result = '';\r\n\t\tfor (var prop in this) {\r\n\t\t\tresult += prop + ': ' +this[prop] + ' ';\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n}","import BusinessObject from \"./BusinessObject\";\r\n\r\n/*\r\nBasisklasse fuer alle BO's welche einen Namen besitzen\r\n*/\r\n\r\nexport default class NamedBusinessObject extends BusinessObject{\r\n\r\n\tconstructor(aname){\r\n        super();\r\n        this.name = aname;\r\n    }\r\n    \r\n\t/*\r\n\tErhalte Namen\r\n\t*/\r\n\tgetname(){\r\n\t\treturn this.name;\r\n\t}\r\n\t/*\r\n\tSetze Namen\r\n\t*/\r\n\tsetname(aname){\r\n\t\tthis.name = aname;  \r\n\t}\r\n}\r\n","import NamedBusinessObject from './NamedBusinessObject';\r\n\r\n/*\r\nRealisierung eines ProjektBOs mit allen Attributen\r\n*/\r\n\r\nexport default class ProjektBO extends NamedBusinessObject{\r\n\tconstructor(aid, aname, amax_teilnehmer, aprojektbeschreibung, abetreuer, aexterner_partner, awoechentlich, aanzahl_block_vor, aanzahl_block_in, apraeferierte_block, abes_raum, araum, asprache, adozent, azustand, ahalbjahr, aart, aanzahlTeilnehmer,ateilnehmerListe){\r\n\t\tsuper(aid, aname);\r\n\t\tthis.id = aid;\r\n\t\tthis.name = aname;\r\n\t\tthis.max_teilnehmer = amax_teilnehmer;\r\n\t\tthis.beschreibung = aprojektbeschreibung;\r\n\t\tthis.betreuer = abetreuer;\r\n\t\tthis.externer_partner = aexterner_partner;\r\n\t\tthis.woechentlich =awoechentlich;\r\n\t\tthis.anzahl_block_vor = aanzahl_block_vor;\r\n\t\tthis.anzahl_block_in = aanzahl_block_in;\r\n\t\tthis.praeferierte_block = apraeferierte_block;\r\n\t\tthis.bes_raum = abes_raum;\r\n\t\tthis.raum = araum;\r\n\t\tthis.sprache = asprache;\r\n\t\tthis.dozent = adozent;\r\n\t\tthis.aktueller_zustand = azustand\r\n\t\tthis.halbjahr = ahalbjahr;\r\n\t\tthis.art = aart;\r\n\t\tthis.anzahlTeilnehmer = aanzahlTeilnehmer;\r\n\t\tthis.teilnehmerListe = ateilnehmerListe;\r\n\t}\r\n\r\n\r\n\t/*\r\n\tErhalte max_teilnehmer\r\n\t*/\r\n\tgetmax_teilnehmer(){\r\n\t\treturn this.max_teilnehmer;\r\n\t}\r\n\r\n\t/*\r\n\tSetze max_teilnehmer\r\n\t*/\r\n\tsetmax_teilnehmer(amax_teilnehmer){\r\n\t\tthis.max_teilnehmer = amax_teilnehmer;  \r\n\t}\r\n\r\n\t/*\r\n\tErhalte beschreibung\r\n\t*/\r\n\tgetbeschreibung(){\r\n\t\treturn this.beschreibung;\r\n\t}\r\n\t/*\r\n\tSetze beschreibung\r\n\t*/\r\n\tsetbeschreibung(aprojektbeschreibung){\r\n\t\tthis.beschreibung = aprojektbeschreibung;  \r\n\t}\r\n\r\n\t/*\r\n\tErhalte betreuer \r\n\t*/\r\n\tgetbetreuer(){\r\n\t\treturn this.betreuer;\r\n\t}\r\n\t/*\r\n\tSetze betruer\r\n\t*/\r\n\tsetbetreuer(abetreuer){\r\n\t\tthis.betreuer = abetreuer;  \r\n\t}\r\n\t/*\r\n\tErhalte externer_partner\r\n\t*/\r\n\tgetexterner_partner(){\r\n\t\treturn this.externer_partner;\r\n\t}\r\n\t/*\r\n\tSetze externer_partner\r\n\t*/\r\n\tsetexterner_partner(aexterner_partner){\r\n\t\tthis.externer_partner = aexterner_partner;  \r\n\t}\r\n\t/*\r\n\tErhalte woechentlich\r\n\t*/\r\n\tgetwoechentlich(){\r\n\t\treturn this.woechentlich;\r\n\t}\r\n\t/*\r\n\tSetze woechentlich\r\n\t*/\r\n\tsetwoechentlich(awoechentlich){\r\n\t\tthis.woechentlich = awoechentlich;  \r\n\t}\r\n\t/*\r\n\tErhalte anzahl_block_vor\r\n\t*/\r\n\tgetanzahl_block_vor(){\r\n\t\treturn this.anzahl_block_vor;\r\n\t}\r\n\t/*\r\n\tSetze anzahl_block_vor\r\n\t*/\r\n\tsetanzahl_block_vor(aanzahl_block_vor){\r\n\t\tthis.anzahl_block_vor = aanzahl_block_vor;  \r\n\t}\t\r\n\t/*\r\n\tErhalte anzahl_block_in\r\n\t*/\r\n\tgetanzahl_block_in(){\r\n\t\treturn this.anzahl_block_in;\r\n\t}\r\n\t/*\r\n\tSetze anzahl_block_in\r\n\t*/\r\n\tsetanzahl_block_in(aanzahl_block_in){\r\n\t\tthis.anzahl_block_in = aanzahl_block_in;  \r\n\t}\r\n\t/*\r\n\tErhalte praeferierte_block\r\n\t*/\r\n\tgetpraeferierte_block(){\r\n\t\treturn this.praeferierte_block;\r\n\t}\r\n\t/*\r\n\tSetze praeferierte_block\r\n\t*/\r\n\tsetpraeferierte_block(apraeferierte_block){\r\n\t\tthis.praeferierte_block = apraeferierte_block;  \r\n\t}\r\n\t/*\r\n\tErhalte bes_raum\r\n\t*/\r\n\tgetbes_raum(){\r\n\t\treturn this.bes_raum;\r\n\t}\r\n\t/*\r\n\tSetze bes_raum\r\n\t*/\r\n\tsetbes_raum(abes_raum){\r\n\t\tthis.bes_raum = abes_raum;  \r\n\t}\r\n\t/*\r\n\tErhalte raum\r\n\t*/\r\n\tgetraum(){\r\n\t\treturn this.raum;\r\n\t}\r\n\t/*\r\n\tSetze raum\r\n\t*/\r\n\tsetraum(araum){\r\n\t\tthis.raum = araum;  \r\n\t}\r\n\t/*\r\n\tErhalte sprache\r\n\t*/\r\n\tgetsprache(){\r\n\t\treturn this.sprache;\r\n\t}\r\n\t/*\r\n\tSetze sprache\r\n\t*/\r\n\tsetsprache(asprache){\r\n\t\tthis.sprache = asprache;  \r\n\t}\r\n\t/*\r\n\tErhalte dozent\r\n\t*/\r\n\tgetdozent(){\r\n\t\treturn this.dozent;\r\n\t}\r\n\t/*\r\n\tSetze dozent\r\n\t*/\r\n\tsetdozent(adozent){\r\n\t\tthis.dozent = adozent;\r\n\t}\r\n\r\n\t/*\r\n\tErhalte aktuellen Zustand\r\n\t*/\r\n\tgetAktuellerZustand(){\r\n\t\treturn this.aktueller_zustand;\r\n\t}\r\n\t/*\r\n\tSetze aktuellen Zustand\r\n\t*/\r\n\tsetAktuellerZustand(azustand){\r\n\t\tthis.aktueller_zustand = azustand;  \r\n\t}\r\n\r\n\t/*\r\n\tErhalte  Halbjahr\r\n\t*/\r\n\tgetHalbjahr(){\r\n\t\treturn this.halbjahr;\r\n\t}\r\n\r\n    /*\r\n\tSetze  Halbjahr\r\n\t*/\r\n\tsetHalbjahr(ahalbjahr){\r\n\t\tthis.halbjahr = ahalbjahr;\r\n\t}\r\n\t\t\t/*\r\n\tErhalte  Art\r\n\t*/\r\n\tgetArt(){\r\n\t\treturn this.art;\r\n\t}\r\n\r\n    /*\r\n\tSetze  Art\r\n\t*/\r\n\tsetArt(aart){\r\n\t\tthis.art = aart;\r\n\t}\r\n\r\n    /*\r\n\tErhalte Anzahl Teilnehmer\r\n\t*/\r\n\tgetAnzahlTeilnehmer(){\r\n\t\treturn this.anzahlTeilnehmer;\r\n\t}\r\n\r\n    /*\r\n\tSetze Anzahl Teilnehmer\r\n\t*/\r\n\tsetAnzahlTeilnehmer(aanzahlTeilnehmer){\r\n\t\tthis.anzahlTeilnehmer = aanzahlTeilnehmer;\r\n\t}\r\n\r\n\t/*\r\n\tErhalte TeilnehmerListe\r\n\t*/\r\n\tgetTeilnehmerListe(){\r\n\t\treturn this.teilnehmerListe;\r\n\t}\r\n\r\n    /*\r\n\tSetze TeilnehmerListe\r\n\t*/\r\n\tsetTeilnehmerListe(ateilnehmerListe){\r\n\t\tthis.teilnehmerListe = ateilnehmerListe;\r\n\t}\r\n\r\n\t/*\r\n\tErhalte Anzahl ECTS\r\n\t*/\r\n\tgetECTS(){\r\n\t\treturn this.ects;\r\n\t}\r\n\r\n    /*\r\n\tSetze Anzahl ECTS\r\n\t*/\r\n\tsetECTS(aects){\r\n\t\tthis.ects = aects;\r\n\t}\r\n\t\r\n\t//Return Array bzw. Objekt von Projekten aus einem JSON\r\n\tstatic fromJSON(projekte) {\r\n\t\tlet results = null;\r\n\t\tif (Array.isArray(projekte)) {\r\n\t\t\tresults = [];\r\n\t\t\tprojekte.forEach((c) => {\r\n\t\t\t\tObject.setPrototypeOf(c, ProjektBO.prototype);\r\n\t\t\t\tresults.push(c);\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\t// Es gibt wohl nur ein Objekt\r\n\t\t\tlet c = projekte;\r\n\t\t\tObject.setPrototypeOf(c, ProjektBO.prototype);\r\n\t\t\tresults = c;\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n}","import NamedBusinessObject from './NamedBusinessObject';\r\n\r\n\r\nexport default class PersonBO extends NamedBusinessObject{\r\n\r\n\tconstructor(aemail, agoogle_user_id, arolle){\r\n        super();\r\n        this.email = aemail;\r\n        this.google_user_id = agoogle_user_id;\r\n        this.rolle = arolle;\r\n    }\r\n    /*\r\n\terhalte \r\n\t*/\r\n\tgetemail(){\r\n        return this.email;\r\n    }\r\n    /*\r\n\tsetze \r\n\t*/\r\n    setemail(aemail){\r\n        this.email = aemail;\r\n    }\r\n    /*\r\n\terhalte \r\n\t*/\r\n    getgoogle_user_id(){\r\n        return this.google_user_id;\r\n    }\r\n    /*\r\n\tsetze \r\n\t*/\r\n    setgoogle_user_id(agoogle_user_id){\r\n        this.google_user_id = agoogle_user_id;\r\n    }\r\n    /*\r\n\terhalte \r\n\t*/\r\n    getrolle(){\r\n        return this.rolle;\r\n    }\r\n    /*\r\n\tsetze \r\n\t*/\r\n    setrolle(arolle){\r\n        this.rolle = arolle;\r\n    }\r\n    \r\n    /** \r\n   * Returns an Array of PersonBOs from a given JSON structure\r\n   */\r\n    static fromJSON(personen) {\r\n\t\tlet results = null;\r\n\t\tif (Array.isArray(personen)) {\r\n\t\t\tresults = [];\r\n\t\t\tpersonen.forEach((c) => {\r\n\t\t\t\tObject.setPrototypeOf(c, PersonBO.prototype);\r\n\t\t\t\tresults.push(c);\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\t// Es gibt wohl nur ein Objekt\r\n\t\t\tlet c = personen;\r\n\t\t\tObject.setPrototypeOf(c, PersonBO.prototype);\r\n\t\t\tresults = c;\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n\r\n}","import PersonBO from './PersonBO';\r\n\r\n\r\nexport default class StudentBO extends PersonBO{\r\n\r\n\tconstructor(amat_nr, akuerzel){\r\n        super();\r\n        this.mat_nr = amat_nr;\r\n        this.kuerzel = akuerzel;\r\n\t}\r\n\r\n\t/*\r\n\tErhalte \r\n\t*/\r\n\tgetmat_nr(){\r\n        return this.mat_nr;\r\n    }\r\n\r\n\t/*\r\n\tsetze \r\n\t*/\r\n    setmat_nr(amat_nr){\r\n        this.mat_nr = amat_nr;\r\n    }\r\n\t/*\r\n\tErhalte \r\n\t*/\r\n    getkuerzel(){\r\n        return this.kuerzel;\r\n    }\r\n\t/*\r\n\tsetze \r\n\t*/\r\n    setkuerzel(akuerzel){\r\n        this.kuerzel = akuerzel;\r\n\t}\r\n\t\r\n\t\r\n\t/** \r\n   * Returns an Array of StudentBOs from a given JSON structure\r\n   */\r\n    static fromJSON(studenten) {\r\n\t\tlet results = null;\r\n\t\tif (Array.isArray(studenten)) {\r\n\t\t\tresults = [];\r\n\t\t\tstudenten.forEach((c) => {\r\n\t\t\t\tObject.setPrototypeOf(c, StudentBO.prototype);\r\n\t\t\t\tresults.push(c);\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\t// Es gibt wohl nur ein Objekt\r\n\t\t\tlet c = studenten;\r\n\t\t\tObject.setPrototypeOf(c, StudentBO.prototype);\r\n\t\t\tresults = c;\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n\r\n}","import BusinessObject from \"./BusinessObject\";\r\n\r\nexport default class TeilnahmeBO extends BusinessObject{\r\n\r\n\tconstructor(ateilnehmer, alehrangebot, aanrechnung, aresultat){\r\n        super();\r\n        this.teilnehmer = ateilnehmer;\r\n\t\tthis.lehrangebot = alehrangebot;\r\n\t\tthis.anrechnung = aanrechnung;\r\n\t\tthis.resultat = aresultat;\r\n    }\r\n    \r\n\t/*\r\n\tErhalte \r\n\t*/\r\n\tgetteilnehmer(){\r\n\t\treturn this.teilnehmer;\r\n\t}\r\n\t/*\r\n\tSetze \r\n\t*/\r\n\tsetteilnehmer(ateilnehmer){\r\n\t\tthis.teilnehmer = ateilnehmer;  \r\n    }\r\n    \t/*\r\n\tErhalte \r\n\t*/\r\n\tgetlehrangebot(){\r\n\t\treturn this.lehrangebot;\r\n\t}\r\n\t/*\r\n\tSetze \r\n\t*/\r\n\tsetlehrangebot(alehrangebot){\r\n\t\tthis.lehrangebot = alehrangebot;  \r\n\t}\r\n\t \t/*\r\n\tErhalte \r\n\t*/\r\n\tgetAnrechnung(){\r\n\t\treturn this.anrechnung;\r\n\t}\r\n\t/*\r\n\tSetze \r\n\t*/\r\n\tsetAnrechnung(aanrechnung){\r\n\t\tthis.anrechnung = aanrechnung;  \r\n\t}\r\n\t \t/*\r\n\tErhalte \r\n\t*/\r\n\tgetresultat(){\r\n\t\treturn this.resultat;\r\n\t}\r\n\t/*\r\n\tSetze \r\n\t*/\r\n\tsetResultat(aresultat){\r\n\t\tthis.resultat = aresultat;  \r\n    }\r\n\t\r\n\t/** \r\n   * Returns an Array of TeilnahmeBOs from a given JSON structure\r\n   */\r\n    static fromJSON(teilnahmen) {\r\n\t\tlet results = null;\r\n\t\tif (Array.isArray(teilnahmen)) {\r\n\t\t\tresults = [];\r\n\t\t\tteilnahmen.forEach((c) => {\r\n\t\t\t\tObject.setPrototypeOf(c, TeilnahmeBO.prototype);\r\n\t\t\t\tresults.push(c);\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\t// Es gibt wohl nur ein Objekt\r\n\t\t\tlet c = teilnahmen;\r\n\t\t\tObject.setPrototypeOf(c, TeilnahmeBO.prototype);\r\n\t\t\tresults = c;\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n}\r\n","import BusinessObject from \"./BusinessObject\";\r\n\r\n/*\r\nRealisierung eines BewertungsBO. Dieses besitzt eine Note\r\n*/\r\n\r\nexport default class BewertungBO extends BusinessObject{\r\n\r\n\tconstructor(anote){\r\n        super();\r\n        this.note = anote;\r\n    }\r\n    \r\n\t/*\r\n\tErhalte Note\r\n\t*/\r\n\tgetnote(){\r\n\t\treturn this.note;\r\n\t}\r\n\t/*\r\n\tSetze Note\r\n\t*/\r\n\tsetnote(anote){\r\n\t\tthis.note = anote;  \r\n\t}\r\n\t\r\n\t//Return Array bzw. Objekt von Bewertungen aus einem JSON\r\n    static fromJSON(bewertungen) {\r\n\t\tlet results = null;\r\n\t\tif (Array.isArray(bewertungen)) {\r\n\t\t\tresults = [];\r\n\t\t\tbewertungen.forEach((c) => {\r\n\t\t\t\tObject.setPrototypeOf(c, BewertungBO.prototype);\r\n\t\t\t\tresults.push(c);\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\t// Es gibt wohl nur ein Objekt\r\n\t\t\tlet c = bewertungen;\r\n\t\t\tObject.setPrototypeOf(c, BewertungBO.prototype);\r\n\t\t\tresults = c;\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n}\r\n","import NamedBusinessObject from \"./NamedBusinessObject\";\r\n\r\nexport default class ModulBO extends NamedBusinessObject{\r\n\r\n\tconstructor(aedv_nr){\r\n        super();\r\n        this.edv_nr = aedv_nr;\r\n    } \r\n\t/*\r\n\tErhalte \r\n\t*/\r\n\tgetEdv_nr(){\r\n\t\treturn this.edv_nr;\r\n\t}\r\n\t/*\r\n\tSetze \r\n\t*/\r\n\tsetEdv_nr(aedv_nr){\r\n\t\tthis.edv_nr = aedv_nr;  \r\n    }\r\n\r\n\t//Return Array bzw. Objekt von Modulen aus einem JSON\r\n    static fromJSON(module) {\r\n\t\tlet results = null;\r\n\t\tif (Array.isArray(module)) {\r\n\t\t\tresults = [];\r\n\t\t\tmodule.forEach((c) => {\r\n\t\t\t\tObject.setPrototypeOf(c, ModulBO.prototype);\r\n\t\t\t\tresults.push(c);\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\t// Es gibt wohl nur ein Objekt\r\n\t\t\tlet c = module;\r\n\t\t\tObject.setPrototypeOf(c, ModulBO.prototype);\r\n\t\t\tresults = c;\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n}\r\n","import NamedBusinessObject from \"./NamedBusinessObject\";\r\n\r\nexport default class SemesterBO extends NamedBusinessObject{\r\n\r\n\t/*\r\n\tconstructor(){\r\n        super();\r\n    }\r\n    */\r\n\t\r\n\t/** \r\n   * Returns an Array of SemesterBOs from a given JSON structure\r\n   */\r\n    static fromJSON(semester) {\r\n\t\tlet results = null;\r\n\t\tif (Array.isArray(semester)) {\r\n\t\t\tresults = [];\r\n\t\t\tsemester.forEach((c) => {\r\n\t\t\t\tObject.setPrototypeOf(c, SemesterBO.prototype);\r\n\t\t\t\tresults.push(c);\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\t// Es gibt wohl nur ein Objekt\r\n\t\t\tlet c = semester;\r\n\t\t\tObject.setPrototypeOf(c, SemesterBO.prototype);\r\n\t\t\tresults = c;\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n}\r\n","import NamedBusinessObject from './NamedBusinessObject';\r\n\r\nexport default class ProjektartBO extends NamedBusinessObject{\r\n\r\n\tconstructor(asws, aects){\r\n\t\tsuper();\r\n\t\tthis.sws = asws;\r\n\t\tthis.ects = aects;\r\n\t}\r\n\r\n\t/*\r\n\terhalte \r\n\t*/\r\n\tget_sws(){\r\n\t\treturn this.sws;\r\n\t}\r\n\t/*\r\n\tsetze \r\n\t*/\r\n\tset_sws(asws){\r\n\t\tthis.sws = asws\r\n\t}\r\n\t/*\r\n\terhalte \r\n\t*/\r\n\tget_ects(){\r\n\t\treturn this.ects;\r\n\t}\r\n\t/*\r\n\tsetze \r\n\t*/\r\n\tset_ects(aects){\r\n\t\tthis.ects = aects;\r\n\t}\r\n\r\n\t/** \r\n   * Returns an Array of ProjektartBOs from a given JSON structure\r\n   */\r\n\tstatic fromJSON(projektart) {\r\n\t\tlet results = null;\r\n\t\tif (Array.isArray(projektart)) {\r\n\t\t\tresults = [];\r\n\t\t\tprojektart.forEach((c) => {\r\n\t\t\t\tObject.setPrototypeOf(c, ProjektartBO.prototype);\r\n\t\t\t\tresults.push(c);\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\t// Es gibt wohl nur ein Objekt\r\n\t\t\tlet c = projektart;\r\n\t\t\tObject.setPrototypeOf(c, ProjektartBO.prototype);\r\n\t\t\tresults = c;\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n}","import ProjektBO from './ProjektBO';\r\nimport StudentBO from './StudentBO';\r\nimport PersonBO from './PersonBO';\r\nimport TeilnahmeBO from './TeilnahmeBO';\r\nimport BewertungBO from './BewertungBO';\r\nimport ModulBO from './ModulBO';\r\nimport SemesterBO from './SemesterBO';\r\nimport ProjektartBO from './ProjektartBO';\r\n\r\n/*\r\nSingleton Abstarktion des backend REST interfaces. Es handelt sich um eine access methode\r\n*/\r\n\r\nexport default class ElectivAPI {\r\n\r\n\t//singletone instance\r\n\tstatic #api = null;\r\n\r\n\t// Lokales Python backend\r\n\t#ElectivServerBaseURL = '/electivApp';\r\n\r\n\t// Lokales Python backend\r\n\t//#ElectivServerBaseURL = 'https://wahlfachapp.oa.r.appspot.com/electivApp';\r\n\r\n\t//Projekte anzeigen fuer Student\r\n\t#getProjekteURL = () => `${this.#ElectivServerBaseURL}/projekte`;\r\n\t#getProjekteByZustandURL = (id) => `${this.#ElectivServerBaseURL}/projekte/zustand/${id}`;\r\n\t#setZustandAtProjekt = (projektId, zustandId) => `${this.#ElectivServerBaseURL}/projekte/zustand?projektId=${projektId}&zustandId=${zustandId}`;\r\n\t#addProjekteURL = () => `${this.#ElectivServerBaseURL}/projekte`;\r\n\t#getProjekteByIDURL = (id) => `${this.#ElectivServerBaseURL}/projekte/${id}`;\r\n\r\n\t//Projekt löschen\r\n\t#deleteProjektURL = (id) => `${this.#ElectivServerBaseURL}/projekt/${id}`;\r\n\r\n\t#searchProjektURL = (projektname) => `${this.#ElectivServerBaseURL}/projekte_by_name/${projektname}`;\r\n\r\n\t// ------------------------Projekte bearbeiten/hinzufugen---------------------------\r\n\r\n\r\n\t// ---------------------------------------------------------------------------------\r\n\r\n\t#addProjektPendingURL = () => `${this.#ElectivServerBaseURL}/projektePending`;\r\n\t\r\n\t#updateProjektPendingURL = () => `${this.#ElectivServerBaseURL}/projektePending`;\r\n\r\n\t#getProjektePendingURL = () => `${this.#ElectivServerBaseURL}/projektePending`;\r\n\r\n\t//Projekt nach ID bekommen\r\n\t#getProjektURL = (id) => `${this.#ElectivServerBaseURL}/projekt/${id}`;\r\n\r\n\t//Projekte nach Dozent ID und Zustand bekommen\r\n\t#getProjekteByZustandByDozentURL = (zustand_id,dozent_id) => `${this.#ElectivServerBaseURL}/projekte/zustand/${zustand_id}/dozent/${dozent_id}`;\r\n\r\n\t//alle Teilnahmen eines Students anzeigen\r\n\t#getTeilnahmenURL = (id) => `${this.#ElectivServerBaseURL}/teilnahmen/${id}`;\r\n\r\n\t//Teilnahmen eines Students nach Semester anzeigen\r\n\t#getTeilnahmenBySemesterURL = (student_id, semester_id) => `${this.#ElectivServerBaseURL}/teilnahmenbysemester/${student_id}/${semester_id}`;\r\n\r\n\t//Alle Teilnahmen einer EDV Nummer für ein bestimmtes Semester\r\n\t#getTeilnahmen_by_modul_und_semesterURL = (modul_id, semester_id) => `${this.#ElectivServerBaseURL}/teilnahmen/${modul_id}/${semester_id}`\r\n  \r\n\t//Teilnahme wählen\r\n\t#postTeilnahmeURL = (lehrangebotId,teilnehmerId) => `${this.#ElectivServerBaseURL}/teilnahme?lehrangebotId=${lehrangebotId}&teilnehmerId=${teilnehmerId}`;\r\n\r\n\t//Teilnahme löschen\r\n\t#deleteTeilnahmeURL = (lehrangebotId,teilnehmerId) => `${this.#ElectivServerBaseURL}/teilnahme?lehrangebotId=${lehrangebotId}&teilnehmerId=${teilnehmerId}`;\r\n\r\n\t//getPerson: id\r\n\t#getPersonURL = (id) => `${this.#ElectivServerBaseURL}/person/${id}`;\r\n\r\n\t//getPerson: google_user_id\r\n\t#getPersonByGoogleIDURL = (google_user_id) => `${this.#ElectivServerBaseURL}/personbygoogle/${google_user_id}`;\r\n\r\n\t//getStudent: google_user_id\r\n\t#getStudentByGoogleIDURL = (google_user_id) => `${this.#ElectivServerBaseURL}/studentbygoogle/${google_user_id}`;\r\n\t\r\n\t//getStudent: id\r\n\t#getStudentByIDURL = (id) => `${this.#ElectivServerBaseURL}/student/${id}`;\r\n\r\n\t//Bewertung nach Id bekommen\r\n\t#getBewertungURL = (id) => `${this.#ElectivServerBaseURL}/bewertung/${id}`;\r\n\r\n\t//Alle Bewertungen (Noten) bekommen\r\n\t#getBewertungenURL = () => `${this.#ElectivServerBaseURL}/bewertungen`;\r\n\r\n\t//Alle Module bekommen\r\n\t#getModuleURL = () => `${this.#ElectivServerBaseURL}/module`;\r\n\r\n\t//Add Modul\r\n\t#addModulURL = () => `${this.#ElectivServerBaseURL}/module`;\r\n\r\n\t//Update Modul\r\n\t#updateModulURL = () => `${this.#ElectivServerBaseURL}/module`\r\n\r\n\t//Delete Modul\r\n\t#deleteModulURL = (id) => `${this.#ElectivServerBaseURL}/module?id=${id}`;\r\n\r\n    //Update Student\r\n\t#updateStudentURL = (id,name,matrNr) => `${this.#ElectivServerBaseURL}/studenten?id=${id}&name=${name}&matrNr=${matrNr}`;\r\n\r\n\t//Update User\r\n\t#updateUserURL = (id,name,email) => `${this.#ElectivServerBaseURL}/personen?id=${id}&name=${name}&email=${email}`;\r\n\r\n\t//Delete User\r\n\t#deleteUserURL = (id) => `${this.#ElectivServerBaseURL}/student/${id}`;\r\n\r\n\t//Module nach Id bekommen\r\n\t#getModule_by_projekt_idURL = (id) => `${this.#ElectivServerBaseURL}/modul/${id}`;\r\n\r\n\t//für ein Projekt wählbare Module in DB 'projekte_hat_module' einfügen \r\n\t#postProjekte_hat_moduleURL = (projekt_id, module) => `${this.#ElectivServerBaseURL}/projekte_hat_module?projekt_id=${projekt_id}&module=${module}`;\r\n\r\n\t//für ein Projekt wählbare Module in DB 'projekte_hat_module' einfügen \r\n\t#updateProjekte_hat_moduleURL = (projekt_id, module) => `${this.#ElectivServerBaseURL}/projekte_hat_module?projekt_id=${projekt_id}&module=${module}`;\r\n\r\n\t#updateTeilnahmeURL = (id) => `${this.#ElectivServerBaseURL}/teilnahme/${id}`;\r\n\r\n\t//Alle Semester bekommen\r\n\t#getSemesterURL = () => `${this.#ElectivServerBaseURL}/semester`;\r\n\r\n\t//Semester nach projekt Id bekommen\r\n\t#getSemester_by_idURL = (id) => `${this.#ElectivServerBaseURL}/semester/${id}`;\r\n\r\n\t//Add Semester\r\n\t#addSemesterURL = () => `${this.#ElectivServerBaseURL}/semester`;\r\n\r\n\t//Update Semester\r\n\t#updateSemesterURL = () => `${this.#ElectivServerBaseURL}/semester`\r\n\r\n\t//Delete Semester\r\n\t#deleteSemesterURL = (id) => `${this.#ElectivServerBaseURL}/semester?id=${id}`;\r\n\r\n\t//Alle Semester eines Studenten bekommen\r\n\t#getSemesterOfStudentURL = (id) => `${this.#ElectivServerBaseURL}/semesterofstudent/${id}`\r\n\r\n\t//Studenten eines Projekts bekommen\r\n\t#getStudentenByProjektIdURL = (id) => `${this.#ElectivServerBaseURL}/student/projekt/${id}`\r\n\t\r\n\t//Teilnahmen eines Projekts bekommen\r\n    #getTeilnahmenByProjektIdURL = (id) => `${this.#ElectivServerBaseURL}/teilnahmen/projekt/${id}`\r\n\r\n    //erhalte Projektarten nach ID\r\n\t#getProjektartByIDURL = (id) => `${this.#ElectivServerBaseURL}/projektart/${id}`\r\n\t\r\n\t//erhalte alle Projektarten\r\n    #getProjektartURL = () => `${this.#ElectivServerBaseURL}/projektart`\r\n\r\n    //POSTE eine neue Projektart\r\n    #addProjektartURL = () => `${this.#ElectivServerBaseURL}/projektart`;\r\n\r\n    //Update Projektart\r\n\t#updateProjektartURL = () => `${this.#ElectivServerBaseURL}/projektart`\r\n\r\n    //Loesche eine Projektart nach ID\r\n    #deleteProjektartURL = (id) => `${this.#ElectivServerBaseURL}/projektart?id=${id}`;\r\n  \r\n\t//Alle Studenten bekommen\r\n\t#getStudentenURL = () => `${this.#ElectivServerBaseURL}/studenten`;\r\n\r\n\t//Alle User bekommen\r\n\t#getUserURL = () => `${this.#ElectivServerBaseURL}/personen`;\r\n\r\n\t/*\r\n\tSingleton/Einzelstuck instanz erhalten\r\n\t*/\r\n\tstatic getAPI() {\r\n\t\tif (this.#api == null) {\r\n\t\t\tthis.#api = new ElectivAPI();\r\n\t\t} \r\n\t\treturn this.#api;\r\n\t}\r\n\r\n\t/*\r\n\tGibt einen Error zuruck auf JSON Basis. fetch() gibt keine Errors wie 404 oder 500 zuruck. Deshaltb die func fetchAdvanced \r\n\t*/\r\n\t#fetchAdvanced = (url, init) => fetch(url, init, {credentials: 'include'})\r\n\t\t.then(res => {\r\n\t\t\t//fetch() gibt keine Errors wie 404 oder 500 zuruck\r\n\t\t\tif (!res.ok) {\r\n\t\t\t\tthrow Error(`${res.status} ${res.statusText}`);\r\n\t\t\t\t//throw Error(`Fail`);\r\n\t\t\t}\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t/*\r\n\tGebe alle BO's zuruck\r\n\t*/\r\n\t\r\n\t//gibt alle Projekte als BO zurück\r\n\tgetProjekte() {\r\n\t\treturn this.#fetchAdvanced(this.#getProjekteURL(),{method: 'GET'}).then((responseJSON) => {\r\n\t\t\tlet projektBOs = ProjektBO.fromJSON(responseJSON);\r\n\t\t\tconsole.info(projektBOs)\r\n\t\t\treturn new Promise(function (resolve){\r\n\t\t\t\tresolve(projektBOs);\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\t//gibt alle Projekte mit der bestimmten Zustand als BO zurück\r\n\tgetProjekteByZustand(zustand) {\r\n\t\t//immer Zustand 1 (neues Projekt) holen\r\n\t\treturn this.#fetchAdvanced(this.#getProjekteByZustandURL(zustand),{method: 'GET'}).then((responseJSON) => {\r\n\t\t\tlet projektBOs = ProjektBO.fromJSON(responseJSON);\r\n\t\t\t// projektBOs.sort((a,b) => (a.ects > b.ects) ? 1: -1); //Sortier alle Objecte im array nach ects, aufsteigend\r\n\t\t\treturn new Promise(function (resolve){\r\n\t\t\t\tresolve(projektBOs);\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\t//gibt alle Projektarten als BO zurück\r\n\tgetProjektart() {\r\n\t\treturn this.#fetchAdvanced(this.#getProjektartURL(), {method: 'GET'}).then((responseJSON) => {\r\n\t\t\tlet projektartBos = ProjektartBO.fromJSON(responseJSON);\r\n\t\t\treturn new Promise(function (resolve){\r\n\t\t\t\tresolve(projektartBos);\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\t//gibt die Projektart mit der bestimmten ID als BO zurück\r\n\tgetProjektartById(id) {\r\n\t\treturn this.#fetchAdvanced(this.#getProjektartByIDURL(id),{method: 'GET'}).then((responseJSON) => {\r\n\t\t\tlet projektartBO = ProjektartBO.fromJSON(responseJSON);\r\n\t\t\treturn new Promise(function (resolve){\r\n\t\t\t\tresolve(projektartBO);\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\t// Eine Projektart entfernen\r\n\tdeleteProjektart(id){\r\n\t\treturn this.#fetchAdvanced(this.#deleteProjektartURL(id),{method: 'DELETE'})\r\n\t}\r\n\r\n\t//Eine Projektart hinzufügen\r\n\taddProjektart(projektartBO) {\r\n\t\treturn this.#fetchAdvanced(this.#addProjektartURL(), {\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: {\r\n\t\t\t\t'Accept': 'application/json, text/plain',\r\n\t\t\t\t'Content-type': 'application/json',\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify(projektartBO)\r\n\t\t}).then((responseJSON) => {\r\n\t\t\t// zuruck kommt ein array, wir benoetigen aber nur ein Objekt aus dem array\r\n\t\t\tlet responseProjektartBO = ProjektartBO.fromJSON(responseJSON);\r\n\t\t\treturn new Promise(function (resolve) {\r\n\t\t\t\tresolve(responseProjektartBO);\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\t//eine Projektart bearbeiten/updaten\r\n\tupdateProjektart(projektartBO){\r\n\t\treturn this.#fetchAdvanced(this.#updateProjektartURL(), {\r\n\t\t\tmethod: 'PUT',\r\n\t\t\theaders: {\r\n\t\t\t\t'Accept': 'application/json, text/plain',\r\n\t\t\t\t'Content-type': 'application/json',\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify(projektartBO)\r\n\t\t}).then((responseJSON) => {\r\n\t\t\t// zuruck kommt ein array, wir benoetigen aber nur ein Objekt aus dem array\r\n\t\t\tlet responseProjektartBO = ProjektartBO.fromJSON(responseJSON);\r\n\t\t\treturn new Promise(function (resolve) {\r\n\t\t\t\tresolve(responseProjektartBO);\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\t//gibt alle Projekte mit dem bestimmten Projekt-Zustand von dem Dozenten als BO zurück\r\n\tgetProjekteByZustandByDozent(zustand_id,dozent_id) {\r\n\t\t//immer Zustand 1 (neues Projekt) holen\r\n\t\treturn this.#fetchAdvanced(this.#getProjekteByZustandByDozentURL(zustand_id,dozent_id),{method: 'GET'}).then((responseJSON) => {\r\n\t\t\tlet projektBOs = ProjektBO.fromJSON(responseJSON);\r\n\t\t\tprojektBOs.sort((a,b) => (a.ects > b.ects) ? 1: -1); //Sortier alle Objecte im array nach ects, aufsteigend\r\n\t\t\treturn new Promise(function (resolve){\r\n\t\t\t\tresolve(projektBOs);\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\t//setzt den Zustand eines Projekts mit der bestimmten ProjektID auf einen neuen Zustand\r\n\tsetZustandAtProjekt(projektId, zustandId) { \r\n\t\t//immer Zustand 1 (neues Projekt) holen\r\n\t\treturn this.#fetchAdvanced(this.#setZustandAtProjekt(projektId,zustandId),{method: 'PUT'}).then((responseJSON) => {\r\n\t\t\tlet projektBOs = ProjektBO.fromJSON(responseJSON);\r\n\t\t\tconsole.info(projektBOs)\r\n\t\t\treturn new Promise(function (resolve){\r\n\t\t\t\tresolve(projektBOs);\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\t//fügt ein Projekt als BO hinzu\r\n\taddProjekt(projektBO) {\r\n\t\treturn this.#fetchAdvanced(this.#addProjektPendingURL(), {\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: {\r\n\t\t\t\t'Accept': 'application/json, text/plain',\r\n\t\t\t\t'Content-type': 'application/json',\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify(projektBO)\r\n\t\t}).then((responseJSON) => {\r\n\t\t\t// zuruck kommt ein array, wir benoetigen aber nur ein Objekt aus dem array\r\n\t\t\tlet responseProjektBO = ProjektBO.fromJSON(responseJSON);\r\n\t\t\treturn new Promise(function (resolve) {\r\n\t\t\t\tresolve(responseProjektBO);\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\t//Projekte im Zustand neu bekommen\r\n\tgetPendingProjekte() {\r\n\t\treturn this.#fetchAdvanced(this.#getProjektePendingURL(),{method: 'GET'}).then((responseJSON) => {\r\n\t\t\tlet projektBOs = ProjektBO.fromJSON(responseJSON);\r\n\t\t\tconsole.info(projektBOs)\r\n\t\t\treturn new Promise(function (resolve){\r\n\t\t\t\tresolve(projektBOs);\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\t//gibt das Projekt mit der bestimmten ProjektID als BO zurück\r\n\tgetProjekt(id){\r\n\t\treturn this.#fetchAdvanced(this.#getProjektURL(id)).then((responseJSON) => {\r\n\t\t\tlet projektBO = ProjektBO.fromJSON(responseJSON);\r\n\t\t\tconsole.info(projektBO)\r\n\t\t\treturn new Promise(function (resolve){\r\n\t\t\t\tresolve(projektBO)\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\t//Projektdaten updaten/bearbeiten\r\n\tupdateProjekt(projektBO){\r\n\t\treturn this.#fetchAdvanced(this.#updateProjektPendingURL(), {\r\n\t\t\tmethod: 'PUT',\r\n\t\t\theaders: {\r\n\t\t\t\t'Accept': 'application/json, text/plain',\r\n\t\t\t\t'Content-type': 'application/json',\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify(projektBO)\r\n\t\t}).then((responseJSON) => {\r\n\t\t\t// zuruck kommt ein array, wir benoetigen aber nur ein Objekt aus dem array\r\n\t\t\tlet responseProjektBO = ProjektBO.fromJSON(responseJSON);\r\n\t\t\treturn new Promise(function (resolve) {\r\n\t\t\t\tresolve(responseProjektBO);\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\t//Projekt löschen\r\n\tdeleteProjekt(id){\r\n\t\treturn this.#fetchAdvanced(this.#deleteProjektURL(id),{method: 'DELETE'})\r\n\t}\r\n\r\n\t//gibt die Person mit der bestimmten ID als BO zurück\r\n\tgetPerson(id){\r\n\t\treturn this.#fetchAdvanced(this.#getPersonURL(id)).then((responseJSON) => {\r\n\t\t\tlet personBO = PersonBO.fromJSON(responseJSON);\r\n\t\t\tconsole.info(personBO)\r\n\t\t\treturn new Promise(function (resolve){\r\n\t\t\t\tresolve(personBO)\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\t//gibt alle Teilnahmen mit der bestimmten StudentenID als BO zurück\r\n\tgetTeilnahmen(studentID){\r\n\t\treturn this.#fetchAdvanced(this.#getTeilnahmenURL(studentID)).then((responseJSON) => {\r\n\t\t\tlet teilnahmeBOs = TeilnahmeBO.fromJSON(responseJSON);\r\n\t\t\tconsole.info(teilnahmeBOs)\r\n\t\t\treturn new Promise(function (resolve){\r\n\t\t\t\tresolve(teilnahmeBOs)\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\r\n\r\n\t//gibt alle Teilnahmen mit der bestimmten ModulID und SemesterID als BO zurück\r\n\tgetTeilnahmen_by_modul_und_semester(modul_id, semester_id){\r\n\t\treturn this.#fetchAdvanced(this.#getTeilnahmen_by_modul_und_semesterURL(modul_id, semester_id)).then((responseJSON) => {\r\n\t\t\tlet teilnahmeBOs = TeilnahmeBO.fromJSON(responseJSON);\r\n\t\t\tconsole.info(teilnahmeBOs)\r\n\t\t\treturn new Promise(function (resolve){\r\n\t\t\t\tresolve(teilnahmeBOs)\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\t//gibt alle Teilnahmen mit der bestimmten SemesterID und StudentID als BO zurück\r\n\tgetTeilnahmenBySemester(student_id, semester_id){\r\n\t\treturn this.#fetchAdvanced(this.#getTeilnahmenBySemesterURL(student_id, semester_id)).then((responseJSON) => {\r\n\t\t\tlet teilnahmeBOs = TeilnahmeBO.fromJSON(responseJSON);\r\n\t\t\tconsole.info(teilnahmeBOs)\r\n\t\t\treturn new Promise(function (resolve){\r\n\t\t\t\tresolve(teilnahmeBOs)\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\t//gibt die Person mit der bestimmten GoogleUserID als BO zurück\r\n\tgetPersonByGoogleID(google_user_id){\r\n\t\treturn this.#fetchAdvanced(this.#getPersonByGoogleIDURL(google_user_id)).then((responseJSON) => {\r\n\t\t\tlet personBO = PersonBO.fromJSON(responseJSON);\r\n\t\t\tconsole.info(personBO)\r\n\t\t\treturn new Promise(function (resolve){\r\n\t\t\t\tresolve(personBO)\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\t//gibt den Studenten mit der bestimmten GoogleUserID als BO zurück\t\r\n\tgetStudentByGoogleID(google_user_id){\r\n\t\treturn this.#fetchAdvanced(this.#getStudentByGoogleIDURL(google_user_id)).then((responseJSON) => {\r\n\t\t\tlet studentBO = StudentBO.fromJSON(responseJSON);\r\n\t\t\t// console.info(studentBO)\r\n\t\t\treturn new Promise(function (resolve){\r\n\t\t\t\tresolve(studentBO)\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\t//gibt den Studenten mit der bestimmten StudentenID als BO zurück\r\n\tgetStudentByID(id){\r\n\t\treturn this.#fetchAdvanced(this.#getStudentByIDURL(id)).then((responseJSON) => {\r\n\t\t\tlet studentBO = StudentBO.fromJSON(responseJSON);\r\n\t\t\tconsole.info(studentBO)\r\n\t\t\treturn new Promise(function (resolve){\r\n\t\t\t\tresolve(studentBO)\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\t//setzt die Teilnahme für eine bestimmte LehrangebotID mit der bestimmten StudentID\r\n\tsetTeilnahme(lehrangebotId, studentID){\r\n        //TODO Set User ID\r\n         return this.#fetchAdvanced(this.#postTeilnahmeURL(lehrangebotId, studentID),{method: 'POST'}).then((responseJSON) => {\r\n\r\n\t\t})\r\n\r\n\t}\r\n\r\n\t//löscht den Teilnahme BO mit der bestimmten LehrangebotID und der bestimmten StudentID\r\n\tdeleteTeilnahme(lehrangebotId, studentID){\r\n        //TODO Set User ID\r\n         return this.#fetchAdvanced(this.#deleteTeilnahmeURL(lehrangebotId, studentID),{method: 'DELETE'}).then((responseJSON) => {\r\n\r\n\t\t})\r\n\r\n\t}\r\n\r\n\t//updatet den Teilnahmen BO \r\n\tupdateTeilnahme(teilnahmeBO){\r\n         return this.#fetchAdvanced(this.#updateTeilnahmeURL(teilnahmeBO.getID()),{\r\n\t\t\tmethod: 'PUT',\r\n\t\t\theaders:{\r\n\t\t\t\t'Accept': 'application/json, text/plain',\r\n\t\t\t\t'Content-type': 'application/json',\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify(teilnahmeBO)\r\n\t\t}).then((responseJSON) => {\r\n\t\t\tlet responseTeilnahmeBO = TeilnahmeBO.fromJSON(responseJSON)[0];\r\n\t\t\treturn new Promise(function (resolve){\r\n\t\t\t\tresolve(responseTeilnahmeBO)\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\t//gibt die Bewertung mit der bestimmten ID als BO zurück\r\n\tgetBewertung(id){\r\n\t\treturn this.#fetchAdvanced(this.#getBewertungURL(id)).then((responseJSON) => {\r\n\t\t\tlet bewertungBO = BewertungBO.fromJSON(responseJSON);\r\n\t\t\tconsole.info(bewertungBO)\r\n\t\t\treturn new Promise(function (resolve){\r\n\t\t\t\tresolve(bewertungBO)\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\t//gibt alle Bewertungen als BO zurück\r\n\tgetBewertungen(){\r\n\t\treturn this.#fetchAdvanced(this.#getBewertungenURL()).then((responseJSON) => {\r\n\t\t\tlet bewertungBOs = BewertungBO.fromJSON(responseJSON);\r\n\t\t\tconsole.info(bewertungBOs)\r\n\t\t\treturn new Promise(function (resolve){\r\n\t\t\t\tresolve(bewertungBOs)\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\t//gibt alle Module als BO zurück\r\n\tgetModule(){\r\n\t\treturn this.#fetchAdvanced(this.#getModuleURL()).then((responseJSON) => {\r\n\t\t\tlet modulBOs = ModulBO.fromJSON(responseJSON);\r\n\t\t\tconsole.info(modulBOs)\r\n\t\t\treturn new Promise(function (resolve){\r\n\t\t\t\tresolve(modulBOs)\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\t//Modul hinzufügen\r\n\taddModul(modulBO) {\r\n\t\treturn this.#fetchAdvanced(this.#addModulURL(), {\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: {\r\n\t\t\t\t'Accept': 'application/json, text/plain',\r\n\t\t\t\t'Content-type': 'application/json',\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify(modulBO)\r\n\t\t}).then((responseJSON) => {\r\n\t\t\t// zuruck kommt ein array, wir benoetigen aber nur ein Objekt aus dem array\r\n\t\t\tlet responseModulBO = ModulBO.fromJSON(responseJSON);\r\n\t\t\treturn new Promise(function (resolve) {\r\n\t\t\t\tresolve(responseModulBO);\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\t//Modul updaten/bearbeiten\r\n\tupdateModul(modulBO){\r\n\t\treturn this.#fetchAdvanced(this.#updateModulURL(), {\r\n\t\t\tmethod: 'PUT',\r\n\t\t\theaders: {\r\n\t\t\t\t'Accept': 'application/json, text/plain',\r\n\t\t\t\t'Content-type': 'application/json',\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify(modulBO)\r\n\t\t}).then((responseJSON) => {\r\n\t\t\t// zuruck kommt ein array, wir benoetigen aber nur ein Objekt aus dem array\r\n\t\t\tlet responseModulBO = ModulBO.fromJSON(responseJSON);\r\n\t\t\treturn new Promise(function (resolve) {\r\n\t\t\t\tresolve(responseModulBO);\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\t//Modul löschen\r\n\tdeleteModul(id){\r\n\t\treturn this.#fetchAdvanced(this.#deleteModulURL(id),{method: 'DELETE'})\r\n\t}\r\n\r\n\t//Student updaten\r\n\tupdateStudent(id,name,matrNr){\r\n\t\treturn this.#fetchAdvanced(this.#updateStudentURL(id,name,matrNr), {\r\n\t\t\tmethod: 'PUT',\r\n\t\t\theaders: {\r\n\t\t\t\t'Accept': 'application/json, text/plain',\r\n\t\t\t\t'Content-type': 'application/json',\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\t//User updaten\r\n\tupdateUser(id,name,email){\r\n\t\treturn this.#fetchAdvanced(this.#updateUserURL(id,name,email), {\r\n\t\t\tmethod: 'PUT',\r\n\t\t\theaders: {\r\n\t\t\t\t'Accept': 'application/json, text/plain',\r\n\t\t\t\t'Content-type': 'application/json',\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\t//User löschen\r\n\tdeleteUser(id){\r\n\t\treturn this.#fetchAdvanced(this.#deleteUserURL(id),{method: 'DELETE'})\r\n\t}\r\n\r\n\t//alle Module für ein bestimmtes Projekt bekommen\r\n\tgetModule_by_projekt_id(id){\r\n\t\treturn this.#fetchAdvanced(this.#getModule_by_projekt_idURL(id)).then((responseJSON) => {\r\n\t\t\tlet modulBO = ModulBO.fromJSON(responseJSON);\r\n\t\t\tconsole.info(modulBO)\r\n\t\t\treturn new Promise(function (resolve){\r\n\t\t\t\tresolve(modulBO)\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\t//Wählbare Module eines Projekts erstellen\r\n\tpostProjekte_hat_module(projekt_id, module){\r\n\t   return this.#fetchAdvanced(this.#postProjekte_hat_moduleURL(projekt_id, module),{method: 'POST'})\r\n   }\r\n\r\n   //Wählbare Module eines Projekts updaten\r\n   updateProjekte_hat_module(projekt_id, module){\r\n\t   return this.#fetchAdvanced(this.#updateProjekte_hat_moduleURL(projekt_id, module),{method: 'PUT'})\r\n\t}\r\n\r\n\t//Studenten eines Projekts bekommen\r\n\tgetStudentenByProjektId(id){\r\n\t\treturn this.#fetchAdvanced(this.#getStudentenByProjektIdURL(id)).then((responseJSON) => {\r\n\t\t\tlet studentBOs = StudentBO.fromJSON(responseJSON);\r\n\t\t\tconsole.info(studentBOs)\r\n\t\t\treturn new Promise(function (resolve){\r\n\t\t\t\tresolve(studentBOs)\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\t//gibt die Teilnahmen mit der bestimmten ProjektID als BO zurück\r\n\tgetTeilnahmenByProjektId(id){\r\n\t\treturn this.#fetchAdvanced(this.#getTeilnahmenByProjektIdURL(id)).then((responseJSON) => {\r\n\t\t\tlet teilnahmeBOs = TeilnahmeBO.fromJSON(responseJSON);\r\n\t\t\tconsole.info(teilnahmeBOs)\r\n\t\t\treturn new Promise(function (resolve){\r\n\t\t\t\tresolve(teilnahmeBOs)\r\n\t\t\t})\r\n\t\t})\r\n\t}\t\r\n\r\n\t//gibt die Semester mit der bestimmten SemesterID als BO zurück\r\n\tgetSemester_by_id(id){\r\n\t\treturn this.#fetchAdvanced(this.#getSemester_by_idURL(id)).then((responseJSON) => {\r\n\t\t\tlet semesterBO = SemesterBO.fromJSON(responseJSON);\r\n\t\t\tconsole.info(semesterBO)\r\n\t\t\treturn new Promise(function (resolve){\r\n\t\t\t\tresolve(semesterBO)\r\n\t\t\t})\r\n\t\t})\t\t\r\n\t}\r\n\t//gibt alle Semester als BO zurück\r\n\tgetSemester(){\r\n\t\treturn this.#fetchAdvanced(this.#getSemesterURL()).then((responseJSON) => {\r\n\t\t\tlet semesterBOs = SemesterBO.fromJSON(responseJSON);\r\n\t\t\tconsole.info(semesterBOs)\r\n\t\t\treturn new Promise(function (resolve){\r\n\t\t\t\tresolve(semesterBOs)\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\t//Semester hinzufügen\r\n\taddSemester(semesterBO) {\r\n\t\treturn this.#fetchAdvanced(this.#addSemesterURL(), {\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: {\r\n\t\t\t\t'Accept': 'application/json, text/plain',\r\n\t\t\t\t'Content-type': 'application/json',\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify(semesterBO)\r\n\t\t}).then((responseJSON) => {\r\n\t\t\t// zuruck kommt ein array, wir benoetigen aber nur ein Objekt aus dem array\r\n\t\t\tlet responseSemesterBO = SemesterBO.fromJSON(responseJSON);\r\n\t\t\treturn new Promise(function (resolve) {\r\n\t\t\t\tresolve(responseSemesterBO);\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\t//Semester updaten\r\n\tupdateSemester(semesterBO){\r\n\t\treturn this.#fetchAdvanced(this.#updateSemesterURL(), {\r\n\t\t\tmethod: 'PUT',\r\n\t\t\theaders: {\r\n\t\t\t\t'Accept': 'application/json, text/plain',\r\n\t\t\t\t'Content-type': 'application/json',\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify(semesterBO)\r\n\t\t}).then((responseJSON) => {\r\n\t\t\t// zuruck kommt ein array, wir benoetigen aber nur ein Objekt aus dem array\r\n\t\t\tlet responseSemesterBO = SemesterBO.fromJSON(responseJSON);\r\n\t\t\treturn new Promise(function (resolve) {\r\n\t\t\t\tresolve(responseSemesterBO);\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\t//Semester löschen\r\n\tdeleteSemester(id){\r\n\t\treturn this.#fetchAdvanced(this.#deleteSemesterURL(id),{method: 'DELETE'})\r\n\t}\r\n\r\n\t//Alle Semester eines Studenten bekommen, in der er eine Teilnahme hat\r\n\tgetSemesterOfStudent(id){\r\n\t\treturn this.#fetchAdvanced(this.#getSemesterOfStudentURL(id)).then((responseJSON) => {\r\n\t\t\tlet semesterBOs = SemesterBO.fromJSON(responseJSON);\r\n\t\t\tconsole.info(semesterBOs)\r\n\t\t\treturn new Promise(function (resolve){\r\n\t\t\t\tresolve(semesterBOs)\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\t//gibt alle Studenten als BO zurück\r\n\tgetStudenten(){\r\n\t\treturn this.#fetchAdvanced(this.#getStudentenURL()).then((responseJSON) => {\r\n\t\t\tlet studentBOs = StudentBO.fromJSON(responseJSON);\r\n\t\t\tconsole.info(studentBOs)\r\n\t\t\treturn new Promise(function (resolve){\r\n\t\t\t\tresolve(studentBOs)\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\t//gibt alle Personen als BO zurück\r\n\tgetPersons(){\r\n\r\n\t\treturn this.#fetchAdvanced(this.#getUserURL()).then((responseJSON) => {\r\n\t\t\tlet personBOs = PersonBO.fromJSON(responseJSON);\r\n\t\t\treturn new Promise(function (resolve){\r\n\t\t\t\tresolve(personBOs)\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Button } from '@material-ui/core';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport AlertTitle from '@material-ui/lab/AlertTitle';\r\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\r\n\r\n\r\n/*\r\nif error object != null -> show context sensitive error message\r\n*/\r\n\r\nclass ContextErrorMessage extends Component {\r\n  #standardText = 'Something went wrong. Some highly trained monkeys trying to solve the problem right now!';\r\n\r\n  // Renders the ContextErrorMessage if error object is not null \r\n  render() {\r\n    const { classes, error, contextErrorMsg, onReload } = this.props;\r\n\r\n    return (\r\n      (error !== null) ?\r\n        <Alert severity='error' className={classes.root}>\r\n          <div>\r\n            {this.#standardText}\r\n          </div>\r\n          <AlertTitle>\r\n            {contextErrorMsg}\r\n          </AlertTitle>\r\n          <div className={classes.margins}>\r\n            Error message (for debugging only) is:\r\n        </div>\r\n          <div>\r\n            {error.message}\r\n          </div>\r\n          {\r\n            onReload ?\r\n              <div className={classes.margins}>\r\n                <Button variant='contained' color='primary' startIcon={<AutorenewIcon />} onClick={onReload}>\r\n                  Reload\r\n            </Button>\r\n              </div>\r\n              : null\r\n          }\r\n        </Alert>\r\n        : null\r\n    );\r\n  }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  margins: {\r\n    marginTop: theme.spacing(2)\r\n  }\r\n});\r\n\r\n/** PropTypes */\r\nContextErrorMessage.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** \r\n   * The error object, which drives the error message \r\n   * If not null, the error message is shown \r\n   */\r\n  error: PropTypes.object,\r\n  /**  A contextual error message to be shown */\r\n  contextErrorMsg: PropTypes.string,\r\n  /** \r\n   * A reload handler for the onReload event, which occurs if the reload button is clicked. \r\n   * If given a reload button is shown \r\n   */\r\n  onReload: PropTypes.func\r\n}\r\n\r\nexport default withStyles(styles)(ContextErrorMessage);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, LinearProgress } from '@material-ui/core';\r\n\r\n/*\r\nif loading & show pro = true -> shows progress\r\n\r\n*/\r\n\r\nclass LoadingProgress extends Component {\r\n\r\n  // renders the component \r\n  render() {\r\n    const { classes, show } = this.props;\r\n\r\n    return (\r\n      show ?\r\n        <div className={classes.root}>\r\n          <LinearProgress color='primary' />\r\n        </div>\r\n        : null\r\n    );\r\n  }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n    marginTop: theme.spacing(2),\r\n  }\r\n});\r\n\r\n/** PropTypes */\r\nLoadingProgress.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** If true, the loading progress is rendered */\r\n  show: PropTypes.bool.isRequired,\r\n}\r\n\r\nexport default withStyles(styles)(LoadingProgress);","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {withStyles, Typography, Accordion, AccordionSummary, AccordionDetails, Grid} from '@material-ui/core';\r\nimport {Button} from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport {ElectivAPI} from '../api';\r\n\r\n/**\r\n * Es wird ein Projekt angezeigt was darauffolgend in die ProjektListe eingefuegt wird.\r\n *\r\n * @see See [ProjektListe](#projektliste)\r\n *\r\n *\r\n */\r\n\r\nclass ProjektListeEintrag extends Component {\r\n\r\n    //gebe einen leeren status\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            projekt: props.projekt,\r\n            projektarten: props.projektarten,\r\n            personen: props.personen,\r\n            showProjektForm: false,\r\n            showProjektDeleteDialog: false,\r\n            teilnahmeButtonDisabled: false,\r\n            teilnahmeAbwaehlenButtonDisabled: true,\r\n            teilnahmeChanged: false,\r\n            ectsAdded: false\r\n        };\r\n    }\r\n\r\n    expansionPanelStateChanged = () => {\r\n        this.props.onExpandedStateChange(this.props.projekt);\r\n    }\r\n\r\n    // Bei Aufruf wird die Anzahl der Teilnehmer um 1 Person erhoeht sowie eine Teilnahme im Backend fuer den current\r\n    // student hinterlegt. Gleichzeitig wird die ectsCountFunc aufgrufen um ects zu loggen\r\n    teilnahmeButtonClicked = event => {\r\n        event.stopPropagation()\r\n        //Logik fuer Teilnahme Button\r\n        this.setState({\r\n            teilnahmeButtonDisabled: true,\r\n            teilnahmeAbwaehlenButtonDisabled: false,\r\n        });\r\n        this.state.projekt.setAnzahlTeilnehmer(parseInt(this.state.projekt.anzahlTeilnehmer) + 1)\r\n        let ects = this.state.projektarten[this.props.projekt.art - 1].ects\r\n        this.props.ectsCountFunc(ects)\r\n        ElectivAPI.getAPI().setTeilnahme(this.props.projekt.id, this.props.currentStudent.id);\r\n    }\r\n\r\n    // Bei Aufruf werden im Projekt die maximalen Teilnehmer um -1 reduziert sowie die teilnahme im backend fuer den current\r\n    // student entfernt. Gleichzeitig wird der Teilnahme Button aktiviert\r\n    teilnahmeAbwaehlenButtonClicked = event => {\r\n        event.stopPropagation()\r\n        //Logik fuer Teilnahme Button\r\n        this.setState({\r\n            teilnahmeButtonDisabled: false,\r\n            teilnahmeAbwaehlenButtonDisabled: true,\r\n        });\r\n        this.state.projekt.setAnzahlTeilnehmer(parseInt(this.state.projekt.anzahlTeilnehmer) - 1)\r\n        let ects = -this.state.projektarten[this.props.projekt.art - 1].ects\r\n        this.props.ectsCountFunc(ects)\r\n        ElectivAPI.getAPI().deleteTeilnahme(this.props.projekt.id, this.props.currentStudent.id);\r\n        this.setState({teilnahmeChanged: true})\r\n    }\r\n\r\n\r\n    // \r\n    getInfosMount = () => {\r\n        if (this.props.currentStudent != null && !this.state.teilnahmeChanged && this.props.projekt.teilnehmerListe.indexOf(this.props.currentStudent.id) > -1) {\r\n            this.setState({\r\n                teilnahmeButtonDisabled: true,\r\n                teilnahmeAbwaehlenButtonDisabled: false,\r\n            });\r\n            if (this.props.projektarten.length > 0 && this.props.projekt) {\r\n                let ects = this.props.projektarten[this.props.projekt.art - 1].ects\r\n                this.props.ectsCountFunc(ects)\r\n                this.setState({ectsAdded: true})\r\n            }\r\n        }\r\n    }\r\n\r\n    //\r\n    getInfosUpdate = () => {\r\n        if (this.state.ectsAdded === false) {\r\n            this.setState({ectsAdded: true})\r\n            if (this.props.currentStudent != null && this.props.projekt.teilnehmerListe.indexOf(this.props.currentStudent.id) > -1) {\r\n                this.setState({\r\n                    teilnahmeButtonDisabled: true,\r\n                    teilnahmeAbwaehlenButtonDisabled: false,\r\n                });\r\n                if (this.props.projektarten.length > 0 && this.props.projekt) {\r\n                    let ects = this.props.projektarten[this.props.projekt.art - 1].ects\r\n                    this.props.ectsCountFunc(ects)\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\r\n    componentDidMount() {\r\n        this.getInfosMount();\r\n    }\r\n\r\n\r\n    componentWillUnmount() {\r\n        this.setState({\r\n            ectsAdded: false\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.ectsCount === 0 & prevProps.projektarten.length > 0) {\r\n            this.getInfosUpdate()\r\n\r\n        }\r\n    }\r\n\r\n\r\n    /** Renders the component */\r\n    render() {\r\n\r\n\r\n        const {classes, expandedState, currentStudent, projektarten, personen} = this.props;\r\n        // Use the states projekt\r\n        const {projekt} = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <Accordion className={classes.root} defaultExpanded={false} expanded={expandedState}\r\n                           onChange={this.expansionPanelStateChanged}>\r\n                    <AccordionSummary\r\n                        expandIcon={<ExpandMoreIcon/>}\r\n                        id={`projekt${projekt.getID()}Infopanel-header`}\r\n                    >\r\n                        <Grid container spacing={2} justify='flex-start' alignItems='center'>\r\n                            <Grid item>\r\n                                <Typography variant='body1'\r\n                                            className={classes.heading}>{projekt.getname()} bei {personen[projekt.getdozent() - 1].name} </Typography>\r\n                            </Grid>\r\n                            <Grid item xs/>\r\n                            <Grid item>\r\n                                <Typography variant='body1'\r\n                                            color={'success.main'}>{projekt.getAnzahlTeilnehmer()} / {projekt.getmax_teilnehmer()} Plätze\r\n                                    besetzt\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                {\r\n                                    currentStudent ?\r\n                                        <>\r\n\r\n                                            {\r\n                                                this.state.teilnahmeButtonDisabled ?\r\n                                                    <Button className={classes.teilnahmeAbwaehlenButton}\r\n                                                            variant='contained' size=\"small\" color='secondary'\r\n                                                            onClick={this.teilnahmeAbwaehlenButtonClicked}\r\n                                                            disabled={this.state.teilnahmeAbwaehlenButtonDisabled}>\r\n                                                        abwählen\r\n                                                    </Button>\r\n                                                    :\r\n\r\n                                                    <Button className={classes.teilnahmeButton} variant='contained'\r\n                                                            color='primary' size=\"small\" startIcon={<AddIcon/>}\r\n                                                            onClick={this.teilnahmeButtonClicked}\r\n                                                            disabled={this.state.teilnahmeButtonDisabled || this.state.projekt.anzahlTeilnehmer >= this.state.projekt.max_teilnehmer}>\r\n                                                        wählen\r\n                                                    </Button>\r\n                                            }\r\n                                        </>\r\n                                        :\r\n                                        null\r\n                                }\r\n                            </Grid>\r\n                        </Grid>\r\n                    </AccordionSummary>\r\n                    <AccordionDetails className={classes.details}>\r\n                        <Typography variant='body1' color={'textSecondary'}>\r\n                            <b>Beschreibung: </b> {projekt.getbeschreibung()} <br/>\r\n                            <b>Betreuer: </b>{projekt.getbetreuer()}<br/>\r\n                            <b>Raum: </b>{projekt.getraum()}<br/>\r\n                            <b>Maximale Teilnehmer: </b>{projekt.getmax_teilnehmer()}<br/>\r\n                            <b>Externer Partner: </b>{projekt.getexterner_partner()}<br/>\r\n                            <b>Wöchentlich: </b>{projekt.getwoechentlich() === \"1\" ? \"Ja\" : \"Nein\"}<br/>\r\n                            <b>Blocktage vor Prüfungsphase: </b>{projekt.getanzahl_block_vor()}<br/>\r\n                            <b>Blocktage während Prüfungsphase: </b>{projekt.getanzahl_block_in()}<br/>\r\n                            <b>Sprache: </b>{projekt.getsprache()}<br/>\r\n                            {projektarten.length > 0 && projekt ?\r\n                                <>\r\n                                    <b>Projektart: </b>{projektarten[projekt.art - 1].name}<br/>\r\n                                    <b>SWS: </b>{projektarten[projekt.art - 1].sws}<br/>\r\n                                    <b>ECTS: </b>{projektarten[projekt.art - 1].ects}<br/>\r\n                                </>\r\n                                :\r\n                                <>\r\n                                    <b>ECTS noch nicht geladen</b><br/>\r\n                                </>\r\n                            }\r\n                            <b>Präferierter Block: </b>{projekt.getpraeferierte_block()}<br/>\r\n\r\n                        </Typography>\r\n                    </AccordionDetails>\r\n                </Accordion>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n        marginBottom: theme.spacing(1),\r\n        marginTop: theme.spacing(1),\r\n        paddingTop: theme.spacing(1),\r\n        paddingBottom: theme.spacing(1),\r\n    },\r\n    teilnahmeButton: {\r\n        width: 100,\r\n    },\r\n    teilnahmeAbwaehlenButton: {\r\n        width: 100,\r\n    },\r\n});\r\n\r\n/** PropTypes */\r\nProjektListeEintrag.propTypes = {\r\n    /** @ignore */\r\n    classes: PropTypes.object.isRequired,\r\n    expandedState: PropTypes.bool.isRequired,\r\n    onExpandedStateChange: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default withStyles(styles)(ProjektListeEintrag);","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {withStyles, TextField, InputAdornment, IconButton, Grid, Typography, Button} from '@material-ui/core';\r\nimport ClearIcon from '@material-ui/icons/Clear'\r\nimport {withRouter} from 'react-router-dom';\r\nimport {ElectivAPI} from '../api';\r\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\r\nimport LoadingProgress from './dialogs/LoadingProgress';\r\n\r\n// import CustomerForm from './dialogs/CustomerForm';\r\nimport ProjektListeEintrag from './ProjektListeEintrag';\r\n\r\n/*\r\nErstellt eine Liste von ProjektListeEintrag fuer jedes Projekt\r\n*/\r\n\r\nclass ProjektListe extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        let expandedID = null;\r\n\r\n        if (this.props.location.expandProjekt) {\r\n            expandedID = this.props.location.expandProjekt.getID();\r\n        }\r\n\r\n        //gebe einen leeren status\r\n        this.state = {\r\n            projekte: [],\r\n            projektarten: [],\r\n            filteredProjekte: [],\r\n            projektFilter: '',\r\n            error: null,\r\n            ausgewaehlteEcts: null,\r\n            loadingInProgress: false,\r\n            expandedProjektID: expandedID,\r\n            showProjekteForm: false,\r\n            ectsCount: 0,\r\n            personen: []\r\n        };\r\n    }\r\n\r\n    // ECTS counter funktion. Erhaelt die ects und addiert diese bei Aufruf zu ectsCount im state\r\n    ectsCountFunc = (ects) => {\r\n        setTimeout(() => {\r\n            this.setState({\r\n                ectsCount: this.state.ectsCount + ects\r\n            })\r\n        }, 0);\r\n\r\n    }\r\n\r\n    /*   //Suche-Funktion zum Suchen von Projekten\r\n      filterFieldValueChange= event => {\r\n        const value = event.target.value.toLowerCase();\r\n        this.setState({\r\n            filteredProjekte: this.state.projekte.filter(projekt => {\r\n                let nameContainsValue = projekt.getname().toLowerCase().includes(value);\r\n                return nameContainsValue;\r\n            }),\r\n            projektFilter: value\r\n        });\r\n      }\r\n\r\n      //Suche leeren\r\n      clearFilterFieldButtonClicked = () => {\r\n        this.setState({\r\n            filteredProjekte: [...this.state.projekte],\r\n            projektFilter: ''\r\n        });\r\n      } */\r\n\r\n\r\n    //hole alle Projekte vom Backend\r\n    getProjekte = () => {\r\n        ElectivAPI.getAPI().getProjekteByZustand(\"Genehmigt\")\r\n            .then(projekteBOs =>\r\n                this.setState({\t\t\t\t\t\t\t\t//neuer status wenn fetch komplett\r\n                    projekte: projekteBOs,\r\n                    filteredProjekte: [...projekteBOs],\r\n                    loadingInProgress: false,\t\t\t\t// deaktiviere ladeindikator\r\n                    error: null,\r\n                })).catch(e =>\r\n            this.setState({\r\n                projekte: [],\r\n                filteredProjekte: [],\r\n                loadingInProgress: false,\r\n                error: e\r\n            }));\r\n        // setze laden auf wahr\r\n        this.setState({\r\n            loadingInProgress: true,\r\n            error: null\r\n        });\r\n    }\r\n\r\n    // Holt alle Projektarten vom Backend mit GET Methode\r\n    getProjektarten = () => {\r\n        ElectivAPI.getAPI().getProjektart()\r\n            .then(projekteartBos =>\r\n                this.setState({\t\t\t\t\t\t\t\t//neuer status wenn fetch komplett\r\n                    projektarten: projekteartBos,\r\n                    loadingInProgress: false,\t\t\t\t// deaktiviere ladeindikator\r\n                    error: null,\r\n                })).catch(e =>\r\n            this.setState({\r\n                projektarten: [],\r\n                loadingInProgress: false,\r\n                error: e\r\n            }));\r\n        // setze laden auf wahr\r\n        this.setState({\r\n            loadingInProgress: true,\r\n            error: null\r\n        });\r\n    }\r\n\r\n    // Holt alle Personen vom Backend\r\n    getPPersonen = () => {\r\n        ElectivAPI.getAPI().getPersons()\r\n            .then(personBOs =>\r\n                this.setState({\t\t\t\t\t\t\t\t//neuer status wenn fetch komplett\r\n                    personen: personBOs,\r\n                    loadingInProgress: false,\t\t\t\t// deaktiviere ladeindikator\r\n                    error: null,\r\n                })).catch(e =>\r\n            this.setState({\r\n                personen: [],\r\n                loadingInProgress: false,\r\n                error: e\r\n            }));\r\n        // setze laden auf wahr\r\n        this.setState({\r\n            loadingInProgress: true,\r\n            error: null\r\n        });\r\n    }\r\n\r\n    // Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\r\n    componentDidMount() {\r\n        this.getProjekte();\r\n        this.getProjektarten();\r\n        this.getPPersonen();\r\n    }\r\n\r\n    // Funktion fuer die Projektklappen oeffnung und den einhergehenden State change\r\n    onExpandedStateChange = projekt => {\r\n        //  Zum anfang Projekt Eintrag = null\r\n        let newID = null;\r\n\r\n        // Falls ein Objekt geclicket wird, collapse\r\n        if (projekt.getID() !== this.state.expandedProjektID) {\r\n            // Oeffnen mit neuer Projekt ID\r\n            newID = projekt.getID()\r\n        }\r\n        this.setState({\r\n            expandedProjektID: newID,\r\n        });\r\n    }\r\n\r\n\r\n    /** Renders the component */\r\n    render() {\r\n\r\n        const {classes, currentStudent} = this.props;\r\n        const {\r\n            projekte,\r\n            projektFilter,\r\n            filteredProjekte,\r\n            expandedProjektID,\r\n            loadingInProgress,\r\n            error,\r\n            ectsCount,\r\n            projektarten,\r\n            personen\r\n        } = this.state;\r\n\r\n        return (\r\n            <div className={classes.root}>\r\n                <Grid container spacing={1} className={classes.grid} justify='flex-start' alignItems='center'>\r\n                    {/* <Grid item className={classes.projektFilter}>\r\n            <Typography>\r\n              Filter Projekliste nach Namen:\r\n              </Typography>\r\n          </Grid>\r\n        <Grid item xs={4}>\r\n        <TextField\r\n                className={classes.filter}\r\n                type='text'\r\n                label=''\r\n                value={projektFilter}\r\n                onChange={this.filterFieldValueChange}\r\n                InputProps={{\r\n                    endAdornment: <InputAdornment position='end'>\r\n                    <IconButton onClick={this.clearFilterFieldButtonClicked}>\r\n                        <ClearIcon fontSize=\"small\"/>\r\n                    </IconButton>\r\n                    </InputAdornment>,\r\n                }}\r\n            />\r\n          </Grid> */}\r\n                    <Grid item xs/>\r\n                    {currentStudent ?\r\n                        <Grid item className={classes.ectsCount}>\r\n                            <Button variant=\"outlined\" color=\"primary\" className={classes.buttonEcts} disableRipple\r\n                                    style={{backgroundColor: 'transparent',}}>Anzahl ECTS: {ectsCount}</Button>\r\n                        </Grid>\r\n                        :\r\n                        <>\r\n                        </>\r\n                    }\r\n                </Grid>\r\n                {projektarten.length > 0 && personen.length > 0 && filteredProjekte.length > 0 ?\r\n                    <>\r\n                        <Button className={classes.ects} variant=\"outlined\" color=\"primary\" disableRipple\r\n                                style={{backgroundColor: 'transparent',}}>5 ECTS</Button>\r\n                        {\r\n                            filteredProjekte\r\n                                .filter(projekt => projekt.getArt() === 1)\r\n                                .map(projekt =>\r\n                                    <ProjektListeEintrag key={projekt.getID()} projekt={projekt}\r\n                                                         expandedState={expandedProjektID === projekt.getID()}\r\n                                                         onExpandedStateChange={this.onExpandedStateChange}\r\n                                                         currentStudent={currentStudent}\r\n                                                         ectsCountFunc={this.ectsCountFunc}\r\n                                                         ectsCount={ectsCount} projektarten={projektarten}\r\n                                                         personen={personen}\r\n                                    />)\r\n                        }\r\n                        <Button className={classes.ects} variant=\"outlined\" color=\"primary\" disableRipple\r\n                                style={{backgroundColor: 'transparent',}}>10 ECTS</Button>\r\n                        {\r\n                            filteredProjekte\r\n                                .filter(projekt => projekt.getArt() === 2)\r\n                                .map(projekt =>\r\n                                    <ProjektListeEintrag key={projekt.getID()} projekt={projekt}\r\n                                                         expandedState={expandedProjektID === projekt.getID()}\r\n                                                         onExpandedStateChange={this.onExpandedStateChange}\r\n                                                         currentStudent={currentStudent}\r\n                                                         ectsCountFunc={this.ectsCountFunc}\r\n                                                         ectsCount={ectsCount} projektarten={projektarten}\r\n                                                         personen={personen}\r\n                                    />)\r\n                        }\r\n                        <Button className={classes.ects} variant=\"outlined\" color=\"primary\" disableRipple\r\n                                style={{backgroundColor: 'transparent',}}>20 ECTS</Button>\r\n                        {\r\n                            filteredProjekte\r\n                                .filter(projekt => projekt.getArt() === 3)\r\n                                .map(projekt =>\r\n                                    <ProjektListeEintrag key={projekt.getID()} projekt={projekt}\r\n                                                         expandedState={expandedProjektID === projekt.getID()}\r\n                                                         onExpandedStateChange={this.onExpandedStateChange}\r\n                                                         currentStudent={currentStudent}\r\n                                                         ectsCountFunc={this.ectsCountFunc}\r\n                                                         ectsCount={ectsCount} projektarten={projektarten}\r\n                                                         personen={personen}\r\n                                    />)\r\n                        }\r\n                    </>\r\n                    :\r\n                    <>\r\n                        <Typography>Daten noch nicht geladen</Typography>\r\n                    </>\r\n\r\n                }\r\n\r\n                <LoadingProgress show={loadingInProgress}/>\r\n                <ContextErrorMessage error={error} contextErrorMsg={`The list of Projects could not be loaded.`}\r\n                                     onReload={() => {\r\n                                         this.getProjekte();\r\n                                         this.getProjektarten();\r\n                                     }}/>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    grid: {\r\n        marginTop: theme.spacing(3),\r\n        marginBottom: theme.spacing(1),\r\n        marginLeft: theme.spacing(1)\r\n    },\r\n    ectsCount: {\r\n        marginBottom: theme.spacing(1),\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    ects: {\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(1),\r\n        width: '100%'\r\n    },\r\n    buttonEcts: {\r\n        minWidth: 155\r\n    }\r\n});\r\n\r\n/** PropTypes */\r\nProjektListe.propTypes = {\r\n    /** @ignore */\r\n    classes: PropTypes.object.isRequired,\r\n    /** @ignore */\r\n    location: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default withRouter(withStyles(styles)(ProjektListe));\r\n\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { ElectivAPI, ProjektBO } from '../../api';\r\nimport ContextErrorMessage from './ContextErrorMessage';\r\nimport LoadingProgress from './LoadingProgress';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\n\r\n\r\n/** \r\n* Dieses Form zeigt ein Dialog zum erstellen/updaten von ProjektBO's. Falls ein Projekt bereits besteht wird das Formular als edit konfiguriert.\r\n* Falls das Projekt Objekt null ist wird das Formular zum erstellen eines PojektBO's konfiguriert.\r\n* Dafuer wird auf die API zugegriffen (Backend zugriff)\r\n*\r\n* @see See Matieral-UIs [Dialog] (https://material-ui.com/components/dialogs)\r\n*/\r\n\r\nclass ProjektForm extends Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tlet nm = '', mt = null, bs = '', bt = '', ep = '', wt = false, av = 0, ai = 0, pb = '', br = false, rm = '', sp = 'deutsch', dz = '', at = '', tl = '';\r\n\t\tlet boolvor = false, boolin = false, boolpraef = false;\r\n\t\tvar hj = null, pa = null;\r\n\t\tif (props.projekt) {\r\n\t\t\thj = 0;\r\n\t\t\tpa = 0;\r\n\t\t}\r\n\r\n\r\n\t\t//initiiere den state\r\n\t\tthis.state = {\r\n\t\t\tname: nm,\r\n\t\t\tnameValidationFailed: false,\r\n\t\t\tnameEdited: false,\r\n\r\n\t\t\tmax_teilnehmer: mt,\r\n\t\t\tmax_teilnehmerValidationFailed: false,\r\n\t\t\tmax_teilnehmerEdited: false,\r\n\r\n\t\t\tbeschreibung: bs,\r\n\t\t\tbeschreibungValidationFailed: false,\r\n\t\t\tbeschreibungEdited: false,\r\n\r\n\t\t\tbetreuer: bt,\r\n\t\t\tbetreuerValidationFailed: false,\r\n\t\t\tbetreuerEdited: false,\r\n\r\n\t\t\texterner_partner: ep,\r\n\t\t\texterner_partnerValidationFailed: false,\r\n\t\t\texterner_partnerEdited: false,\r\n\r\n\t\t\twoechentlich: wt,\r\n\t\t\twoechentlichValidationFailed: false,\r\n\t\t\twoechentlichEdited: false,\r\n\r\n\t\t\tboolBlock_vor: boolvor,\r\n\t\t\tanzahl_block_vor: av,\r\n\t\t\tanzahl_block_vorValidationFailed: false,\r\n\t\t\tanzahl_block_vorEdited: false,\r\n\r\n\t\t\tboolBlock_in: boolin,\r\n\t\t\tanzahl_block_in: ai,\r\n\t\t\tanzahl_block_inValidationFailed: false,\r\n\t\t\tanzahl_block_inEdited: false,\r\n\r\n\t\t\tboolBlockpraef: boolpraef,\r\n\t\t\tpraeferierte_block: pb,\r\n\t\t\tpraeferierte_blockValidationFailed: false,\r\n\t\t\tpraeferierte_blockEdited: false,\r\n\r\n\t\t\tbes_raum: br,\r\n\t\t\tbes_raumValidationFailed: false,\r\n\t\t\tbes_raumEdited: false,\r\n\r\n\t\t\traum: rm,\r\n\t\t\traumValidationFailed: false,\r\n\t\t\traumEdited: false,\r\n\r\n\t\t\tsprache: sp,\r\n\t\t\tspracheValidationFailed: false,\r\n\t\t\tspracheEdited: false,\r\n\r\n\t\t\tdozent: dz,\r\n\t\t\tdozentValidationFailed: false,\r\n\t\t\tdozentEdited: false,\r\n\r\n\t\t\taktueller_zustand: \"Neu\",\r\n\r\n\t\t\thalbjahr: hj,\r\n\t\t\thalbjahrEdited: false,\r\n\r\n\t\t\tart: pa,\r\n\t\t\tartEdited: false,\r\n\r\n\t\t\tanzahlTeilnehmer: at,\r\n\t\t\tanzahlTeilnehmerValidationFailed: false,\r\n\t\t\tanzahlTeilnehmerEdited: false,\r\n\r\n\t\t\tteilnehmerListe: tl,\r\n\t\t\tteilnehmerListeValidationFailed: false,\r\n\t\t\tteilnehmerListeEdited: false,\r\n\r\n\t\t\taddingInProgress: false,\r\n\t\t\tupdatingInProgress: false,\r\n\t\t\taddingError: null,\r\n\t\t\tupdatingError: null,\r\n\r\n\t\t\tmodulwahlBOs: [],\r\n\t\t\tmodulwahl: [],\r\n\t\t\tmoduleEdited: false,\r\n\r\n\t\t\tsemester: [],\r\n\t\t\tprojektarten: [],\r\n\t\t\tmodule: []\r\n\t\t};\r\n\t\t// State speichern falls cancel \r\n\t\tthis.baseState = this.state;\r\n\t}\r\n\r\n\t// API Anbindung um das Projekt über das Backend in die Datenbank hinzuzufügen\r\n\taddProjekt = () => {\r\n\t\tlet newProjekt = new ProjektBO(\r\n\t\t\t0,\r\n\t\t\tthis.state.name,\r\n\t\t\tthis.state.max_teilnehmer,\r\n\t\t\tthis.state.beschreibung,\r\n\t\t\tthis.state.betreuer,\r\n\t\t\tthis.state.externer_partner,\r\n\t\t\tthis.state.woechentlich,\r\n\t\t\tthis.state.anzahl_block_vor,\r\n\t\t\tthis.state.anzahl_block_in,\r\n\t\t\tthis.state.praeferierte_block,\r\n\t\t\tthis.state.bes_raum,\r\n\t\t\tthis.state.raum,\r\n\t\t\tthis.state.sprache,\r\n\t\t\tthis.props.currentPerson.id,\r\n\t\t\tthis.state.aktueller_zustand,\r\n\t\t\tthis.state.halbjahr,\r\n\t\t\tthis.state.art,\r\n\t\t\tthis.state.anzahlTeilnehmer,\r\n\t\t\tthis.state.teilnehmerListe,\r\n\t\t);\r\n\t\t// ProjektBO über die API in die DBhinzufügen\t\r\n\t\tElectivAPI.getAPI().addProjekt(newProjekt).then(projekt => {\r\n\t\t\tthis.props.getProjekte();\r\n\t\t\t//Wählbare Module enes Projekts über die API in die DB hinzufügen\r\n\t\t\tElectivAPI.getAPI().postProjekte_hat_module(projekt.id, JSON.stringify(this.state.modulwahl))\r\n\t\t}).then(projekt => {\r\n\t\t\t// Backend erfolgreich\r\n\t\t\t// reinitialisierung fuer ein neues leere Projekt\r\n\t\t\tthis.setState(this.baseState);\r\n\t\t\tthis.props.onClose(projekt); //Aufrufen parent in backend\r\n\t\t}).catch(e =>\r\n\t\t\tthis.setState({\r\n\t\t\t\tupdatingInProgress: false,\r\n\t\t\t\tupdatingError: e\r\n\t\t\t})\r\n\t\t);\r\n\t\t// Ladeanimation einblenden\r\n\t\tthis.setState({\r\n\t\t\tupdatingInProgress: true,\r\n\t\t\tupdatingError: null\r\n\t\t});\r\n\t}\r\n\r\n\t// API Anbindung um das Projekt über das Backend in die Datenbank upzudaten\r\n\tupdateProjekt = () => {\r\n\t\tlet projekt = this.props.projekt;\r\n\t\tprojekt.setname(this.state.name);\r\n\t\tprojekt.setmax_teilnehmer(this.state.max_teilnehmer);\r\n\t\tprojekt.setbeschreibung(this.state.beschreibung);\r\n\t\tprojekt.setbetreuer(this.state.betreuer);\r\n\t\tprojekt.setexterner_partner(this.state.externer_partner);\r\n\t\tprojekt.setwoechentlich(this.state.woechentlich);\r\n\t\tprojekt.setanzahl_block_vor(this.state.anzahl_block_vor);\r\n\t\tprojekt.setanzahl_block_in(this.state.anzahl_block_in);\r\n\t\tprojekt.setpraeferierte_block(this.state.praeferierte_block);\r\n\t\tprojekt.setbes_raum(this.state.bes_raum);\r\n\t\tprojekt.setraum(this.state.raum);\r\n\t\tprojekt.setsprache(this.state.sprache);\r\n\t\tprojekt.setAktuellerZustand(this.state.aktueller_zustand);\r\n\t\tprojekt.setHalbjahr(this.state.halbjahr);\r\n\t\tprojekt.setArt(this.state.art);\r\n\t\tprojekt.setAnzahlTeilnehmer(this.state.anzahlTeilnehmer);\r\n\t\tprojekt.setTeilnehmerListe(this.state.teilnehmerListe);\r\n\t\t// ProjektBO über die API in die DBhinzufügen\t\r\n\t\tElectivAPI.getAPI().updateProjekt(projekt).then(projekt => {\r\n\t\t\tthis.props.getProjekte();\r\n\t\t\t//Wählbare Module enes Projekts über die API in die DB hinzufügen\r\n\t\t\tElectivAPI.getAPI().updateProjekte_hat_module(projekt.id, JSON.stringify(this.state.modulwahl))\r\n\t\t}).then(projekt => {\r\n\t\t\t// Backend erfolgreich\r\n\t\t\t// reinitialisierung fuer ein neues leere Projekt\r\n\t\t\tthis.setState(this.baseState);\r\n\t\t\tthis.props.onClose(projekt); //Aufrufen parent in backend\r\n\t\t}).catch(e =>\r\n\t\t\tthis.setState({\r\n\t\t\t\tupdatingInProgress: false,\r\n\t\t\t\tupdatingError: e\r\n\t\t\t})\r\n\t\t);\r\n\t\t// Ladeanimation einblenden\r\n\t\tthis.setState({\r\n\t\t\tupdatingInProgress: true,\r\n\t\t\tupdatingError: null\r\n\t\t});\r\n\t}\r\n\r\n\t//Infos des zu bearbeitenden Projekts laden\r\n\tgetUpdateInfos = () => {\r\n\t\tlet nm = this.props.projekt.getname();\r\n\t\tlet mt = this.props.projekt.getmax_teilnehmer();\r\n\t\tlet bs = this.props.projekt.getbeschreibung();\r\n\t\tlet bt = this.props.projekt.getbetreuer();\r\n\t\tlet ep = this.props.projekt.getexterner_partner();\r\n\t\tlet wt = this.props.projekt.getwoechentlich();\r\n\t\tlet av = this.props.projekt.getanzahl_block_vor();\r\n\t\tlet ai = this.props.projekt.getanzahl_block_in();\r\n\t\tlet pb = this.props.projekt.getpraeferierte_block();\r\n\t\tlet br = this.props.projekt.getbes_raum();\r\n\t\tlet rm = this.props.projekt.getraum();\r\n\t\tlet sp = this.props.projekt.getsprache();\r\n\t\tlet dz = this.props.projekt.getdozent();\r\n\t\tlet at = this.props.projekt.getAnzahlTeilnehmer();\r\n\t\tlet tl = this.props.projekt.getTeilnehmerListe();\r\n\t\tlet hj = this.props.projekt.getHalbjahr();\r\n\t\tlet pa = this.props.projekt.getArt();\r\n\t\tlet boolvor = false;\r\n\t\tlet boolin = false;\r\n\t\tlet boolpraef = false;\r\n\t\tif (av !== null && av > 0) {\r\n\t\t\tboolvor = true\r\n\t\t}\r\n\t\tif (ai !== null && ai > 0) {\r\n\t\t\tboolin = true\r\n\t\t}\r\n\t\tif (pb !== null && pb !== '') {\r\n\t\t\tboolpraef = true\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tname: nm,\r\n\t\t\tmax_teilnehmer: mt,\r\n\t\t\tbeschreibung: bs,\r\n\t\t\tbetreuer: bt,\r\n\t\t\texterner_partner: ep,\r\n\t\t\twoechentlich: wt,\r\n\t\t\tboolBlock_vor: boolvor,\r\n\t\t\tanzahl_block_vor: av,\r\n\t\t\tboolBlock_in: boolin,\r\n\t\t\tanzahl_block_in: ai,\r\n\t\t\tboolBlockpraef: boolpraef,\r\n\t\t\tpraeferierte_block: pb,\r\n\t\t\tbes_raum: br,\r\n\t\t\traum: rm,\r\n\t\t\tsprache: sp,\r\n\t\t\tdozent: dz,\r\n\t\t\taktueller_zustand: \"Neu\",\r\n\t\t\thalbjahr: hj,\r\n\t\t\tart: pa,\r\n\t\t\tanzahlTeilnehmer: at,\r\n\t\t\tteilnehmerListe: tl,\r\n\t\t})\r\n\t}\r\n\r\n\t// Validierung der Textfeldaenderungen \r\n\ttextFieldValueChange = (event) => {\r\n\t\tconst value = event.target.value;\r\n\r\n\t\tlet error = false;\r\n\t\tif (value.trim().length === 0) {\r\n\t\t\terror = true;\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\t[event.target.id]: event.target.value,\r\n\t\t\t[event.target.id + 'ValidationFailed']: error,\r\n\t\t\t[event.target.id + 'Edited']: true\r\n\t\t});\r\n\t}\r\n\r\n\t// Validierung der Textfeldaenderungen nur numerische Werte\r\n\tnumberValueChange = (event) => {\r\n\t\tconst value = event.target.value;\r\n\t\tconst re = /^[0-9]{1,3}$/;\r\n\r\n\t\tlet error = false;\r\n\t\tif (value.trim().length === 0) {\r\n\t\t\terror = true;\r\n\t\t}\r\n\t\tif (re.test(event.target.value) === false) {\r\n\t\t\terror = true;\r\n\t\t}\r\n\r\n\t\tthis.setState({\r\n\t\t\t[event.target.id]: event.target.value,\r\n\t\t\t[event.target.id + 'ValidationFailed']: error,\r\n\t\t\t[event.target.id + 'Edited']: true\r\n\t\t});\r\n\t}\r\n\r\n\t// Änderung der Checkboxes\r\n\tcheckboxValueChange = (event) => {\r\n\t\tthis.setState({\r\n\t\t\t[event.target.id]: event.target.checked,\r\n\t\t});\r\n\t}\r\n\r\n\t// Änderung der Radiobuttons\r\n\tradioValueChange = (event) => {\r\n\t\tthis.setState({\r\n\t\t\tsprache: event.target.value,\r\n\t\t});\r\n\t}\r\n\r\n\t// API Anbindung um alle Semester über das Backend aus der Datenbank zu laden\r\n\tgetSemester = () => {\r\n\t\tElectivAPI.getAPI().getSemester()\r\n\t\t\t.then(semesterBOs =>\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tsemester: semesterBOs,\r\n\t\t\t\t\terror: null,\r\n\t\t\t\t\tloadingInProgress: false,\r\n\t\t\t\t})).catch(e =>\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tsemester: [],\r\n\t\t\t\t\t\terror: e,\r\n\t\t\t\t\t\tloadingInProgress: false,\r\n\t\t\t\t\t}));\r\n\t\tthis.setState({\r\n\t\t\terror: null,\r\n\t\t\tloadingInProgress: true,\r\n\t\t\tloadingTeilnahmeError: null\r\n\t\t});\r\n\t}\r\n\r\n\t// API Anbindung um alle Projektarten über das Backend aus der Datenbank zu laden\r\n\tgetProjektart = () => {\r\n\t\tElectivAPI.getAPI().getProjektart().then(projektartBOs =>\r\n\t\t\tthis.setState({\r\n\t\t\t\tprojektarten: projektartBOs\r\n\t\t\t})).then(() => {\r\n\t\t\t\tconsole.log(this.state.projektarten)\r\n\r\n\t\t\t})\r\n\t\t\t.catch(e =>\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tprojektarten: []\r\n\t\t\t\t}));\r\n\t}\r\n\r\n\r\n\t// API Anbindung um alle Module vom Backend zu bekommen \r\n\tgetModule = () => {\r\n\t\tElectivAPI.getAPI().getModule()\r\n\t\t\t.then(modulBOs =>\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tmodule: modulBOs,\r\n\t\t\t\t\terror: null,\r\n\t\t\t\t\tloadingInProgress: false,\r\n\t\t\t\t})).catch(e =>\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tmodule: [],\r\n\t\t\t\t\t\terror: e,\r\n\t\t\t\t\t\tloadingInProgress: false,\r\n\t\t\t\t\t}));\r\n\t\tthis.setState({\r\n\t\t\terror: null,\r\n\t\t\tloadingInProgress: true,\r\n\t\t\tloadingTeilnahmeError: null\r\n\t\t});\r\n\t}\r\n\r\n\t// API Anbindung um alle Module eines zu bearbeitenden Projekts über das Backend aus der Datenbank zu laden\r\n\tgetModule_by_projekt_id = () => {\r\n\t\tElectivAPI.getAPI().getModule_by_projekt_id(this.props.projekt.id)\r\n\t\t\t.then(modulBOs => {\r\n\t\t\t\tlet modulIDs = [];\r\n\t\t\t\tmodulBOs.forEach(modul => {\r\n\t\t\t\t\tmodulIDs.push(modul.id)\r\n\t\t\t\t})\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tmodulwahlBOs: modulBOs,\r\n\t\t\t\t\tmodulwahl: modulIDs,\r\n\t\t\t\t\terror: null,\r\n\t\t\t\t\tloadingInProgress: false,\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t\t.catch(e =>\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tmodulwahlBOs: [],\r\n\t\t\t\t\tmodulwahl: null,\r\n\t\t\t\t\terror: e,\r\n\t\t\t\t\tloadingInProgress: false,\r\n\t\t\t\t}));\r\n\t\tthis.setState({\r\n\t\t\terror: null,\r\n\t\t\tloadingInProgress: true\r\n\t\t});\r\n\t}\r\n\r\n\t// Änderungen des Dropdown Menüs für Semester\r\n\thandleSemesterChange = (semester) => {\r\n\t\tthis.setState({\r\n\t\t\thalbjahr: semester.target.value,\r\n\t\t\thalbjahrEdited: true\r\n\t\t})\r\n\t\tsetTimeout(() => {\r\n\t\t\tconsole.log('Ausgewählte Semester ID:', this.state.halbjahr)\r\n\t\t}, 0);\r\n\t};\r\n\r\n\t// Änderungen des Dropdown Menüs für Projektarten\r\n\thandleArtChange = (projektart) => {\r\n\t\tthis.setState({\r\n\t\t\tart: projektart.target.value,\r\n\t\t\tartEdited: true\r\n\t\t})\r\n\t\tsetTimeout(() => {\r\n\t\t\tconsole.log('Ausgewählte Projektart ID:', this.state.art)\r\n\t\t}, 0);\r\n\t};\r\n\r\n\t// Änderungen des Dropdown Menüs für Module\r\n\thandleModulChange = (event) => {\r\n\t\tthis.setState({\r\n\t\t\tmodulwahl: event.target.value,\r\n\t\t\tmoduleEdited: true\r\n\t\t});\r\n\t\tsetTimeout(() => {\r\n\t\t\tthis.modulwahlChange();\r\n\t\t}, 0);\r\n\t}\r\n\r\n\t// Wenn Änderungen an der Modulwahl vorgenommen werden müssen diese mit den IDS der ModulBOS abgeglichen werden\r\n\tmodulwahlChange = () => {\r\n\t\tconsole.log('Ausgewählte ModulIDs:', this.state.modulwahl)\r\n\t\tvar modulBOs = [];\r\n\t\tthis.state.modulwahl.forEach(id => {\r\n\t\t\tthis.state.module.forEach(modul => {\r\n\t\t\t\tif (id === modul.getID()) {\r\n\t\t\t\t\tmodulBOs.push(modul)\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t});\r\n\t\tthis.setState({\r\n\t\t\tmodulwahlBOs: modulBOs\r\n\t\t});\r\n\t}\r\n\r\n\t//Wenn das Dialog geschlossen wird\r\n\thandleClose = () => {\r\n\t\t// State zurucksetzen\r\n\t\tthis.setState(this.baseState);\r\n\t\tthis.props.onClose(null);\r\n\t}\r\n\r\n\t//Funktion, um alle für die Erstellung/Bearbeitung eines Projekts notwendigen Informationen zu laden\r\n\tgetInfos = () => {\r\n\t\tthis.getSemester();\r\n\t\tthis.getProjektart();\r\n\t\tthis.getModule();\r\n\t\tif (this.props.projekt) {\r\n\t\t\tthis.getUpdateInfos();\r\n\t\t\tthis.getModule_by_projekt_id();\r\n\t\t}\r\n\t}\r\n\r\n\t/** Rendert die Komponente */\r\n\trender() {\r\n\t\tconst { classes, projekt, show } = this.props;\r\n\t\tconst {\r\n\t\t\tname,\r\n\t\t\tnameValidationFailed,\r\n\t\t\tnameEdited,\r\n\r\n\t\t\tmax_teilnehmer,\r\n\t\t\tmax_teilnehmerValidationFailed,\r\n\t\t\tmax_teilnehmerEdited,\r\n\r\n\t\t\tbeschreibung,\r\n\t\t\tbeschreibungValidationFailed,\r\n\t\t\tbeschreibungEdited,\r\n\r\n\t\t\tbetreuer,\r\n\r\n\t\t\texterner_partner,\r\n\r\n\t\t\twoechentlich,\r\n\r\n\t\t\tboolBlock_vor,\r\n\t\t\tanzahl_block_vor,\r\n\t\t\tanzahl_block_vorValidationFailed,\r\n\r\n\t\t\tboolBlock_in,\r\n\t\t\tanzahl_block_in,\r\n\t\t\tanzahl_block_inValidationFailed,\r\n\r\n\t\t\tboolBlockpraef,\r\n\t\t\tpraeferierte_block,\r\n\t\t\tpraeferierte_blockValidationFailed,\r\n\r\n\t\t\tbes_raum,\r\n\r\n\t\t\traum,\r\n\t\t\traumValidationFailed,\r\n\r\n\t\t\tsprache,\r\n\r\n\t\t\taddingInProgress,\r\n\t\t\tupdatingInProgress,\r\n\t\t\taddingError,\r\n\t\t\tupdatingError,\r\n\r\n\t\t\tsemester,\r\n\t\t\thalbjahr,\r\n\t\t\thalbjahrEdited,\r\n\r\n\t\t\tprojektarten,\r\n\t\t\tart,\r\n\t\t\tartEdited,\r\n\r\n\t\t\tmodule,\r\n\t\t\tmodulwahlBOs,\r\n\t\t\tmodulwahl,\r\n\t\t\tmoduleEdited,\r\n\r\n\t\t} = this.state;\r\n\t\tlet title = '';\r\n\t\tlet header = '';\r\n\r\n\t\tif (projekt) {\r\n\t\t\t// Projekt objekt true, somit ein edit\r\n\t\t\ttitle = `Projekt \"${projekt.name}\" bearbeiten`;\r\n\t\t\theader = 'Projektdaten einfügen';\r\n\t\t} else {\r\n\t\t\ttitle = 'Erstelle ein neues Projekt';\r\n\t\t\theader = 'Projektdaten einfügen';\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\tshow ?\r\n\t\t\t\t<Dialog open={show} onEnter={this.getInfos} onClose={this.handleClose} maxWidth='sm'>\r\n\t\t\t\t\t<DialogTitle id='form-dialog-title'>{title}\r\n\t\t\t\t\t\t<IconButton className={classes.closeButton} onClick={this.handleClose}>\r\n\t\t\t\t\t\t\t<CloseIcon />\r\n\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t</DialogTitle>\r\n\t\t\t\t\t<DialogContent>\r\n\t\t\t\t\t\t<DialogContentText>\r\n\t\t\t\t\t\t\t{header}\r\n\t\t\t\t\t\t</DialogContentText>\r\n\t\t\t\t\t\t<form className={classes.root} noValidate autoComplete='off'>\r\n\t\t\t\t\t\t\t<TextField autoFocus type='text' required fullWidth margin='normal' id='name' label='Projektname' variant=\"outlined\" value={name}\r\n\t\t\t\t\t\t\t\tonChange={this.textFieldValueChange} error={nameValidationFailed}\r\n\t\t\t\t\t\t\t\thelperText={nameValidationFailed ? 'Bitte geben Sie einen Projektnamen an' : ' '} />\r\n\t\t\t\t\t\t\t<TextField className={classes.max_teilnehmer} type='text' required margin='normal' id='max_teilnehmer' label='Maximale Teilnehmeranzahl' variant=\"outlined\" value={max_teilnehmer}\r\n\t\t\t\t\t\t\t\tonChange={this.numberValueChange} error={max_teilnehmerValidationFailed}\r\n\t\t\t\t\t\t\t\thelperText={max_teilnehmerValidationFailed ? 'Bitte eine Anzahl eingeben' : ' '} />\r\n\r\n\t\t\t\t\t\t\t<FormControl component=\"fieldset\">\r\n\t\t\t\t\t\t\t\t<RadioGroup className={classes.radio} row aria-label=\"position\" value={sprache} defaultValue=\"deutsch\" onChange={this.radioValueChange}>\r\n\t\t\t\t\t\t\t\t\t<FormControlLabel\r\n\t\t\t\t\t\t\t\t\t\tvalue=\"deutsch\"\r\n\t\t\t\t\t\t\t\t\t\tcontrol={<Radio color=\"primary\" />}\r\n\t\t\t\t\t\t\t\t\t\tlabel=\"deutsch\"\r\n\t\t\t\t\t\t\t\t\t\tlabelPlacement=\"top\"\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t<FormControlLabel\r\n\t\t\t\t\t\t\t\t\t\tvalue=\"englisch\"\r\n\t\t\t\t\t\t\t\t\t\tcontrol={<Radio color=\"primary\" />}\r\n\t\t\t\t\t\t\t\t\t\tlabel=\"englisch\"\r\n\t\t\t\t\t\t\t\t\t\tlabelPlacement=\"top\"\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</RadioGroup>\r\n\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tsemester ?\r\n\t\t\t\t\t\t\t\t\t<FormControl required variant=\"outlined\" className={classes.formControl}>\r\n\t\t\t\t\t\t\t\t\t\t<InputLabel>Semester</InputLabel>\r\n\t\t\t\t\t\t\t\t\t\t<Select value={halbjahr} label=\"Semester\" onChange={this.handleSemesterChange}>\r\n\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\tsemester.map(semester =>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<MenuItem value={semester.getID()}><em>{semester.getname()}</em></MenuItem>\r\n\t\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t\t<FormControl required variant=\"outlined\" className={classes.formControl}>\r\n\t\t\t\t\t\t\t\t\t\t<InputLabel>Semester</InputLabel>\r\n\t\t\t\t\t\t\t\t\t\t<Select value=\"\" label=\"Semester\">\r\n\t\t\t\t\t\t\t\t\t\t\t<MenuItem value=\"\"><em>Semester noch nicht geladen</em></MenuItem>\r\n\t\t\t\t\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tprojektarten ?\r\n\t\t\t\t\t\t\t\t\t<FormControl required variant=\"outlined\" className={classes.formControlpa}>\r\n\t\t\t\t\t\t\t\t\t\t<InputLabel>Projektart</InputLabel>\r\n\t\t\t\t\t\t\t\t\t\t<Select value={art} label=\"Projektart\" onChange={this.handleArtChange}>\r\n\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\tprojektarten.map(projektart =>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<MenuItem value={projektart.getID()}><em>{projektart.getname()}</em></MenuItem>\r\n\t\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t\t<FormControl required variant=\"outlined\" className={classes.formControl}>\r\n\t\t\t\t\t\t\t\t\t\t<InputLabel>Projektart</InputLabel>\r\n\t\t\t\t\t\t\t\t\t\t<Select value={art} label=\"Projektart\">\r\n\t\t\t\t\t\t\t\t\t\t\t<MenuItem value=\"\"><em>Projektarten noch nicht geladen</em></MenuItem>\r\n\t\t\t\t\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tmodule ?\r\n\t\t\t\t\t\t\t\t\t<FormControl required variant=\"outlined\" className={classes.formControlmo}>\r\n\t\t\t\t\t\t\t\t\t\t<InputLabel>Anrechenbare Module</InputLabel>\r\n\t\t\t\t\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\t\t\t\t\tvalue={modulwahl}\r\n\t\t\t\t\t\t\t\t\t\t\tmultiple label=\"Anrechenbare Module\"\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={this.handleModulChange}\r\n\t\t\t\t\t\t\t\t\t\t\trenderValue={() => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<div className={classes.chips}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{modulwahlBOs.map((value) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Chip key={value} label={value.name} className={classes.chip} />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t)}>\r\n\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\tmodule.map(modul =>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<MenuItem key={modul.getID()} value={modul.getID()}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{<Checkbox checked={modulwahl.indexOf(modul.getID()) > -1} />}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ListItemText>{modul.getname()} ({modul.getEdv_nr()})</ListItemText>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t\t<FormControl required variant=\"outlined\" className={classes.formControlmo}>\r\n\t\t\t\t\t\t\t\t\t\t<InputLabel>Anrechenbare Module</InputLabel>\r\n\t\t\t\t\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\t\t\t\t\tvalue=\"\"\r\n\t\t\t\t\t\t\t\t\t\t\tmultiple label=\"Anrechenbare Module\">\r\n\t\t\t\t\t\t\t\t\t\t\t<MenuItem key=\"\" value=\"\">\r\n\t\t\t\t\t\t\t\t\t\t\t\tModule nicht geladen\r\n\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t<br />\r\n\r\n\t\t\t\t\t\t\t<FormGroup row>\r\n\t\t\t\t\t\t\t\t<FormControlLabel control={\r\n\t\t\t\t\t\t\t\t\t<Checkbox\r\n\t\t\t\t\t\t\t\t\t\tchecked={woechentlich}\r\n\t\t\t\t\t\t\t\t\t\tonChange={this.checkboxValueChange}\r\n\t\t\t\t\t\t\t\t\t\tid=\"woechentlich\"\r\n\t\t\t\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tlabel=\"Wöchentliche Termine\"\r\n\t\t\t\t\t\t\t\t\tlabelPlacement=\"end\"\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</FormGroup>\r\n\t\t\t\t\t\t\t<FormGroup row>\r\n\t\t\t\t\t\t\t\t<FormControlLabel control={\r\n\t\t\t\t\t\t\t\t\t<Checkbox\r\n\t\t\t\t\t\t\t\t\t\tchecked={bes_raum}\r\n\t\t\t\t\t\t\t\t\t\tonChange={this.checkboxValueChange}\r\n\t\t\t\t\t\t\t\t\t\tid=\"bes_raum\"\r\n\t\t\t\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tlabel=\"Besonderer Raum notwendig\"\r\n\t\t\t\t\t\t\t\t\tlabelPlacement=\"end\"\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</FormGroup>\r\n\t\t\t\t\t\t\t{bes_raum === true || bes_raum === 1 ?\r\n\t\t\t\t\t\t\t\t<TextField type='text' required fullWidth margin='normal' id='raum' label='Raum' variant=\"outlined\" value={raum}\r\n\t\t\t\t\t\t\t\t\tonChange={this.textFieldValueChange} error={raumValidationFailed}\r\n\t\t\t\t\t\t\t\t\thelperText={raumValidationFailed ? 'Dieses Feld darf nicht leer sein' : ' '} />\r\n\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t<></>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t<FormGroup row>\r\n\t\t\t\t\t\t\t\t<FormControlLabel control={\r\n\t\t\t\t\t\t\t\t\t<Checkbox\r\n\t\t\t\t\t\t\t\t\t\tchecked={boolBlock_vor}\r\n\t\t\t\t\t\t\t\t\t\tonChange={this.checkboxValueChange}\r\n\t\t\t\t\t\t\t\t\t\tid=\"boolBlock_vor\"\r\n\t\t\t\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tlabel=\"Blocktage vor Beginn der Vorlesungszeit\"\r\n\t\t\t\t\t\t\t\t\tlabelPlacement=\"end\"\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</FormGroup>\r\n\t\t\t\t\t\t\t{boolBlock_vor === true ?\r\n\t\t\t\t\t\t\t\t<TextField type='text' required fullWidth margin='normal' id='anzahl_block_vor' label='Anzahl Blocktage' variant=\"outlined\" value={anzahl_block_vor}\r\n\t\t\t\t\t\t\t\t\tonChange={this.numberValueChange} error={anzahl_block_vorValidationFailed}\r\n\t\t\t\t\t\t\t\t\thelperText={anzahl_block_vorValidationFailed ? 'Dieses Feld darf nicht leer sein' : ' '} />\r\n\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t<></>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t<FormGroup row>\r\n\t\t\t\t\t\t\t\t<FormControlLabel control={\r\n\t\t\t\t\t\t\t\t\t<Checkbox\r\n\t\t\t\t\t\t\t\t\t\tchecked={boolBlock_in}\r\n\t\t\t\t\t\t\t\t\t\tonChange={this.checkboxValueChange}\r\n\t\t\t\t\t\t\t\t\t\tid=\"boolBlock_in\"\r\n\t\t\t\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tlabel=\"Blocktage in der Prüfungszeit\"\r\n\t\t\t\t\t\t\t\t\tlabelPlacement=\"end\"\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</FormGroup>\r\n\t\t\t\t\t\t\t{boolBlock_in === true ?\r\n\t\t\t\t\t\t\t\t<TextField type='text' required fullWidth margin='normal' id='anzahl_block_in' label='Anzahl Blocktage' variant=\"outlined\" value={anzahl_block_in}\r\n\t\t\t\t\t\t\t\t\tonChange={this.numberValueChange} error={anzahl_block_inValidationFailed}\r\n\t\t\t\t\t\t\t\t\thelperText={anzahl_block_inValidationFailed ? 'Dieses Feld darf nicht leer sein' : ' '} />\r\n\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t<></>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t<FormGroup row>\r\n\t\t\t\t\t\t\t\t<FormControlLabel control={\r\n\t\t\t\t\t\t\t\t\t<Checkbox\r\n\t\t\t\t\t\t\t\t\t\tchecked={boolBlockpraef}\r\n\t\t\t\t\t\t\t\t\t\tonChange={this.checkboxValueChange}\r\n\t\t\t\t\t\t\t\t\t\tid=\"boolBlockpraef\"\r\n\t\t\t\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tlabel=\"Blocktage (Samstage) in der Vorlesungszeit\"\r\n\t\t\t\t\t\t\t\t\tlabelPlacement=\"end\"\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</FormGroup>\r\n\t\t\t\t\t\t\t{boolBlockpraef === true ?\r\n\t\t\t\t\t\t\t\t<TextField type='text' required fullWidth margin='normal' id='praeferierte_block' label='Präferierte Tage' variant=\"outlined\" value={praeferierte_block}\r\n\t\t\t\t\t\t\t\t\tonChange={this.textFieldValueChange} error={praeferierte_blockValidationFailed}\r\n\t\t\t\t\t\t\t\t\thelperText={praeferierte_blockValidationFailed ? 'Dieses Feld darf nicht leer sein' : ' '} />\r\n\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t<></>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t<TextField type='text' fullWidth margin='normal' id='betreuer' label='Betreuer' variant=\"outlined\" value={betreuer}\r\n\t\t\t\t\t\t\t\tonChange={this.textFieldValueChange} />\r\n\t\t\t\t\t\t\t<TextField type='text' fullWidth margin='normal' id='externer_partner' label='Externe Partner' variant=\"outlined\" value={externer_partner}\r\n\t\t\t\t\t\t\t\tonChange={this.textFieldValueChange} />\r\n\t\t\t\t\t\t\t<TextField type='text' required fullWidth margin='normal' id='beschreibung' label='Projektbeschreibung' multiline rows={4} variant=\"outlined\" value={beschreibung}\r\n\t\t\t\t\t\t\t\tonChange={this.textFieldValueChange} error={beschreibungValidationFailed}\r\n\t\t\t\t\t\t\t\thelperText={beschreibungValidationFailed ? 'Bitte geben Sie eine Beschreibung ein' : ' '} />\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t\t<LoadingProgress show={addingInProgress || updatingInProgress} />\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Show error message in dependency of projekt prop\r\n\t\t\t\t\t\t\tprojekt ?\r\n\t\t\t\t\t\t\t\t<ContextErrorMessage error={updatingError} contextErrorMsg={`The projekt ${projekt.getID()} could not be updated.`} onReload={this.updateProjekt} />\r\n\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t<ContextErrorMessage error={addingError} contextErrorMsg={`The Projekt could not be added.`} onReload={this.addProjekt} />\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</DialogContent>\r\n\t\t\t\t\t<DialogActions>\r\n\t\t\t\t\t\t<Button onClick={this.handleClose} color='secondary'>\r\n\t\t\t\t\t\t\tAbbrechen\r\n            \t\t\t</Button>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// If a Projekt is given, show an update button, else an add button\r\n\t\t\t\t\t\t\tprojekt ?\r\n\t\t\t\t\t\t\t\t<Button disabled={nameValidationFailed || max_teilnehmerValidationFailed || beschreibungValidationFailed} variant='contained' onClick={this.updateProjekt} color='primary'>\r\n\t\t\t\t\t\t\t\t\tSpeichern\r\n              \t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t<Button disabled={nameValidationFailed || !nameEdited || max_teilnehmerValidationFailed || !max_teilnehmerEdited || beschreibungValidationFailed || !beschreibungEdited || !halbjahrEdited || !artEdited || !moduleEdited}\r\n\t\t\t\t\t\t\t\t\tvariant='contained' onClick={this.addProjekt} color='primary'>\r\n\t\t\t\t\t\t\t\t\tHinzufügen\r\n             \t\t\t\t\t</Button>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</DialogActions>\r\n\t\t\t\t</Dialog>\r\n\t\t\t\t: null\r\n\t\t);\r\n\t}\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n\troot: {\r\n\t\twidth: '100%',\r\n\t},\r\n\tcloseButton: {\r\n\t\tposition: 'absolute',\r\n\t\tright: theme.spacing(1),\r\n\t\ttop: theme.spacing(1),\r\n\t\tcolor: theme.palette.grey[500],\r\n\t},\r\n\tmax_teilnehmer: {\r\n\t\twidth: 250,\r\n\t\tmarginRight: theme.spacing(2)\r\n\t},\r\n\tformControl: {\r\n\t\tminWidth: 170,\r\n\t\tmarginBottom: theme.spacing(1),\r\n\t},\r\n\tformControlpa: {\r\n\t\tminWidth: 240,\r\n\t\tmarginBottom: theme.spacing(1),\r\n\t\tmarginLeft: theme.spacing(3)\r\n\t},\r\n\tformControlmo: {\r\n\t\twidth: 435,\r\n\t\tmarginTop: theme.spacing(2),\r\n\t\tmarginBottom: theme.spacing(2),\r\n\t},\r\n\tradio: {\r\n\t\tmarginTop: theme.spacing(2)\r\n\t},\r\n\tchips: {\r\n\t\tdisplay: 'flex',\r\n\t\tflexWrap: 'wrap'\r\n\t},\r\n\tchip: {\r\n\t\tmargin: 2\r\n\t}\r\n});\r\n\r\n\r\n\r\n/** PropTypes */\r\nProjektForm.propTypes = {\r\n\t/** @ignore */\r\n\tclasses: PropTypes.object.isRequired,\r\n\t/** The ProjektBO's to be edited */\r\n\tprojekt: PropTypes.object,\r\n\t/** If true, the form is rendered */\r\n\tshow: PropTypes.bool.isRequired,\r\n\t/**  \r\n\t * Handler function which is called, when the dialog is closed.\r\n\t * Sends the edited or created projektBO's as parameter or null, if cancel was pressed.\r\n\t *  \r\n\t * Signature: onClose(ProjektBO's projekt);\r\n\t */\r\n\tonClose: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default withStyles(styles)(ProjektForm);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Button, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions } from '@material-ui/core';\r\nimport { ElectivAPI } from '../../api';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\n\r\n/**\r\n * Es wird ein Dialog dargestellt, mit welchem man ein bestimmtes Projekt löschen kann\r\n * \r\n * @see See Matieral-UIs [Dialog] (https://material-ui.com/components/dialogs)\r\n * \r\n */\r\n\r\nclass ProjektDelete extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    //initiiere den state\r\n    this.state = {\r\n      projekt: props.projekt,\r\n      showSnackbar: false,\r\n    };\r\n\r\n  }\r\n\r\n  closeSnackbar = (event, reason) => {\r\n    if (reason === 'clockaway') {\r\n      return;\r\n    }\r\n    this.setState({\r\n      showSnackbar: false\r\n    });\r\n  };\r\n\r\n  //Wenn das Dialog geschlossen wird\r\n  handleClose = () => {\r\n    this.props.onClose(null);\r\n  }\r\n\r\n  // API Anbindung um das Projekt über das Backend in der Datenbank zu löschen\r\n  deleteProjekt = () => {\r\n    ElectivAPI.getAPI().deleteProjekt(this.state.projekt.id)\r\n      .then(() => {\r\n        this.props.getProjekte();\r\n        this.props.onClose(null);\r\n      }).catch(e => {\r\n        this.setState({\r\n          showSnackbar: true\r\n        })\r\n      })\r\n  }\r\n\r\n  /** Rendert die Komponente */\r\n  render() {\r\n    const { show } = this.props;\r\n    const { projekt, showSnackbar } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <Dialog\r\n          open={show}\r\n          onClose={this.handleClose}\r\n          maxWidth='xs'\r\n        >\r\n          <DialogTitle>{\"Sind Sie sich sicher?\"}</DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText>\r\n              Wenn Sie das Projekt <b>\"{projekt.name}\"</b> löschen möchten, drücken Sie auf \"JA\".\r\n                  </DialogContentText>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={this.handleClose} color=\"primary\">\r\n              Abbrechen\r\n                  </Button>\r\n            <Button onClick={this.deleteProjekt} color=\"primary\" autoFocus>\r\n              Ja\r\n                  </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n        <Snackbar open={showSnackbar} autoHideDuration={6000} onClose={this.closeSnackbar}>\r\n          <Alert onClose={this.closeSnackbar} severity=\"error\">\r\n            Diese Projektart kann nicht gelöscht werden\r\n                </Alert>\r\n        </Snackbar>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n})\r\n\r\n/** PropTypes */\r\nProjektDelete.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** The ProjektBO's to be edited */\r\n  projekt: PropTypes.object,\r\n  /** If true, the form is rendered */\r\n  show: PropTypes.bool.isRequired,\r\n  /**  \r\n   * Handler function which is called, when the dialog is closed.\r\n   * Sends the edited or created projektBO's as parameter or null, if cancel was pressed.\r\n   *  \r\n   * Signature: onClose(ProjektBO's projekt);\r\n   */\r\n  onClose: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default withStyles(styles)(ProjektDelete);","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Typography, Accordion, AccordionSummary, AccordionDetails, Grid } from '@material-ui/core';\r\nimport { Button } from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { ElectivAPI } from '../api';\r\nimport ProjektForm from './dialogs/ProjektForm';\r\nimport ProjektDelete from './dialogs/ProjektDelete';\r\n/*\r\nimport CustomerDeleteDialog from './dialogs/CustomerDeleteDialog';\r\nimport AccountList from './AccountList';\r\n*/\r\n\r\n//Muss noch geschrieben werden!\r\n\r\n\r\nclass ProjektDozentListeEintrag extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // Status initalisieren\r\n        this.state = {\r\n            projekt: props.projekt,\r\n            projektarten: [],\r\n            showProjektForm: false,\r\n            showProjektDeleteDialog: false,\r\n        };\r\n    }\r\n\r\n    // Handles events wenn sich der status der oeffnung aendert\r\n    expansionPanelStateChanged = () => {\r\n        this.props.onExpandedStateChange(this.props.projekt);\r\n\r\n        /*\r\n        // Teilnahme Button deaktivieren, sofern Teilnehmer bereits in Projekt eingeschrieben\r\n        if( this.props.projekt.teilnehmerListe.indexOf(this.props.currentStudent.id)> -1){\r\n            this.setState({teilnahmeButtonDisabled:true});\r\n        }\r\n        */\r\n    }\r\n\r\n    //ruft die getProjekte() Funktion in den Props auf\r\n    getProjekte = () => {\r\n        this.props.getProjekte();\r\n    }\r\n\r\n    //Wird aufgerufen, wenn das Dialog-Fenster ProjektForm geschlossen wird\r\n    projektFormClosed = (projekt) => {\r\n        if (projekt) {\r\n            this.setState({\r\n                projekt: projekt,\r\n                showProjektForm: false\r\n            });\r\n        } else {\r\n            this.setState({\r\n                showProjektForm: false\r\n            });\r\n        }\r\n        this.props.projektFormClosed()\r\n    }\r\n\r\n    //Öffnet das Dialog-Fenster ProjektForm, wenn der Button geklickt wurde\r\n    bearbeitenButtonClicked = event => {\r\n        event.stopPropagation();\r\n        this.setState({\r\n            showProjektForm: true\r\n        });\r\n    }\r\n\r\n    //Öffnet das Dialog-Fenster ProjektDelete, wenn der Button geklickt wurde\r\n    projektDeleteButtonClicked = event => {\r\n        event.stopPropagation();\r\n        this.setState({\r\n            showProjektDeleteDialog: true\r\n        });\r\n    }\r\n\r\n    //Wird aufgerufen, wenn das Dialog-Fenster ProjektDelete geschlossen wird\r\n    projektDeleteClosed = () => {\r\n        this.setState({\r\n            showProjektDeleteDialog: false\r\n        });\r\n    }\r\n\r\n    // Holt alle Projektarten vom Backend mit GET Methode\r\n    getProjektart = () => {\r\n        ElectivAPI.getAPI().getProjektart().then(projektartBOs =>\r\n            this.setState({\r\n                projektarten: projektartBOs\r\n            })).catch(e =>\r\n                this.setState({\r\n                    projektarten: []\r\n                }));\r\n    }\r\n\r\n    // Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\r\n    componentDidMount() {\r\n        this.getProjektart();\r\n    }\r\n\r\n\r\n    /** Renders the component */\r\n    render() {\r\n        const { classes, expandedState } = this.props;\r\n        // Use the states projekt\r\n        const { projekt, projektarten, showProjektForm, showProjektDeleteDialog } = this.state;\r\n\r\n\r\n        return (\r\n            <div>\r\n                <Accordion defaultExpanded={false} className={classes.root} expanded={expandedState}\r\n                    onChange={this.expansionPanelStateChanged}>\r\n                    <AccordionSummary\r\n                        expandIcon={<ExpandMoreIcon />}\r\n                        id={`projekt${projekt.getID()}Infopanel-header`}\r\n                    >\r\n                        <Grid container spacing={1} justify='flex-start' alignItems='center'>\r\n                            <Grid item>\r\n                                <Typography variant='body1'\r\n                                    className={classes.heading}>{projekt.getname()} bei {projekt.getbetreuer()}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs />\r\n                            <Grid item>\r\n                                <Typography variant='body2' color={'textSecondary'}>Details</Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </AccordionSummary>\r\n                    <AccordionDetails>\r\n                        <Typography variant='body1' color={'textSecondary'}>\r\n                            <b>Beschreibung: </b> {projekt.getbeschreibung()} <br />\r\n                            <b>Raum: </b>{projekt.getraum()}<br />\r\n                            <b>Maximale Teilnehmer: </b>{projekt.getmax_teilnehmer()}<br />\r\n                            <b>Betreuer: </b>{projekt.getbetreuer()}<br />\r\n                            <b>Externer Partner: </b>{projekt.getexterner_partner()}<br />\r\n                            <b>Wöchentlich: </b>{projekt.getwoechentlich() === \"1\" ? \"Ja\" : \"Nein\"}<br />\r\n                            <b>Blocktage vor Prüfungsphase: </b>{projekt.getanzahl_block_vor()}<br />\r\n                            <b>Blocktage während Prüfungsphase: </b>{projekt.getanzahl_block_in()}<br />\r\n                            <b>Sprache: </b>{projekt.getsprache()}<br />\r\n                            {projektarten.length > 0 && projekt ?\r\n                                <>\r\n                                    <b>Projektart: </b>{projektarten[projekt.art - 1].name}<br />\r\n                                    <b>SWS: </b>{projektarten[projekt.art - 1].sws}<br />\r\n                                    <b>ECTS: </b>{projektarten[projekt.art - 1].ects}<br />\r\n                                </>\r\n                                :\r\n                                <>\r\n                                    <b>ECTS noch nicht geladen</b><br />\r\n                                </>\r\n                            }\r\n                            <b>Präferierter Block: </b>{projekt.getpraeferierte_block()}<br />\r\n\r\n                        </Typography>\r\n                    </AccordionDetails>\r\n                    <AccordionDetails>\r\n                        <Grid container justify=\"flex-end\" alignItems=\"center\" spacing={2}>\r\n                            <Grid item>\r\n                                <Tooltip title='Löschen' placement=\"left\">\r\n                                    <IconButton className={classes.projektDeleteButton} variant=\"contained\"\r\n                                        onClick={this.projektDeleteButtonClicked}><DeleteIcon /></IconButton>\r\n                                </Tooltip>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button id='btn' className={classes.bearbeitenButton} variant='contained'\r\n                                    color='primary' onClick={this.bearbeitenButtonClicked}>\r\n                                    Bearbeiten\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </AccordionDetails>\r\n                </Accordion>\r\n                <ProjektForm show={showProjektForm} projekt={projekt} onClose={this.projektFormClosed}\r\n                    getProjekte={this.getProjekte} />\r\n                <ProjektDelete show={showProjektDeleteDialog} projekt={projekt} onClose={this.projektDeleteClosed}\r\n                    getProjekte={this.getProjekte} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n        marginBottom: theme.spacing(1),\r\n        marginTop: theme.spacing(1),\r\n        paddingTop: theme.spacing(1),\r\n        paddingBottom: theme.spacing(1),\r\n    },\r\n\r\n});\r\n\r\n/** PropTypes */\r\nProjektDozentListeEintrag.propTypes = {\r\n    /** @ignore */\r\n    classes: PropTypes.object.isRequired,\r\n    /** The ProjektBO to be rendered */\r\n    projekt: PropTypes.object.isRequired,\r\n    /** The state of this ProjektDozentListeEintrag. If true the projekt is shown with its accounts */\r\n    expandedState: PropTypes.bool.isRequired,\r\n    /** The handler responsible for handle expanded state changes (exanding/collapsing) of this ProjektDozentListeEintrag\r\n     *\r\n     * Signature: onExpandedStateChange(projektBo projekt)\r\n     */\r\n    onExpandedStateChange: PropTypes.func.isRequired,\r\n\r\n}\r\n\r\nexport default withStyles(styles)(ProjektDozentListeEintrag);","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Button, Grid, FormControl, InputLabel } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nimport { withRouter } from 'react-router-dom';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { ElectivAPI } from '../api';\r\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\r\nimport LoadingProgress from './dialogs/LoadingProgress';\r\n\r\nimport ProjektForm from './dialogs/ProjektForm';\r\nimport ProjektDozentListeEintrag from './ProjektDozentListeEintrag';\r\n\r\n/*\r\nErstellt eine Liste von ProjektDozentListeEintrag fuer jedes Projekt\r\n*/\r\n\r\n\r\nclass ProjektDozentListe extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let expandedID = null;\r\n\r\n        if (this.props.location.expandProjekt) {\r\n            expandedID = this.props.location.expandProjekt.getID();\r\n        }\r\n\r\n        //gebe einen leeren status\r\n        this.state = {\r\n            projekte: [],\r\n            filteredProjekte: [],\r\n            projektFilter: '',\r\n            error: null,\r\n            loadingInProgress: false,\r\n            expandedProjektID: expandedID,\r\n            showProjekteForm: false,\r\n            filterValue: 'Neu'\r\n        };\r\n    }\r\n\r\n    //hole alle Projekte vom Backend\r\n    getProjekte = () => {\r\n        if (this.props.currentPerson.getrolle() === 'Admin') {\r\n            ElectivAPI.getAPI().getProjekteByZustand('Neu')\r\n                .then(projekteBOs => {\r\n                    this.setState({\t\t\t\t\t\t\t\t//neuer status wenn fetch komplett\r\n                        projekte: projekteBOs,\r\n                        filteredProjekte: [...projekteBOs],\t\t//speicher eine kopie\r\n                        loadingInProgress: false,\t\t\t\t// deaktiviere ladeindikator\r\n                        error: null,\r\n                    })\r\n                })\r\n            ElectivAPI.getAPI().getProjekteByZustand('Abgelehnt').then(projekteBOs => {\r\n                this.setState({\t\t\t\t\t\t\t\t//neuer status wenn fetch komplett\r\n                    projekte: [...this.state.projekte, ...projekteBOs],\r\n                    loadingInProgress: false,\t\t\t\t// deaktiviere ladeindikator\r\n                    error: null,\r\n                })\r\n            })\r\n            ElectivAPI.getAPI().getProjekteByZustand('Genehmigt').then(projekteBOs => {\r\n                this.setState({\t\t\t\t\t\t\t\t//neuer status wenn fetch komplett\r\n                    projekte: [...this.state.projekte, ...projekteBOs],\r\n                    loadingInProgress: false,\t\t\t\t// deaktiviere ladeindikator\r\n                    error: null,\r\n                })\r\n            })\r\n                .catch(e =>\r\n                    this.setState({\r\n                        projekte: [],\r\n                        loadingInProgress: false,\r\n                        error: e\r\n                    }));\r\n            // setze laden auf wahr\r\n            this.setState({\r\n                loadingInProgress: true,\r\n                error: null\r\n            });\r\n        } else {\r\n            ElectivAPI.getAPI().getProjekteByZustandByDozent(\"Neu\", this.props.currentPerson.getID())\r\n                .then(projekteBOs => {\r\n                    this.setState({\t\t\t\t\t\t\t\t//neuer status wenn fetch komplett\r\n                        projekte: projekteBOs,\r\n                        filteredProjekte: [...projekteBOs],\t\t//speicher eine kopie\r\n                        loadingInProgress: false,\t\t\t\t// deaktiviere ladeindikator\r\n                        error: null\r\n                    })\r\n                })\r\n            ElectivAPI.getAPI().getProjekteByZustandByDozent(\"Abgelehnt\", this.props.currentPerson.getID())\r\n                .then(projekteBOs => {\r\n                    this.setState({\t\t\t\t\t\t\t\t//neuer status wenn fetch komplett\r\n                        projekte: [...this.state.projekte, ...projekteBOs],\r\n                        loadingInProgress: false,\t\t\t\t// deaktiviere ladeindikator\r\n                        error: null\r\n                    })\r\n                })\r\n            ElectivAPI.getAPI().getProjekteByZustandByDozent(\"Genehmigt\", this.props.currentPerson.getID())\r\n                .then(projekteBOs => {\r\n                    this.setState({\t\t\t\t\t\t\t\t//neuer status wenn fetch komplett\r\n                        projekte: [...this.state.projekte, ...projekteBOs],\r\n                        loadingInProgress: false,\t\t\t\t// deaktiviere ladeindikator\r\n                        error: null\r\n                    })\r\n                })\r\n                .catch(e =>\r\n                    this.setState({\r\n                        projekte: [],\r\n                        loadingInProgress: false,\r\n                        error: e\r\n                    }));\r\n            // setze laden auf wahr\r\n            this.setState({\r\n                loadingInProgress: true,\r\n                error: null\r\n            });\r\n        }\r\n    }\r\n\r\n    // Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\r\n    componentDidMount() {\r\n        this.getProjekte();\r\n    }\r\n\r\n    onExpandedStateChange = projekt => {\r\n        //  Zum anfang Projekt Eintrag = null\r\n        let newID = null;\r\n        // Falls ein Objekt geclicket wird, collapse\r\n        if (projekt.getID() !== this.state.expandedProjektID) {\r\n            // Oeffnen mit neuer Projekt ID\r\n            newID = projekt.getID()\r\n        }\r\n        this.setState({\r\n            expandedProjektID: newID,\r\n        });\r\n\r\n    }\r\n\r\n    addProjektButtonClicked = event => {\r\n        event.stopPropagation();\r\n        this.setState({\r\n            showProjekteForm: true\r\n        });\r\n    }\r\n\r\n    projektFormClosed = projekt => {\r\n        if (projekt) {\r\n            const newProjektList = [...this.state.projekte, projekt];\r\n            this.setState({\r\n                projekte: newProjektList,\r\n                filteredProjekte: [...newProjektList],\r\n                showProjekteForm: false,\r\n                filterValue: 'Neu'\r\n            });\r\n        } else {\r\n            this.setState({\r\n                showProjekteForm: false,\r\n                filterValue: 'Neu'\r\n            });\r\n        }\r\n    }\r\n\r\n    filterFieldValueChange = event => {\r\n\r\n\r\n        const filteredProjekte = [];\r\n        for (let i = 0; i < this.state.projekte.length; i++) {\r\n            if (this.state.projekte[i].aktueller_zustand === event.target.value) {\r\n                filteredProjekte.push(this.state.projekte[i]);\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            filteredProjekte: filteredProjekte,\r\n            filterValue: event.target.value\r\n        })\r\n\r\n    }\r\n\r\n\r\n    /** Renders the component */\r\n    render() {\r\n        const { classes, currentPerson } = this.props;\r\n        const {\r\n            filteredProjekte,\r\n            expandedProjektID,\r\n            loadingInProgress,\r\n            error,\r\n            showProjekteForm,\r\n            filterValue\r\n        } = this.state;\r\n\r\n        return (\r\n            <div className={classes.root}>\r\n                <Grid className={classes.projektFilter} container spacing={1} justify='flex-start' alignItems='center'>\r\n                    <Grid item>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <FormControl className={classes.status}>\r\n                            <InputLabel>Status</InputLabel>\r\n                            <Select id='projektFilter' value={filterValue} onChange={this.filterFieldValueChange}>\r\n                                <MenuItem value={'Neu'}>Neu</MenuItem>\r\n                                <MenuItem value={'Genehmigt'}>Genehmigt</MenuItem>\r\n                                <MenuItem value={'Abgelehnt'}>Abgelehnt</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n\r\n\r\n                    </Grid>\r\n                    <Grid item xs />\r\n                    <Grid item>\r\n                        <Button variant='contained' className={classes.button} color='primary' startIcon={<AddIcon />}\r\n                            onClick={this.addProjektButtonClicked}>\r\n                            Projekt anlegen\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                {\r\n                    // Show the list of ProjektDozentListeEintrag components\r\n                    // Do not use strict comparison, since expandedProjektID maybe a string if given from the URL parameters\r\n\r\n                    filteredProjekte.map(projekt =>\r\n                        <ProjektDozentListeEintrag key={projekt.getID()} projekt={projekt}\r\n                            expandedState={expandedProjektID === projekt.getID()}\r\n                            onExpandedStateChange={this.onExpandedStateChange}\r\n                            currentPerson={currentPerson} getProjekte={this.getProjekte}\r\n                            projektFormClosed={this.projektFormClosed}\r\n                        />)\r\n                }\r\n                <LoadingProgress show={loadingInProgress} />\r\n                <ContextErrorMessage error={error} contextErrorMsg={`Projekte konnten nicht geladen werden`}\r\n                    onReload={this.getProjekte} />\r\n                <ProjektForm show={showProjekteForm} currentPerson={currentPerson} onClose={this.projektFormClosed}\r\n                    getProjekte={this.getProjekte} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    projektFilter: {\r\n        marginTop: theme.spacing(2),\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n    status: {\r\n        minWidth: 120\r\n    },\r\n    button: {\r\n        marginRight: theme.spacing(1)\r\n    }\r\n});\r\n\r\n/** PropTypes */\r\nProjektDozentListe.propTypes = {\r\n    /** @ignore */\r\n    classes: PropTypes.object.isRequired,\r\n    /** @ignore */\r\n    location: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default withRouter(withStyles(styles)(ProjektDozentListe));\r\n\r\n","import React from 'react'\r\nimport {makeStyles, Paper, Typography, Grid, Card, CardContent, Button, } from '@material-ui/core';\r\nimport Pascal from '../images/pascal.jpg';\r\nimport Alex from '../images/Alex.jpg';\r\nimport Daria from '../images/Daria.jpg';\r\nimport Jannik from '../images/Jannik.jpg';\r\nimport Raphael from '../images/Raphael.jpg';\r\nimport Leander from '../images/Leander.jpg';\r\n\r\n/**\r\n * About Page \r\n * Link zu Xing Profil der Gruppenmitglieder\r\n * und Impressum\r\n * \r\n * @author [Pascal Gienger](https://github.com/PascalGienger)\r\n */\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n    padding: theme.spacing(1)\r\n  },\r\n  content: {\r\n    margin: theme.spacing(1),\r\n    textAlign: \"center\",\r\n  },  \r\n  header:{\r\n    textAlign: \"center\",\r\n    marginBottom:\"3%\",\r\n    marginTop:\"5%\"\r\n  },\r\n  container:{\r\n    marginBottom:\"2%\",\r\n  },\r\n  img:{\r\n    margin:\"auto\",\r\n    display: \"flex\",\r\n    marginTop:\"5%\",\r\n    paddingTop:\"4%\",\r\n    width:\"68%\", \r\n  },\r\n  button:{\r\n    display: \"flex\",\r\n    margin:\"auto\",\r\n    marginTop: \"-3%\",\r\n    marginBottom:\"5%\",\r\n  },\r\n  hyperlink:{\r\n    textDecoration: \"none\",\r\n    color: theme.palette.primary.main,\r\n  }\r\n}));\r\n\r\n\r\n\r\nfunction About() {\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.content}>\r\n      \r\n        <Typography variant='h4' className={classes.header}>\r\n          Unser Team\r\n        </Typography>\r\n\r\n          <Grid container item xs={12} spacing={3} className={classes.container} >\r\n            <React.Fragment>\r\n                <Grid item xs={4}>\r\n                  <Paper className={classes.paper1}>\r\n                    <Card className={classes.root1}>\r\n                      <img alt=\"Bild Raphael Müller\" className={classes.img} src={Raphael} title=\"Raphael Müller\"/>\r\n                      <CardContent>\r\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                          Raphael Müller\r\n                        </Typography>\r\n                      </CardContent>\r\n                      <Button className={classes.button} variant=\"contained\" > <a className={classes.hyperlink}  href=\"https://www.xing.com/profile/Raphael_Mueller104/cv \">Xing Profile</a></Button>\r\n                    </Card>\r\n                  </Paper>\r\n                </Grid>\r\n\r\n                <Grid item xs={4}>\r\n                  <Paper className={classes.paper}>\r\n                    <Card className={classes.root1}>\r\n                      <img alt=\"Bild Jannik Merz\" className={classes.img} src={Jannik}title=\"Jannik Merz\"/>\r\n                      <CardContent>\r\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                          Jannik Merz\r\n                        </Typography>\r\n                      </CardContent>\r\n                      <Button className={classes.button} variant=\"contained\" > <a className={classes.hyperlink} href=\"https://www.xing.com/profile/Jannik_Merz/cv\">Xing Profile</a></Button>\r\n                    </Card>\r\n                  </Paper>\r\n                </Grid>\r\n                \r\n                <Grid item xs={4}>\r\n                  <Paper className={classes.paper}>\r\n                    <Card className={classes.root1}>\r\n                      <img alt=\"Bild Leander Peter\" className={classes.img} src={Leander} title=\"Leander Peter\"/>\r\n                      <CardContent>\r\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                          Leander Peter\r\n                        </Typography>\r\n                      </CardContent>\r\n                      <Button className={classes.button} variant=\"contained\" > <a className={classes.hyperlink} href=\"https://www.xing.com/profile/Leander_Peter/cv\">Xing Profile</a></Button>\r\n                    </Card>\r\n                  </Paper>\r\n                </Grid>\r\n            </React.Fragment>\r\n          </Grid>\r\n\r\n\r\n          <Grid container item xs={12} spacing={3} className={classes.container}>\r\n            <React.Fragment>\r\n                <Grid item xs={4}>\r\n                  <Paper className={classes.paper1}>\r\n                    <Card className={classes.root1}>\r\n                      <img alt=\"Bild Daria Bilyk\" className={classes.img} src={Daria} title=\"Daria Bilyk\"/>\r\n                      <CardContent>\r\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                          Daria Bilyk\r\n                        </Typography>\r\n                      </CardContent>\r\n                      <Button className={classes.button}  variant=\"contained\" > <a className={classes.hyperlink} href=\"https://www.xing.com/profile/Daria_Bilyk/cv\">Xing Profile</a></Button>\r\n                    </Card>\r\n                  </Paper>\r\n                </Grid>\r\n\r\n                <Grid item xs={4}>\r\n                  <Paper className={classes.paper}>\r\n                    <Card className={classes.root1}>\r\n                      <img alt=\"Bild Alexander Hofstetter\" className={classes.img} src={Alex} title=\"Alexander Hofstetter\"/>\r\n                      <CardContent>\r\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                          Alexander Hofstetter\r\n                        </Typography>\r\n                      </CardContent>\r\n                      <Button className={classes.button}  variant=\"contained\" > <a className={classes.hyperlink} href=\"https://www.hdm-stuttgart.de/\">Xing Profile</a></Button>\r\n                    </Card>\r\n                  </Paper>\r\n                </Grid>\r\n\r\n                <Grid item xs={4}>\r\n                  <Paper className={classes.paper}>\r\n                    <Card className={classes.root1}>\r\n                      <img alt=\"Bild Pascal Gienger\" className={classes.img} src={Pascal} title=\"Pascal Gienger\"/>\r\n                      <CardContent>\r\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                          Pascal Gienger\r\n                        </Typography>\r\n                      </CardContent>\r\n                      <Button className={classes.button} variant=\"contained\" > <a className={classes.hyperlink} href=\"https://www.xing.com/profile/Pascal_Gienger2/cv\">Xing Profile</a></Button>\r\n                    </Card>\r\n                  </Paper>\r\n                </Grid> \r\n            </React.Fragment>\r\n          </Grid>\r\n\r\n         \r\n        <Typography variant='body2'>\r\n          © Hochschule der Medien 2020, all rights reserved.\r\n        </Typography>\r\n      </div>\r\n  )\r\n}\r\nexport default About;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, IconButton, Dialog, DialogTitle, InputAdornment, TextField } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport { ElectivAPI } from '../../api';\r\nimport ContextErrorMessage from './ContextErrorMessage';\r\nimport LoadingProgress from './LoadingProgress';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\n\r\nimport AddStudentEintrag from './AddStudentEintrag';\r\n\r\n/**\r\n * Es wird ein Dialog ausgeführt, in dem alle Studenten angezeigt werden\r\n * \r\n * @see See [AddStudentEintrag](#addstudenteintrag)\r\n * \r\n * Dozent (oder Admin) kann nach einem bestimmten Studenten suchen  \r\n * Dozent (oder Admin) kann Studenten zu dem ausgewählten Projekt hinzufügen\r\n * \r\n */\r\n\r\n\r\nclass AddStudent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        //gebe einen leeren status\r\n        this.state = {\r\n            studenten: [],\r\n            filteredStudenten: [],\r\n            studentFilter: '',\r\n            error: null,\r\n            loadingInProgress: false,\r\n        };\r\n    }\r\n\r\n    // API Anbindung um alle Studenten vom Backend zu bekommen \r\n    // Wenn ein Student (eine Teilnahme) schon an dem Projekt teilnimmt, wird diese nicht angezeigt\r\n    getStudenten = () => {\r\n        ElectivAPI.getAPI().getStudenten()\r\n            .then(studentBOs => {\r\n                var teilnahmeids = this.props.teilnahmen.map(teilnahme => {\r\n                    return teilnahme.teilnehmer\r\n                });\r\n                studentenvar = studentBOs\r\n                var a;\r\n                for (a in teilnahmeids) {\r\n                    var studentenids = studentenvar.map(student => {\r\n                        return student.id\r\n                    });\r\n                    if (studentenids.indexOf(teilnahmeids[a] !== -1)) {\r\n                        studentenvar.splice(studentenids.indexOf(teilnahmeids[a]), 1)\r\n                    }\r\n                }\r\n            })\r\n            .then(() =>\r\n                this.setState({\r\n                    studenten: studentenvar,\r\n                    filteredStudenten: [...studentenvar],\r\n                    error: null,\r\n                    loadingInProgress: false,\r\n                })).catch(e =>\r\n                    this.setState({\r\n                        student: [],\r\n                        filteredStudenten: [],\r\n                        error: e,\r\n                        loadingInProgress: false,\r\n                    }));\r\n        this.setState({\r\n            error: null,\r\n            loadingInProgress: true,\r\n            loadingProjekteError: null\r\n        });\r\n    }\r\n\r\n    //wird aufgerufen, wenn das Dialog geschlossen wird\r\n    handleClose = () => {\r\n        this.props.onClose(null);\r\n    }\r\n\r\n    //wird aufgerufen, wenn das Dialog geöffnet wird\r\n    handleOpen = () => {\r\n        this.getStudenten();\r\n    }\r\n\r\n    //Suche-Funktion zum Suchen nach Studentenname oder Matrikelnummer\r\n    filterFieldValueChange = event => {\r\n        const value = event.target.value.toLowerCase();\r\n        this.setState({\r\n            filteredStudenten: this.state.studenten.filter(student => {\r\n                let nameContainsValue = student.getname().toLowerCase().includes(value);\r\n                let mat_nrContainsValue = student.getmat_nr().toString().includes(value);\r\n                return nameContainsValue || mat_nrContainsValue;\r\n            }),\r\n            studentFilter: value\r\n        });\r\n    }\r\n\r\n    //Suche leeren\r\n    clearFilterFieldButtonClicked = () => {\r\n        this.setState({\r\n            filteredStudenten: [...this.state.studenten],\r\n            studentFilter: ''\r\n        });\r\n    }\r\n\r\n\r\n    // Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\r\n    componentDidMount() {\r\n    }\r\n\r\n    /** Renders the component */\r\n    render() {\r\n        const { classes, show, currentProjekt } = this.props;\r\n        const { filteredStudenten, studentFilter, error, loadingInProgress } = this.state;\r\n\r\n        return (\r\n            show ?\r\n                <Dialog open={show} onEntered={this.handleOpen} onClose={this.handleClose} maxWidth='xs' fullWidth>\r\n                    <DialogTitle className={classes.dialogtitle}>Student hinzufügen\r\n                        <IconButton className={classes.closeButton} onClick={this.handleClose}>\r\n                            <CloseIcon />\r\n                        </IconButton>\r\n                    </DialogTitle>\r\n                    <TextField\r\n                        className={classes.filter}\r\n                        id='studentFilter'\r\n                        type='text'\r\n                        label='Studenten suchen'\r\n                        value={studentFilter}\r\n                        onChange={this.filterFieldValueChange}\r\n                        InputProps={{\r\n                            endAdornment: <InputAdornment position='end'>\r\n                                <IconButton onClick={this.clearFilterFieldButtonClicked}>\r\n                                    <ClearIcon fontSize=\"small\" />\r\n                                </IconButton>\r\n                            </InputAdornment>,\r\n                        }}\r\n                    />\r\n                    <List className={classes.root}>\r\n                        {\r\n                            filteredStudenten.map(student =>\r\n                                <AddStudentEintrag key={student.getID()} student={student} currentProjekt={currentProjekt}\r\n                                    show={this.props.show}\r\n                                />)\r\n                        }\r\n                        <ListItem>\r\n                            <LoadingProgress show={loadingInProgress} />\r\n                            <ContextErrorMessage error={error} contextErrorMsg={`Studenten konnten nicht geladen werden.`} onReload={this.getStudenten} />\r\n                        </ListItem>\r\n                    </List>\r\n                </Dialog>\r\n                : null\r\n        );\r\n    }\r\n}\r\n\r\nvar studentenvar;\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    closeButton: {\r\n        position: 'absolute',\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n    filter: {\r\n        margin: theme.spacing(2),\r\n        marginTop: 0,\r\n        marginBottom: 0\r\n    },\r\n    dialogtitle: {\r\n        paddingLeft: theme.spacing(2)\r\n    }\r\n});\r\n\r\n/** PropTypes */\r\nAddStudent.propTypes = {\r\n    /** @ignore */\r\n    classes: PropTypes.object.isRequired,\r\n    /** If true, the form is rendered */\r\n    show: PropTypes.bool.isRequired,\r\n    onClose: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default withStyles(styles)(AddStudent);","import { createMuiTheme } from '@material-ui/core/styles';\r\nimport { colors } from '@material-ui/core';\r\n\r\nconst white = '#FFFFFF';\r\nconst black = '#000000';\r\nconst darkgrey = '#808080';\r\n\r\n// A custom theme for this app\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    black,\r\n    white,\r\n    darkgrey,\r\n    primary: {\r\n      contrastText: white,\r\n      dark: colors.blueGrey[400],\r\n      main: colors.blueGrey[600],\r\n      light: colors.blueGrey[100]\r\n    },\r\n    secondary: {\r\n      contrastText: white,\r\n      dark: colors.red[900],\r\n      main: colors.red[700],\r\n      light: colors.red[100]\r\n    },\r\n    success: {\r\n      contrastText: white,\r\n      dark: colors.green[900],\r\n      main: colors.green[600],\r\n      light: colors.green[400]\r\n    },\r\n    info: {\r\n      contrastText: white,\r\n      dark: colors.blue[900],\r\n      main: colors.blue[600],\r\n      light: colors.blue[400]\r\n    },\r\n    warning: {\r\n      contrastText: white,\r\n      dark: colors.orange[900],\r\n      main: colors.orange[600],\r\n      light: colors.orange[400]\r\n    },\r\n    error: {\r\n      contrastText: white,\r\n      dark: colors.red[900],\r\n      main: colors.red[600],\r\n      light: colors.red[400]\r\n    },\r\n    text: {\r\n      primary: colors.blueGrey[800],\r\n      secondary: colors.blueGrey[600],\r\n      link: colors.blue[600]\r\n    },\r\n    background: {\r\n      default: '#F4F6F8',\r\n      paper: white\r\n    },\r\n    icon: colors.blueGrey[600],\r\n    divider: colors.grey[200]\r\n  }, \r\n});\r\n\r\n\r\n// A custom theme for this app\r\n// const theme = createMuiTheme({\r\n//   palette: {\r\n//     primary: {\r\n//       main: '#556cd6',\r\n//     },\r\n//     secondary: {\r\n//       main: '#19857b',\r\n//     },\r\n//     error: {\r\n//       main: red.A400,\r\n//     },\r\n//     background: {\r\n//       default: '#fff',\r\n//     },\r\n//   },\r\n// });\r\n\r\n\r\nexport default theme;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Card, Button, Grid, Typography, withStyles, Paper, FormControl, InputLabel, Select, MenuItem, TextField} from '@material-ui/core';\r\n\r\n/** \r\n * Render eine Seite für nicht eingeloggte Nutzer.\r\n * Dafür wird eine existierende Google Account Sign in Komponente verwendet. \r\n * Die Komponente nutzt eine Firebase für einen redirect.\r\n * \r\n * @see See Googles [firebase authentication](https://firebase.google.com/docs/web/setup)\r\n * @see See Googles [firebase API reference](https://firebase.google.com/docs/reference/js)\r\n * \r\n */\r\n\r\n class SignIn extends Component {\r\n\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\trolle: null,\r\n\t\t\trolleEdited: false,\r\n\t\t\tnameValidationFailed: false,\r\n\t\t\tnameEdited: false,\r\n\t\t\tkuerzelValidationFailed: false,\r\n\t\t\tkuerzelEdited: false,\r\n\t\t\tmat_nrValidationFailed: false,\r\n\t\t\tmat_nrEdited: false\r\n\t\t};\r\n\t}\r\n\r\n\r\n\r\n\t// Handles the click event of the sign in button and calls the prop onSignIn handler\r\n\thandleSignInButtonClicked = () => {\r\n\t\tconsole.log(\"Click!\")\r\n\t\tdocument.cookie = `rolle= ${this.state.rolle};path=/`\r\n\t\tdocument.cookie = `name= ${document.getElementById('name').value};path=/`\r\n\t\tif (this.state.rolle === 'Student'){\r\n\t\t\tdocument.cookie = `kuerzel= ${document.getElementById('kuerzel').value};path=/`\r\n\t\t\tdocument.cookie = `mat_nr= ${document.getElementById('mat_nr').value};path=/`\r\n\t\t}\r\n\t\tsetTimeout(()=>{\r\n\t\t\tthis.props.onSignIn();\r\n\t\t},0);\r\n\t}\r\n\r\n\thandleChange = (rolle) => {\r\n\t\tthis.setState({\r\n\t\t\trolle: rolle.target.value,\r\n\t\t\trolleEdited: true\r\n\t\t})\r\n\t\tsetTimeout(()=>{\r\n\t\t\tif (this.state.rolle === \"Student\"){\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tkuerzelEdited: false,\r\n\t\t\t\t\tmat_nrEdited: false\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tkuerzelEdited: true,\r\n\t\t\t\t\tmat_nrEdited: true\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t},0);\r\n\t\tsetTimeout(()=>{\r\n\t\t\tconsole.log(this.state)\r\n\t\t},500);\r\n\t};\r\n\r\n\t// Validierung der Textfeldaenderungen \r\n\ttextFieldValueChange = (event) => {\r\n\t\tconst value = event.target.value;\r\n\r\n\t\tlet error = false;\r\n\t\tif (value.trim().lenght === 0) {\r\n\t\t\terror = true;\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\t[event.target.id + 'ValidationFailed']: error,\r\n\t\t\t[event.target.id + 'Edited']: true\r\n\t\t});\r\n\t}\r\n\r\n\tnumberValueChange = (event) => {\r\n\t\tconst value = event.target.value;\r\n\t\tconst re = /^[0-9]{1,6}$/;\r\n\r\n\t\tlet error = false;\r\n\t\tif (value.trim().lenght === 0) {\r\n\t\t\terror = true;\r\n\t\t}\r\n\t\tif (re.test(event.target.value) === false) {\r\n\t\t\terror = true;\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\t[event.target.id + 'ValidationFailed']: error,\r\n\t\t\t[event.target.id + 'Edited']: true\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t// rendert die  Komponente SignIn Seite\r\n\trender() {\r\n\t\tconst {rolle, rolleEdited, nameValidationFailed, nameEdited, kuerzelValidationFailed, kuerzelEdited, mat_nrValidationFailed, mat_nrEdited} = this.state;\r\n\t\tconst { classes } = this.props;\r\n\r\n\t\treturn <div>\r\n\t\t\t\t<Paper>\r\n\t\t\t\t\t<Card>\r\n\t\t\t\t\t\t<Typography className={classes.root} align='center' variant='h6'>Willkommen zur HDM Wahlfach App</Typography>\r\n\t\t\t\t\t\t<Grid container justify='center'>\r\n\t\t\t\t\t\t\t<Grid item>\r\n\t\t\t\t\t\t\t\t<FormControl className={classes.formControl}>\r\n\t\t\t\t\t\t\t\t\t<InputLabel>Rolle</InputLabel>\r\n\t\t\t\t\t\t\t\t\t\t<Select required onChange={this.handleChange}>\r\n\t\t\t\t\t\t\t\t\t\t\t<MenuItem value='Student'>Student</MenuItem>\r\n\t\t\t\t\t\t\t\t\t\t\t<MenuItem value='Dozent'>Dozent</MenuItem>\r\n\t\t\t\t\t\t\t\t\t\t\t<MenuItem value='Admin'>Admin</MenuItem>\r\n\t\t\t\t\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t\t\t<form className={classes.form} autoComplete=\"off\">\r\n\t\t\t\t\t\t\t\t\t<TextField id=\"name\" label=\"Name\" error={nameValidationFailed} onChange = {this.textFieldValueChange}/>\r\n\t\t\t\t\t\t\t\t</form>\r\n\t\t\t\t\t\t\t\t{ rolle === 'Student' ?\r\n\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t<form className={classes.form} autoComplete=\"off\">\r\n\t\t\t\t\t\t\t\t\t<TextField id=\"kuerzel\" label=\"Kürzel\" error={kuerzelValidationFailed} onChange = {this.textFieldValueChange}/>\r\n\t\t\t\t\t\t\t\t</form>\r\n\t\t\t\t\t\t\t\t<form className={classes.form} autoComplete=\"off\">\r\n\t\t\t\t\t\t\t\t<TextField id=\"mat_nr\" label=\"Matrikelnummer\" error={mat_nrValidationFailed} onChange = {this.numberValueChange}/>\r\n\t\t\t\t\t\t\t\t</form>\r\n\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t<></>\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Typography className={classes.root} align='center'>Für die Nutzung der weiteren Funktionen müssen Sie sich authentifizieren.</Typography>\r\n\t\t\t\t\t\t<Grid container justify='center'>\r\n\t\t\t\t\t\t\t<Grid item>\r\n\t\t\t\t\t\t\t\t<Button style={{marginBottom:\"2em\"}}variant='contained' color='primary' onClick={this.handleSignInButtonClicked}\r\n\t\t\t\t\t\t\t\tdisabled = { !rolleEdited || nameValidationFailed || !nameEdited || kuerzelValidationFailed || !kuerzelEdited || mat_nrValidationFailed || !mat_nrEdited}>\r\n\t\t\t\t\t\t\t\t\tAnmelden\r\n\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Card>\r\n\t\t\t\t</Paper>\r\n\t\t\t</div>\r\n\t}\r\n}\r\n\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n\troot: {\r\n\t\tmargin: theme.spacing(2)\r\n\t},\r\n\tformControl: {\r\n\t\tminWidth: 180\r\n\t},\r\n\tform: {\r\n\t\tmarginTop: theme.spacing(1)\r\n\t}\r\n});\r\n\r\n/** PropTypes */\r\nSignIn.propTypes = {\r\n\t/** @ignore */\r\n\tclasses: PropTypes.object.isRequired,\r\n\t/** \r\n\t * Handler function, which is called if the user wants to sign in.\r\n\t */\r\n\tonSignIn: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default withStyles(styles)(SignIn)","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ElectivAPI from '../api/ElectivAPI';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport LoadingProgress from './dialogs/LoadingProgress';\r\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\r\n\r\n/**\r\n * Es wird eine einzelne Teilnahme an einem Projekt mit allen not wendigen Informationen dargestellt\r\n * \r\n * Hierfür werden Projektname, Anzahl der ECTS, Semester, Dozent , die Note angezeigt\r\n * \r\n * Außerdem kann der Student nach der Benotung seine Teilnahme einem Modul zuweisen\r\n * \r\n */\r\n\r\n\r\n//Css Style Klassen für die Tabellen Zellen\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.primary.main,\r\n    color: theme.palette.common.white,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\n//Css Style Klassen für die Tabellen Zeilen\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    '&:nth-of-type(4n+1)': {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\n\r\nclass MeineProjekteEintrag extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        // initiiere einen leeren state\r\n        this.state = {\r\n            projekt: null,\r\n            projektID: null,\r\n            projektName: null,\r\n            projektZustand: null,\r\n            ECTS: null,\r\n            semester: null,\r\n            module: null,\r\n            dozentName: null,\r\n            note: null,\r\n            loadingInProgress: false,\r\n            error: null\r\n        };\r\n    }\r\n\r\n    // API Anbindung um Projekte vom Backend zu bekommen \r\n    getProjekt = () => {\r\n      ElectivAPI.getAPI().getProjekt(this.props.teilnahme.lehrangebot)\r\n      .then(projektBO =>\r\n          this.setState({\r\n            projekt: projektBO,\r\n            projektID: projektBO.id,\r\n            projektName: projektBO.name,\r\n            projektZustand: projektBO.aktueller_zustand,\r\n            loadingInProgress: false,\r\n            error: null,\r\n          })).then(()=>{\r\n            this.getPerson()\r\n            this.getBewertung()\r\n            this.getModule_by_projekt_id()\r\n            this.getSemester_by_id()\r\n            this.getECTS()\r\n          })\r\n          .catch(e =>\r\n              this.setState({\r\n                projekt: null,\r\n                projektID: null,\r\n                projektName: null,\r\n                loadingInProgress: false,\r\n                error: e,\r\n              }));\r\n      this.setState({\r\n        loadingInProgress: true,\r\n        error: null\r\n      });\r\n    }\r\n\r\n    // API Anbindung um ECTS einer Projektart vom Backend zu bekommen \r\n    getECTS = () => {\r\n      ElectivAPI.getAPI().getProjektartById(this.state.projekt.art)\r\n      .then(ProjektartBO =>\r\n          this.setState({\r\n              ECTS: ProjektartBO.ects,\r\n              error: null,\r\n              loadingInProgress: false,\r\n          }))\r\n          .catch(e =>\r\n              this.setState({\r\n                  ECTS: null,\r\n                  error: e,\r\n                  loadingInProgress: false,\r\n              }));\r\n      this.setState({\r\n          error: null,\r\n          loadingInProgress: true\r\n      });\r\n    }\r\n\r\n    // Wenn die Teilnahme schon bewertet wurde, gebe die Note aus\r\n    getBewertung = () => {\r\n      if (this.props.teilnahme.resultat !== null){\r\n      ElectivAPI.getAPI().getBewertung(this.props.teilnahme.resultat)\r\n      .then(bewertungBO =>\r\n          this.setState({\r\n              note: bewertungBO.getnote(),\r\n              error: null,\r\n              loadingInProgress: false,\r\n          }))\r\n          .catch(e =>\r\n              this.setState({\r\n                  note: null,\r\n                  error: e,\r\n                  loadingInProgress: false,\r\n              }));\r\n      this.setState({\r\n          error: null,\r\n          loadingInProgress: true\r\n      });\r\n    }\r\n    }\r\n\r\n    // API Anbindung um Semester vom Backend zu bekommen \r\n    getSemester_by_id = () => {\r\n      ElectivAPI.getAPI().getSemester_by_id(this.state.projekt.getHalbjahr())\r\n      .then(semesterBO =>\r\n          this.setState({\r\n              semester: semesterBO.name,\r\n              error: null,\r\n              loadingInProgress: false,\r\n          }))\r\n          .catch(e =>\r\n              this.setState({\r\n                  semester: null,\r\n                  error: e,\r\n                  loadingInProgress: false,\r\n              }));\r\n      this.setState({\r\n          error: null,\r\n          loadingInProgress: true\r\n      });\r\n    }\r\n\r\n    // API Anbindung um wählbare Module für ein Projekt vom Backend zu bekommen \r\n    getModule_by_projekt_id = () => {\r\n      ElectivAPI.getAPI().getModule_by_projekt_id(this.state.projektID)\r\n      .then(modulBOs =>\r\n          this.setState({\r\n              module: modulBOs,\r\n              error: null,\r\n              loadingInProgress: false,\r\n          }))\r\n          .catch(e =>\r\n              this.setState({\r\n                  module: null,\r\n                  error: e,\r\n                  loadingInProgress: false,\r\n              }));\r\n      this.setState({\r\n          error: null,\r\n          loadingInProgress: true\r\n      });\r\n    }\r\n\r\n// API Anbindung um Dozent vom Backend zu bekommen \r\n    getPerson = () => {\r\n      ElectivAPI.getAPI().getPerson(this.state.projekt.dozent)\r\n      .then(personBO =>\r\n          this.setState({\r\n              dozentName: personBO.getname(),\r\n              error: null,\r\n              loadingInProgress: false,\r\n          }))\r\n          .catch(e =>\r\n              this.setState({\r\n                  dozentName: null,\r\n                  error: e,\r\n                  loadingInProgress: false,\r\n              }));\r\n      this.setState({\r\n          error: null,\r\n          loadingInProgress: true\r\n      });\r\n    }\r\n\r\n    // bei Änderung des Modul-Dropdown-Menüs wird das ausgewähte Modul im Backend als Anrechnung der Teilnahme in die Datenbank eingefügt \r\n    handleChange = async (edv) => {\r\n      if (this.state.note === null){\r\n        this.props.teilnahme.setAnrechnung(edv.target.value);\r\n        // console.log(`Option selected:`, edv.target.value);\r\n        await ElectivAPI.getAPI().updateTeilnahme(this.props.teilnahme);\r\n        this.props.getTeilnahmen();\r\n      }else{\r\n\r\n      }\r\n      \r\n    };\r\n\r\n    // Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\r\n    componentDidMount() {\r\n      this.getProjekt();\r\n    }\r\n\r\n    // Wenn die Componente geupdatet wird\r\n    componentDidUpdate(prevProps){\r\n      if((this.props.show) && (this.props.show !== prevProps.show)) {\r\n        this.getProjekt();\r\n      }\r\n    }\r\n\r\n    /** Renders the component */\r\n    render(){\r\n        const {classes, teilnahme} = this.props;\r\n        const { projektZustand, projektID, projektName, ECTS, semester, module, dozentName, note, loadingInProgress, error } = this.state;\r\n\r\n        return(\r\n          <>\r\n                <StyledTableRow key={projektID}>\r\n                  <StyledTableCell align=\"left\">{projektName}</StyledTableCell>\r\n                  <StyledTableCell align=\"center\">{ECTS}</StyledTableCell>\r\n                  <StyledTableCell align=\"center\">{semester}</StyledTableCell>\r\n                  <StyledTableCell align=\"center\">{dozentName}</StyledTableCell> \r\n                  { projektZustand === 'Bewertung abgeschlossen' ?\r\n                  <StyledTableCell align=\"center\">{note}</StyledTableCell>\r\n                  :\r\n                  <StyledTableCell align=\"center\"></StyledTableCell> \r\n                  }\r\n                  <StyledTableCell align=\"right\" className={classes.breite}>               \r\n                                  { module ?\r\n                                    <FormControl className={classes.formControl}>\r\n                                      <InputLabel>Modul</InputLabel> \r\n                                        <Select value = {teilnahme.anrechnung} onChange={this.handleChange}>\r\n                                          {\r\n                                          module.map(modul =>\r\n                                          <MenuItem value={modul.getID()}><em>{modul.getname()}</em></MenuItem>\r\n                                          )\r\n                                          }\r\n                                        </Select>                                                                \r\n                                    </FormControl>                                  \r\n                                    :\r\n                                    <FormControl className={classes.formControl}>\r\n                                      <InputLabel>Modul</InputLabel>\r\n                                        <Select value=\"\">\r\n                                          <MenuItem value=\"\"><em></em></MenuItem>\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                  }\r\n                  </StyledTableCell>\r\n                  </StyledTableRow>\r\n                  <StyledTableRow> \r\n                    <StyledTableCell colspan=\"10\" className={classes.laden}>\r\n                      <LoadingProgress show={loadingInProgress}></LoadingProgress>\r\n                      <ContextErrorMessage error={error} contextErrorMsg = {'Diese Teilnahme konnte nicht geladen werden'} onReload={this.getProjekt} />\r\n                    </StyledTableCell>\r\n                  </StyledTableRow>\r\n          </>                        \r\n        );\r\n    }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(2),\r\n        marginBottom: theme.spacing(2),\r\n        padding: theme.spacing(1),\r\n    },\r\n    content: {\r\n        margin: theme.spacing(1),\r\n      },\r\n    table: {\r\n        minWidth: 700,\r\n      },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 200,\r\n        textAlign: \"left\"\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n        },\r\n    laden: {\r\n      padding: 0\r\n    },\r\n    breite: {\r\n      width: 220\r\n    }\r\n    });\r\n\r\n/** PropTypes */\r\nMeineProjekteEintrag.propTypes = {\r\n    /** @ignore */\r\n    classes: PropTypes.object.isRequired,\r\n    projekt: PropTypes.object.isRequired,\r\n    show: PropTypes.bool.isRequired\r\n  }\r\n  \r\n\r\nexport default withStyles(styles)(MeineProjekteEintrag);\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ElectivAPI from '../api/ElectivAPI';\r\nimport { withStyles, Button, Grid } from '@material-ui/core';\r\nimport { withRouter } from 'react-router-dom';\r\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\r\nimport LoadingProgress from './dialogs/LoadingProgress';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport MeineProjekteEintrag from './MeineProjekteEintrag';\r\n\r\n/**\r\n * Es werden alle Projekte des aktuell eingeloggten Studenten angezeigt\r\n * \r\n * @see See [MeineProjekteEintrag](#meineprojekteeintrag)\r\n * \r\n * Hierfür werden alle Teilnahmen des aktuell eingeloggten Student geladen und in die Componente MeineProjekteEintrag gemappt\r\n * \r\n */\r\n\r\n\r\n//Css Style für Tabellen Zellen\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n      backgroundColor: theme.palette.primary.main,\r\n      color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n      fontSize: 14,\r\n    },\r\n  }))(TableCell);\r\n\r\n\r\n//Css Style für Tabllen Zeilen\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n      '&:nth-of-type(4n+1)': {\r\n        backgroundColor: theme.palette.action.hover,\r\n      },\r\n    },\r\n  }))(TableRow);\r\n\r\n\r\nclass MeineProjekte extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        // initiiere einen leeren state\r\n        this.state = {\r\n            teilnahmen : [],\r\n            currentStudentName: null,\r\n            currentStudentmat_nr: null,\r\n            error: null,\r\n            loadingInProgress: false, \r\n        };\r\n    }\r\n\r\n\r\n    // API Anbindung um Teilnahmen des Students vom Backend zu bekommen \r\n    getTeilnahmen = () => {\r\n            ElectivAPI.getAPI().getTeilnahmen(this.props.currentStudent.id)\r\n            .then(teilnahmeBOs =>\r\n                this.setState({\r\n                    teilnahmen: teilnahmeBOs,\r\n                    error: null,\r\n                    loadingInProgress: false,\r\n                })).catch(e =>\r\n                    this.setState({\r\n                        teilnahmen: [],\r\n                        error: e,\r\n                        loadingInProgress: false,\r\n                    }));\r\n            this.setState({\r\n                error: null,\r\n                loadingInProgress: true,\r\n                loadingTeilnahmeError: null\r\n            });\r\n    }\r\n\r\n    // Funktion, die einen Print-Befehl ausführt\r\n    printSemesterbericht= () => {\r\n      window.print()\r\n    }\r\n\r\n    // Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\r\n    componentDidMount() {\r\n        this.getTeilnahmen();\r\n        this.setState({\r\n            currentStudentName: this.props.currentStudent.getname(),\r\n            currentStudentmat_nr: this.props.currentStudent.getmat_nr(),\r\n        })\r\n    }\r\n    \r\n    render(){\r\n\r\n        const { classes } = this.props;\r\n        const { teilnahmen, currentStudentName, currentStudentmat_nr, error, loadingInProgress} = this.state;\r\n        \r\n        return(\r\n            <div className={classes.root}>\r\n                 <Grid container className={classes.header} justify=\"flex-end\" alignItems=\"center\" spacing={2}>\r\n                    <Grid item xs/>\r\n                    <Grid item>\r\n                    <Button variant=\"outlined\" color=\"primary\" disableRipple \r\n                    style={{ backgroundColor: 'transparent', textTransform: 'None'}}\r\n                    >Name: {currentStudentName}<br/>Matrikelnummer: {currentStudentmat_nr}</Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <TableContainer component={Paper}>\r\n                    <Table className={classes.table} aria-label=\"customized table\">\r\n                        <TableHead>\r\n                            <StyledTableRow>\r\n                                <StyledTableCell>Projekt</StyledTableCell>\r\n                                <StyledTableCell align=\"center\">ECTS</StyledTableCell>\r\n                                <StyledTableCell align=\"center\">Semester</StyledTableCell>\r\n                                <StyledTableCell align=\"center\">Dozent</StyledTableCell>\r\n                                <StyledTableCell align=\"center\">Note</StyledTableCell>\r\n                                <StyledTableCell align=\"center\">Modulzuweisung</StyledTableCell>\r\n                            </StyledTableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {\r\n                                teilnahmen ?\r\n                                <>\r\n                                {\r\n                                    teilnahmen.map(teilnahme => \r\n                                        <MeineProjekteEintrag key={teilnahme.getID()} teilnahme = {teilnahme} \r\n                                        getTeilnahmen = {this.getTeilnahmen}\r\n                                        show={this.props.show}\r\n                                    />) \r\n                                }\r\n                                </>\r\n                                :\r\n                                <></>\r\n                            }\r\n                        </TableBody>\r\n                    </Table>\r\n                    <LoadingProgress show={loadingInProgress} />\r\n                    <ContextErrorMessage error={error} contextErrorMsg = {'Deine Projekte konnten nicht geladen werden'} onReload={this.getTeilnahmen} /> \r\n                </TableContainer>\r\n                <Button variant=\"contained\" color=\"primary\" size=\"medium\" className={classes.button} startIcon={<SaveIcon />} onClick={this.printSemesterbericht}>\r\n                Notenspiegel\r\n                </Button>             \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(2),\r\n        marginBottom: theme.spacing(2),\r\n      },\r\n      content: {\r\n        margin: theme.spacing(1),\r\n      },\r\n      table: {\r\n        minWidth: 700,\r\n      },\r\n      header:{\r\n        marginBottom: theme.spacing(1),\r\n        paddingLeft: theme.spacing(1),\r\n        paddingRight: theme.spacing(1),\r\n      },\r\n      button:{\r\n          marginTop: theme.spacing(2),\r\n          marginBottom: theme.spacing(3),\r\n          float: 'right'\r\n      }\r\n  });\r\n\r\n/** PropTypes */\r\nMeineProjekte.propTypes = {\r\n    /** @ignore */\r\n    classes: PropTypes.object.isRequired,\r\n    /** @ignore */\r\n    location: PropTypes.object.isRequired,\r\n    show: PropTypes.bool.isRequired\r\n}\r\n\r\n\r\n\r\nexport default withRouter(withStyles(styles)(MeineProjekte));\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ElectivAPI from '../api/ElectivAPI';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport LoadingProgress from './dialogs/LoadingProgress';\r\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\r\n\r\n/**\r\n * Es wird eine einzelne Teilnahme an einem Projekt mit allen not wendigen Informationen dargestellt\r\n * \r\n * Hierfür werden Projektname, Anzahl der ECTS, Semester, Dozent , die Note angezeigt\r\n * \r\n * Außerdem kann der Student nach der Benotung seine Teilnahme einem Modul zuweisen\r\n * \r\n */\r\n\r\n\r\n//Css Style Klassen für die Tabellen Zellen\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.primary.main,\r\n    color: theme.palette.common.white,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\n//Css Style Klassen für die Tabellen Zeilen\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    '&:nth-of-type(4n+1)': {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\n\r\nclass SemesterberichtEintrag extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        // initiiere einen leeren state\r\n        this.state = {\r\n            projekt: null,\r\n            projektID: null,\r\n            projektName: null,\r\n            projektZustand: null,\r\n            ECTS: null,\r\n            semester: null,\r\n            module: null,\r\n            dozentName: null,\r\n            note: null,\r\n            loadingInProgress: false,\r\n            error: null\r\n        };\r\n    }\r\n\r\n    // API Anbindung um Projekte vom Backend zu bekommen \r\n    getProjekt = () => {\r\n      ElectivAPI.getAPI().getProjekt(this.props.teilnahme.lehrangebot)\r\n      .then(projektBO =>\r\n          this.setState({\r\n            projekt: projektBO,\r\n            projektID: projektBO.id,\r\n            projektName: projektBO.name,\r\n            projektZustand: projektBO.aktueller_zustand,\r\n            loadingInProgress: false,\r\n            error: null,\r\n          })).then(()=>{\r\n            this.getPerson()\r\n            this.getBewertung()\r\n            this.getModule_by_projekt_id()\r\n            this.getSemester_by_id()\r\n            this.getECTS()\r\n          })\r\n          .catch(e =>\r\n              this.setState({\r\n                projekt: null,\r\n                projektID: null,\r\n                projektName: null,\r\n                loadingInProgress: false,\r\n                error: e,\r\n              }));\r\n      this.setState({\r\n        loadingInProgress: true,\r\n        error: null\r\n      });\r\n    }\r\n\r\n    // API Anbindung um ECTS einer Projektart vom Backend zu bekommen \r\n    getECTS = () => {\r\n      ElectivAPI.getAPI().getProjektartById(this.state.projekt.art)\r\n      .then(ProjektartBO =>\r\n          this.setState({\r\n              ECTS: ProjektartBO.ects,\r\n              error: null,\r\n              loadingInProgress: false,\r\n          }))\r\n          .catch(e =>\r\n              this.setState({\r\n                  ECTS: null,\r\n                  error: e,\r\n                  loadingInProgress: false,\r\n              }));\r\n      this.setState({\r\n          error: null,\r\n          loadingInProgress: true\r\n      });\r\n    }\r\n\r\n    // Wenn die Teilnahme schon bewertet wurde, gebe die Note aus\r\n    getBewertung = () => {\r\n      if (this.props.teilnahme.resultat !== null){\r\n      ElectivAPI.getAPI().getBewertung(this.props.teilnahme.resultat)\r\n      .then(bewertungBO =>\r\n          this.setState({\r\n              note: bewertungBO.getnote(),\r\n              error: null,\r\n              loadingInProgress: false,\r\n          }))\r\n          .catch(e =>\r\n              this.setState({\r\n                  note: null,\r\n                  error: e,\r\n                  loadingInProgress: false,\r\n              }));\r\n      this.setState({\r\n          error: null,\r\n          loadingInProgress: true\r\n      });\r\n    }\r\n    }\r\n\r\n    // API Anbindung um Semester vom Backend zu bekommen \r\n    getSemester_by_id = () => {\r\n      ElectivAPI.getAPI().getSemester_by_id(this.state.projekt.getHalbjahr())\r\n      .then(semesterBO =>\r\n          this.setState({\r\n              semester: semesterBO.name,\r\n              error: null,\r\n              loadingInProgress: false,\r\n          }))\r\n          .catch(e =>\r\n              this.setState({\r\n                  semester: null,\r\n                  error: e,\r\n                  loadingInProgress: false,\r\n              }));\r\n      this.setState({\r\n          error: null,\r\n          loadingInProgress: true\r\n      });\r\n    }\r\n\r\n    // API Anbindung um wählbare Module für ein Projekt vom Backend zu bekommen \r\n    getModule_by_projekt_id = () => {\r\n      ElectivAPI.getAPI().getModule_by_projekt_id(this.state.projektID)\r\n      .then(modulBOs =>\r\n          this.setState({\r\n              module: modulBOs,\r\n              error: null,\r\n              loadingInProgress: false,\r\n          }))\r\n          .catch(e =>\r\n              this.setState({\r\n                  module: null,\r\n                  error: e,\r\n                  loadingInProgress: false,\r\n              }));\r\n      this.setState({\r\n          error: null,\r\n          loadingInProgress: true\r\n      });\r\n    }\r\n\r\n// API Anbindung um Dozent vom Backend zu bekommen \r\n    getPerson = () => {\r\n      ElectivAPI.getAPI().getPerson(this.state.projekt.dozent)\r\n      .then(personBO =>\r\n          this.setState({\r\n              dozentName: personBO.getname(),\r\n              error: null,\r\n              loadingInProgress: false,\r\n          }))\r\n          .catch(e =>\r\n              this.setState({\r\n                  dozentName: null,\r\n                  error: e,\r\n                  loadingInProgress: false,\r\n              }));\r\n      this.setState({\r\n          error: null,\r\n          loadingInProgress: true\r\n      });\r\n    }\r\n\r\n    // bei Änderung des Modul-Dropdown-Menüs wird das ausgewähte Modul im Backend als Anrechnung der Teilnahme in die Datenbank eingefügt \r\n    handleChange = async (edv) => {\r\n      if (this.state.note === null){\r\n        this.props.teilnahme.setAnrechnung(edv.target.value);\r\n        // console.log(`Option selected:`, edv.target.value);\r\n        await ElectivAPI.getAPI().updateTeilnahme(this.props.teilnahme);\r\n        this.props.getTeilnahmen();\r\n      }else{\r\n\r\n      }\r\n      \r\n    };\r\n\r\n    // Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\r\n    componentDidMount() {\r\n      this.getProjekt();\r\n    }\r\n\r\n    // Wenn die Componente geupdatet wird\r\n    componentDidUpdate(prevProps){\r\n      if((this.props.show) && (this.props.show !== prevProps.show)) {\r\n        this.getProjekt();\r\n      }\r\n    }\r\n\r\n    /** Renders the component */\r\n    render(){\r\n        const {classes} = this.props;\r\n        const { projektZustand, projektID, projektName, ECTS, dozentName, note, loadingInProgress, error } = this.state;\r\n\r\n        return(\r\n          <>\r\n                <StyledTableRow key={projektID}>\r\n                  <StyledTableCell align=\"left\" className={classes.projekt}>{projektName}</StyledTableCell>\r\n                  <StyledTableCell align=\"center\" className={classes.dozent}>{dozentName}</StyledTableCell> \r\n                  <StyledTableCell align=\"center\">{ECTS}</StyledTableCell>\r\n                  { projektZustand === 'Bewertung abgeschlossen' ?\r\n                  <StyledTableCell align=\"center\">{note}</StyledTableCell>\r\n                  :\r\n                  <StyledTableCell align=\"center\"></StyledTableCell> \r\n                  }\r\n                  </StyledTableRow>\r\n                  <StyledTableRow> \r\n                    <StyledTableCell colspan=\"10\" className={classes.laden}>\r\n                      <LoadingProgress show={loadingInProgress}></LoadingProgress>\r\n                      <ContextErrorMessage error={error} contextErrorMsg = {'Diese Teilnahme konnte nicht geladen werden'} onReload={this.getProjekt} />\r\n                    </StyledTableCell>\r\n                  </StyledTableRow>\r\n          </>                        \r\n        );\r\n    }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    table: {\r\n        minWidth: 700,\r\n      },\r\n    laden: {\r\n      padding: 0\r\n    },\r\n    projekt:{\r\n      width: 300\r\n    },\r\n    dozent:{\r\n      width: 250\r\n    }\r\n    });\r\n\r\n/** PropTypes */\r\nSemesterberichtEintrag.propTypes = {\r\n    /** @ignore */\r\n    classes: PropTypes.object.isRequired,\r\n    projekt: PropTypes.object.isRequired,\r\n    show: PropTypes.bool.isRequired\r\n  }\r\n  \r\n\r\nexport default withStyles(styles)(SemesterberichtEintrag);\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ElectivAPI from '../api/ElectivAPI';\r\nimport { withStyles, Button, Typography, Grid, MenuItem, FormControl, InputLabel, Select } from '@material-ui/core';\r\nimport { withRouter } from 'react-router-dom';\r\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\r\nimport LoadingProgress from './dialogs/LoadingProgress';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport SemesterberichtEintrag from './SemesterberichtEintrag';\r\n\r\n/**\r\n * Es werden alle Projekte des aktuell eingeloggten Studenten nach dem ausgewählten Semester angezeigt\r\n * \r\n * @see See [SemesterberichtEintrag](#semesterberichteintrag)\r\n * \r\n * Hierfür werden alle Teilnahmen des aktuell eingeloggten Student eines bestimmten Semesters geladen \r\n * und in die Componente MeineProjekteEintrag gemappt\r\n * \r\n */\r\n\r\n\r\n//Css Style für Tabellen Zellen\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n      backgroundColor: theme.palette.primary.main,\r\n      color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n      fontSize: 14,\r\n    },\r\n  }))(TableCell);\r\n\r\n\r\n//Css Style für Tabllen Zeilen\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n      '&:nth-of-type(4n+1)': {\r\n        backgroundColor: theme.palette.action.hover,\r\n      },\r\n    },\r\n  }))(TableRow);\r\n\r\n\r\nclass Semesterbericht extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        // initiiere einen leeren state\r\n        this.state = {\r\n            teilnahmen : [],\r\n            semester: [],\r\n            semesterwahl: null,\r\n            currentStudentName: null,\r\n            currentStudentmat_nr: null,\r\n            error: null,\r\n            loadingInProgress: false, \r\n        };\r\n    }\r\n\r\n\r\n    // API Anbindung um Teilnahmen des Students vom Backend zu bekommen \r\n    getTeilnahmen = () => {\r\n            ElectivAPI.getAPI().getTeilnahmenBySemester(this.props.currentStudent.id, this.state.semesterwahl)\r\n            .then(teilnahmeBOs =>\r\n                this.setState({\r\n                    teilnahmen: teilnahmeBOs,\r\n                    error: null,\r\n                    loadingInProgress: false,\r\n                })).catch(e =>\r\n                    this.setState({\r\n                        teilnahmen: [],\r\n                        error: e,\r\n                        loadingInProgress: false,\r\n                    }));\r\n            this.setState({\r\n                error: null,\r\n                loadingInProgress: true,\r\n                loadingTeilnahmeError: null\r\n            });\r\n    }\r\n\r\n    // API Anbindung um alle Semester vom Backend zu bekommen \r\n    getSemesterOfStudent = () => {\r\n        ElectivAPI.getAPI().getSemesterOfStudent(this.props.currentStudent.id)\r\n        .then(semesterBOs =>\r\n            this.setState({\r\n                semester: semesterBOs,\r\n                error: null,\r\n                loadingInProgress: false,\r\n            })).catch(e =>\r\n                this.setState({\r\n                    semester: [],\r\n                    error: e,\r\n                    loadingInProgress: false,\r\n                }));\r\n        this.setState({\r\n            error: null,\r\n            loadingInProgress: true,\r\n            loadingTeilnahmeError: null\r\n        });\r\n    }\r\n\r\n  //bei Änderung des Semester Dropdown Menüs wird das ausgewählte Semester im State als semesterwahl gesetzt\r\n  semesterChange = (semester) => {\r\n    this.setState({\r\n      semesterwahl: semester.target.value,\r\n    })\r\n    setTimeout(() => {\r\n    //console.log('Ausgewählte Semester ID:',this.state.semesterwahl)   \r\n    this.getTeilnahmen();\r\n    }, 0);\r\n  };\r\n\r\n    // Funktion, die einen Print-Befehl ausführt\r\n    printSemesterbericht= () => {\r\n      window.print()\r\n    }\r\n\r\n    // Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\r\n    componentDidMount() {\r\n        this.getSemesterOfStudent();\r\n        this.setState({\r\n            currentStudentName: this.props.currentStudent.getname(),\r\n            currentStudentmat_nr: this.props.currentStudent.getmat_nr(),\r\n        })\r\n    }\r\n    \r\n    render(){\r\n\r\n        const { classes } = this.props;\r\n        const {  semesterwahl, teilnahmen, semester, currentStudentName, currentStudentmat_nr, error, loadingInProgress} = this.state;\r\n        \r\n        return(\r\n            <div className={classes.root}>\r\n                <Grid container className={classes.header} justify=\"center\" alignItems=\"center\" spacing={2}>\r\n                    <Grid item>\r\n                    { semester ?\r\n                        <FormControl className={classes.formControl}>\r\n                        <InputLabel>Semester</InputLabel> \r\n                            <Select value={semesterwahl} onChange={this.semesterChange}>\r\n                            {\r\n                            semester.map(semester =>\r\n                            <MenuItem value={semester.getID()}><em>{semester.getname()}</em></MenuItem>\r\n                            )\r\n                            }\r\n                            </Select>                                                                \r\n                        </FormControl>                                  \r\n                        :\r\n                        <FormControl className={classes.formControl}>\r\n                        <InputLabel>Semester</InputLabel>\r\n                            <Select value=\"\">\r\n                            <MenuItem value=\"\"><em>Semester noch nicht geladen</em></MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    }\r\n                    </Grid>\r\n                    <Grid item xs/>\r\n                    <Grid item>\r\n                        <Button variant=\"outlined\" color=\"primary\" disableRipple \r\n                        style={{ backgroundColor: 'transparent', textTransform: 'None'}}\r\n                        >Name: {currentStudentName}<br/>Matrikelnummer: {currentStudentmat_nr}</Button>\r\n                    </Grid>\r\n                </Grid>\r\n                { semesterwahl ? \r\n                <>\r\n                <TableContainer component={Paper}>\r\n                    <Table className={classes.table} aria-label=\"customized table\">\r\n                        <TableHead>\r\n                            <StyledTableRow>\r\n                                <StyledTableCell>Projekt</StyledTableCell>                                \r\n                                <StyledTableCell align=\"center\">Dozent</StyledTableCell>\r\n                                <StyledTableCell align=\"center\">ECTS</StyledTableCell>\r\n                                <StyledTableCell align=\"center\">Note</StyledTableCell>\r\n                            </StyledTableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {\r\n                                teilnahmen ?\r\n                                <>\r\n                                {\r\n                                    teilnahmen.map(teilnahme => \r\n                                        <SemesterberichtEintrag key={teilnahme.getID()} teilnahme = {teilnahme} \r\n                                        getTeilnahmen = {this.getTeilnahmen}\r\n                                        show={this.props.show}\r\n                                    />) \r\n                                }\r\n                                </>\r\n                                :\r\n                                <></>\r\n                            }\r\n                        </TableBody>\r\n                    </Table>\r\n                    <LoadingProgress show={loadingInProgress} />\r\n                    <ContextErrorMessage error={error} contextErrorMsg = {'Deine Projekte konnten nicht geladen werden'} onReload={this.getTeilnahmen} /> \r\n                </TableContainer>\r\n                <Button variant=\"contained\" color=\"primary\" size=\"medium\" className={classes.button} startIcon={<SaveIcon />} onClick={this.printSemesterbericht}>\r\n                Semesterbericht\r\n                </Button> \r\n                </>\r\n                :\r\n                <>\r\n                <Typography className={classes.warnung}> Bitte wählen Sie zunächst ein Semester aus</Typography>\r\n                <LoadingProgress show={loadingInProgress} />\r\n                <ContextErrorMessage error={error} contextErrorMsg={`Semester konnten nicht geladen werden`} onReload={this.getSemesterOfStudent}/>\r\n                </>\r\n                }            \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(2),\r\n        marginBottom: theme.spacing(2)\r\n      },\r\n      table: {\r\n        minWidth: 700,\r\n      },\r\n      header:{\r\n        marginBottom: theme.spacing(1),\r\n        paddingLeft: theme.spacing(1),\r\n        paddingRight: theme.spacing(1)\r\n      },\r\n      button:{\r\n          marginTop: theme.spacing(2),\r\n          marginBottom: theme.spacing(3),\r\n          float: 'right'\r\n      },\r\n      formControl: {\r\n          minWidth: 120,\r\n          marginBottom: theme.spacing(2),\r\n      },\r\n      warnung: {\r\n        color: theme.palette.secondary.main,\r\n        paddingLeft: theme.spacing(1)\r\n      }\r\n  });\r\n\r\n/** PropTypes */\r\nSemesterbericht.propTypes = {\r\n    /** @ignore */\r\n    classes: PropTypes.object.isRequired,\r\n    /** @ignore */\r\n    location: PropTypes.object.isRequired,\r\n    show: PropTypes.bool.isRequired\r\n}\r\n\r\n\r\n\r\nexport default withRouter(withStyles(styles)(Semesterbericht));\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport ContextErrorMessage from './ContextErrorMessage';\r\nimport LoadingProgress from './LoadingProgress';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport { ListItemSecondaryAction, Typography, IconButton } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { ElectivAPI } from '../../api';\r\n\r\n/**\r\n * Es wird ein einzelner Student und seiner Matrikelnummer dargestellt\r\n * \r\n * Man kann Teilnahme hinzufügen\r\n */\r\n\r\n\r\n\r\n\r\nclass AddStudentEintrag extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    // initiiere ein state \r\n    this.state = {\r\n      student: props.student,\r\n      addButtonDisabled: false,\r\n      error: null,\r\n      loadingInProgress: false\r\n    };\r\n  }\r\n\r\n  //fügt Teilnahme zu dem ausgewählten Prjekt hinzu\r\n  addTeilnahme = () => {\r\n    this.setState({ addButtonDisabled: true });\r\n    ElectivAPI.getAPI().setTeilnahme(this.props.currentProjekt, this.state.student.id);\r\n  }\r\n\r\n\r\n\r\n  /** Renders the component */\r\n  render() {\r\n    const { classes, student } = this.props;\r\n    const { error, loadingInProgress } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <ListItem className={classes.root}>\r\n          <Typography >{student.mat_nr}</Typography>\r\n          <Typography className={classes.marginLeft}>{student.name}</Typography>\r\n          <ListItemSecondaryAction>\r\n            <IconButton disabled={this.state.addButtonDisabled}><AddIcon onClick={this.addTeilnahme} /></IconButton>\r\n          </ListItemSecondaryAction>\r\n        </ListItem>\r\n        <ListItem>\r\n          <LoadingProgress show={loadingInProgress}></LoadingProgress>\r\n          <ContextErrorMessage error={error} contextErrorMsg={'Diese Teilnahme konnte nicht geladen werden'} onReload={this.getProjekt} />\r\n        </ListItem>\r\n        <Divider />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n    marginTop: '16px'\r\n  },\r\n  marginLeft: {\r\n    marginLeft: theme.spacing(2)\r\n  }\r\n});\r\n\r\n/** PropTypes */\r\nAddStudentEintrag.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** Projekt to be rendered */\r\n  student: PropTypes.object.isRequired,\r\n  show: PropTypes.bool.isRequired\r\n}\r\n\r\n\r\n\r\nexport default withStyles(styles)(AddStudentEintrag);\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ElectivAPI from '../api/ElectivAPI';\r\nimport { withStyles, TableCell, TableRow, MenuItem, FormControl, Select} from '@material-ui/core';\r\nimport LoadingProgress from './dialogs/LoadingProgress';\r\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\r\n\r\n//Icons importieren\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\n\r\n/**\r\n * Rendert die Einträge der Projekte (vom Studenten den Namen, die Matrikelnummer, die Note).\r\n * Die Teilnahme eines Studenten kann bei einem aktuellen Projekt entfernt werden.\r\n * Bei einem abgeschlossenen Projekt kann die Teilnahme eines Studenten nicht mehr entfernt werden.\r\n * Die Note kann trotzdem weiterhin nachbearbeitet werden.\r\n * \r\n * \r\n */\r\n\r\n//Css Style für die Tabellen Zellen\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.primary.main,\r\n    color: theme.palette.common.white,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\n//Css Style für die Tabellen Zeilen\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    '&:nth-of-type(4n+1)': {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nclass ProjektPflegenEintrag extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        // Initiert den state\r\n        this.state = {\r\n            teilnahmen : [],\r\n            bewertungen: [],\r\n            studentID: null,\r\n            studentName: null,\r\n            mat_nr: null,\r\n            note: [],\r\n            loadingInProgress: false,\r\n            error: null\r\n        };\r\n    }\r\n\r\n    //Button um die Teilnahme eines Studenten zu entfernen\r\n    teilnahmeAbwaehlenButtonClicked = event => {\r\n      //Logik fuer Teilnahme abwaehlen Button\r\n      this.setState({teilnahmeAbwaehlenButtonDisabled:true});\r\n      ElectivAPI.getAPI().deleteTeilnahme(this.props.teilnahme.lehrangebot, this.state.studentID).then(()=>this.props.reloadteilnahmen(this.props.teilnahme.lehrangebot));\r\n      \r\n    }\r\n    \r\n    // API Anbindung teilnehmenden Studenten des Projekts nach der StudentenID vom Backend zu bekommen \r\n    getStudentByID = () => {\r\n        ElectivAPI.getAPI().getStudentByID(this.props.teilnahme.getteilnehmer())\r\n        .then(studentBO =>\r\n            this.setState({                       //neuer status wenn fetch komplett\r\n              studentID: studentBO.getID(),\r\n              studentName: studentBO.getname(),\r\n              mat_nr:studentBO.getmat_nr(),\r\n              loadingInProgress: false,           // deaktiviere ladeindikator\r\n              error: null,\r\n            })).then(()=>{\r\n              \r\n            })\r\n            .catch(e =>\r\n                this.setState({\r\n                  student: null,\r\n                  studentID: null,\r\n                  studentName: null,\r\n                  loadingInProgress: false,\r\n                  error: e,\r\n                }));\r\n        this.setState({\r\n          loadingInProgress: true,\r\n          error: null\r\n        });\r\n      }\r\n\r\n    // API Anbindung um die möglichen Bewertungen vom Backende zu erhalten \r\n    getBewertungen=()=>{\r\n      ElectivAPI.getAPI().getBewertungen()\r\n      .then(bewertungBOs =>\r\n        this.setState({\r\n            bewertungen: bewertungBOs,\r\n            error: null,\r\n            loadingInProgress: false,\r\n        })).catch(e =>\r\n            this.setState({\r\n                bewertung: [],\r\n                error: e,\r\n                loadingInProgress: false,\r\n            }));\r\n      this.setState({\r\n          error: null,\r\n          loadingInProgress: true,\r\n          loadingProjekteError: null\r\n      });\r\n    }\r\n    \r\n    // API Anbindung um die Bewertung des Students vom Backend zu bekommen\r\n    getBewertung = () => {\r\n        ElectivAPI.getAPI().getBewertung(this.props.teilnahme.resultat)\r\n        .then(bewertungBO =>\r\n            this.setState({\r\n                note: bewertungBO.getID(),\r\n                error: null,\r\n                loadingInProgress: false,\r\n            }))\r\n            .catch(e =>\r\n                this.setState({\r\n                    note: null,\r\n                    error: null,\r\n                    loadingInProgress: false,\r\n                }));\r\n        this.setState({\r\n            error: null,\r\n            loadingInProgress: true\r\n        });\r\n      }\r\n\r\n    \r\n    //Bei Änderung der Bewertung in der Select Komponente wird die Bewertung im Backend geändert\r\n    handleChange = async (resultat) => { \r\n              this.props.teilnahme.setResultat(resultat.target.value); \r\n              this.setState({\r\n                note: resultat.target.value\r\n              })               \r\n              await ElectivAPI.getAPI().updateTeilnahme(this.props.teilnahme)\r\n              //this.getBewertung()\r\n    };\r\n\r\n    /** Lifecycle Methode, die bei dem Einfügen der Komponente in den Browser DOM aufgerufen wird*/\r\n    componentDidMount() {\r\n      this.getStudentByID();\r\n      this.getBewertung();\r\n      this.getBewertungen();\r\n    }\r\n\r\n    /** Rendert die Komponente*/\r\n    render(){\r\n        const {classes,currentProjektBO} = this.props;\r\n        const {bewertungen, studentName, mat_nr, note,  loadingInProgress, error } = this.state;\r\n\r\n        return(\r\n            //Tabelleneinträge für die Tabelle in der ProjektBearbeiten.js File\r\n            <>\r\n              <StyledTableRow >\r\n                <StyledTableCell align=\"left\" component=\"th\" scope=\"row\">{studentName}</StyledTableCell>\r\n                <StyledTableCell align=\"center\">{mat_nr}</StyledTableCell> \r\n                <StyledTableCell align=\"center\">\r\n                {bewertungen?\r\n                    <FormControl className={classes.formControl} >\r\n                            <Select value={note } onChange={this.handleChange}  >\r\n                                {\r\n                                bewertungen.map(bewertung =>\r\n                                <MenuItem value={bewertung.getID()}><em>{bewertung.getnote()}</em></MenuItem>\r\n                                )\r\n                                }\r\n                            </Select>  \r\n                    </FormControl>                                  \r\n                  :\r\n                    <FormControl className={classes.formControl}>\r\n                            <Select value={note} >\r\n                                <MenuItem value={\"\"}><em>Bewertungen nicht geladen</em></MenuItem>\r\n                            </Select>  \r\n                    </FormControl>\r\n                }      \r\n                </StyledTableCell> \r\n\r\n                <StyledTableCell align=\"center\">\r\n                  {currentProjektBO.aktueller_zustand === \"Bewertung abgeschlossen\"?\r\n                    <>\r\n                      <IconButton className={classes.teilnahmeAbwaehlenButton}  variant=\"contained\"  onClick={this.teilnahmeAbwaehlenButtonClicked} disabled > <DeleteIcon /></IconButton>\r\n                    </>\r\n                    :\r\n                    <>\r\n                      <IconButton className={classes.teilnahmeAbwaehlenButton}  variant=\"contained\"  onClick={this.teilnahmeAbwaehlenButtonClicked} > <DeleteIcon /></IconButton>\r\n                    </>\r\n                  }  \r\n                </StyledTableCell>\r\n              </StyledTableRow>\r\n              <StyledTableRow> \r\n              <StyledTableCell colspan=\"10\" className={classes.laden}>\r\n                <LoadingProgress show={loadingInProgress}></LoadingProgress>\r\n                <ContextErrorMessage error={error} contextErrorMsg = {'Diese Teilnahme konnte nicht geladen werden'}\r\n                      onReload={()=>{\r\n                        this.getStudentByID();\r\n                        this.getBewertung();\r\n                        this.getBewertungen();\r\n                  }} />\r\n              </StyledTableCell>\r\n            </StyledTableRow>\r\n          </>\r\n        );\r\n    }\r\n}\r\n\r\n//Css Komponent Spezifischer Style \r\nconst styles = theme => ({\r\n    root: {\r\n      width: '100%',\r\n      marginTop: theme.spacing(2),\r\n      marginBottom: theme.spacing(2),\r\n      padding: theme.spacing(1),\r\n    },\r\n    content: {\r\n        margin: theme.spacing(1),\r\n      },\r\n    table: {\r\n        minWidth: 700,\r\n      },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 50,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n        },\r\n    selectEmpty: {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n    laden: {\r\n      padding: 0\r\n    }\r\n    });\r\n\r\n/** PropTypes */\r\nProjektPflegenEintrag.propTypes = {\r\n    /** @ignore */\r\n    classes: PropTypes.object.isRequired,\r\n    /** Projekt to be rendered */\r\n    projekt: PropTypes.object.isRequired,\r\n    /** The state of this ProjektListeEintrag. If true the customer is shown with its accounts */\r\n    expandedState: PropTypes.bool.isRequired,\r\n    /** The handler responsible for handle expanded state changes (exanding/collapsing) of this ProjektListeEintrag \r\n     * \r\n     * Signature: onExpandedStateChange(CustomerBO customer)\r\n     */\r\n    onExpandedStateChange: PropTypes.func.isRequired,\r\n\r\n    /** \r\n     *  Event Handler function which is called after a sucessfull delete of this customer.\r\n     * \r\n     * Signature: onCustomerDelete(CustomerBO customer)\r\n     */\r\n    onCustomerDeleted: PropTypes.func.isRequired,\r\n    /** wenn true, dozent wird geladen */\r\n    show: PropTypes.bool.isRequired\r\n  }\r\n  \r\n\r\n\r\nexport default withStyles(styles)(ProjektPflegenEintrag);","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ElectivAPI from '../api/ElectivAPI';\r\nimport { withStyles, Button, Grid, Typography,Fab,Select,FormControl,\r\n  MenuItem,Paper,Table,TableRow,TableBody,TableHead,TableCell,TableContainer, InputLabel} from '@material-ui/core';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport { withRouter } from 'react-router-dom';\r\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\r\nimport LoadingProgress from './dialogs/LoadingProgress';\r\n\r\n//Icons importieren\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\n//import AddStudent Dialog\r\nimport AddStudent from './dialogs/AddStudent';\r\n//import ProjektPflegenEintrag\r\nimport ProjektPflegenEintrag from './ProjektPflegenEintrag';\r\n\r\n\r\n\r\n/**\r\n * dieser Tab wird unter 2 Rollen angezeigt:\r\n * \r\n * Unter der Rolle Dozent:\r\n * Rendert die aktuellen sowie abgeschlossenen Projekte vom Dozenten \r\n * und die Einträge der Projekte mithilfe der ProjektPflegenEintrag Komponente.\r\n * Ein Student kann zu einem aktuellen Projekt hinzugefügt werden.\r\n * Das Projekt kann nach Bewertung in den nächsten Zustand gebracht werden.\r\n * Bei einem abgeschlossenen Projekt kann kein Teilnehmer mehr hinzugefügt werden.\r\n * \r\n * \r\n * Unter der Rolle Admin:\r\n * Rendert alle aktuellen sowie abgeschlossenen Projekte \r\n * und die Einträge der Projekte mithilfe der ProjektPflegenEintrag Komponente.\r\n * Ein Student kann zu einem aktuellen Projekt hinzugefügt werden.\r\n * Das Projekt kann nach Bewertung in den nächsten Zustand gebracht werden.\r\n * Bei einem abgeschlossenen Projekt kann kein Teilnehmer mehr hinzugefügt werden.\r\n * \r\n * \r\n * @see See component [ProjektPflegenEintrag](#projektpflegeneintrag)\r\n * @see See dialong   [AddStudent](#addstudent)\r\n * \r\n */\r\n\r\n//Css Style für Tabellen Zellen\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n      backgroundColor: theme.palette.primary.main,\r\n      color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n      fontSize: 14,\r\n    },\r\n  }))(TableCell);\r\n//Css Style für Tabllen Zeilen\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n      '&:nth-of-type(odd)': {\r\n        backgroundColor: theme.palette.action.hover,\r\n      },\r\n    },\r\n  }))(TableRow);\r\n\r\n\r\nclass ProjektPflegen extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        // Initiert den state\r\n        this.state = {\r\n            teilnahmen:[],\r\n            projektzustand: 10,\r\n            projekte:[],\r\n            currentProjektBO : null,\r\n            abgeschlosseneProjekte: [],\r\n            currentProjekt: null,\r\n            semester: null,\r\n            error: null,\r\n            loadingInProgress: false,\r\n            showAddStudent: false,\r\n            \r\n        };\r\n        this.getTeilnahmenByProjektId=this.getTeilnahmenByProjektId.bind(this)\r\n    }\r\n    \r\n  //API Anbindung um alle aktuellen Projekte vom Backend zu bekommen\r\n  getProjekte = () => {\r\n    //Funtion unter der Rolle des Dozenten \r\n    //API Anbindung holt alle Projekte im richtigen Zustand, vom jeweiligen Dozenten vom Backendconsole.log(\"Hallo\",this.props.currentPerson)\r\n    if (this.props.currentPerson.getrolle()===\"Dozent\"){\r\n      ElectivAPI.getAPI().getProjekteByZustandByDozent(\"in Bewertung\",this.props.currentPerson.getID())\r\n        .then(projekteBOs =>\r\n          this.setState({\t\t\t\t\t\t\t\t    //neuer status wenn fetch komplett\r\n            projekte: projekteBOs, \r\n            loadingInProgress: false,\t\t\t\t// deaktiviere ladeindikator\r\n            error: null,\r\n          })).catch(e =>\r\n            this.setState({\r\n              projekte: [],\r\n              loadingInProgress: false,\r\n              error: e\r\n            }));\r\n      // setze laden auf wahr\r\n      this.setState({\r\n        loadingInProgress: true,\r\n        error: null\r\n      });\r\n    }\r\n    //Funtion unter der Rolle des Admin  \r\n    //API Anbindung holt alle Projekte im richtigen Zustand vom Backend\r\n    if (this.props.currentPerson.getrolle()===\"Admin\"){\r\n\t\t\tElectivAPI.getAPI().getProjekteByZustand(\"in Bewertung\")\r\n        .then(projekteBOs => \r\n          this.setState({\t\t\t\t\t\t\t\t    //neuer status wenn fetch komplett\r\n            projekte: projekteBOs,\t\r\n            loadingInProgress: false,\t\t\t\t// deaktiviere ladeindikator\r\n            error: null,\r\n          })).catch(e =>\r\n            this.setState({\r\n              projekte: [],\r\n              loadingInProgress: false,\r\n              error: e\r\n            }));\r\n    // setze laden auf wahr\r\n    this.setState({\r\n      loadingInProgress: true,\r\n      error: null\r\n    });\r\n    }\r\n  }\r\n\r\n  getAbgeschlosseneProjekte = () => {\r\n    //Funtion unter der Rolle des Dozenten \r\n    //API Anbindung holt alle Projekte im richtigen Zustand, vom jeweiligen Dozenten vom Backend\r\n    if (this.props.currentPerson.getrolle()===\"Dozent\"){\r\n      ElectivAPI.getAPI().getProjekteByZustandByDozent(\"Bewertung abgeschlossen\",this.props.currentPerson.getID())\r\n        .then(projekteBOs =>\r\n          this.setState({\t\t\t\t\t\t\t\t//neuer status wenn fetch komplett\r\n            abgeschlosseneProjekte: projekteBOs, \r\n            loadingInProgress: false,\t\t\t\t// deaktiviere ladeindikator\r\n            error: null,\r\n          })).catch(e =>\r\n            this.setState({\r\n              abgeschlosseneProjekte: [],\r\n              loadingInProgress: false,\r\n              error: e\r\n            }));\r\n      // setze laden auf wahr\r\n      this.setState({\r\n        loadingInProgress: true,\r\n        error: null\r\n      });\r\n    }\r\n    //Funtion unter der Rolle des Admin  \r\n    //API Anbindung holt alle Projekte im richtigen Zustand vom Backend\r\n    if (this.props.currentPerson.getrolle()===\"Admin\"){\r\n      ElectivAPI.getAPI().getProjekteByZustand(\"Bewertung abgeschlossen\")\r\n      .then(projekteBOs => \r\n        this.setState({\t\t\t\t\t\t\t\t//neuer status wenn fetch komplett\r\n          abgeschlosseneProjekte: projekteBOs,\t\r\n          loadingInProgress: false,\t\t\t\t// deaktiviere ladeindikator\r\n          error: null,\r\n        })).catch(e =>\r\n          this.setState({\r\n            abgeschlosseneProjekte: [],\r\n            loadingInProgress: false,\r\n            error: e\r\n          }));\r\n    // setze laden auf wahr\r\n    // console.log(this.projekte.toString());\r\n    this.setState({\r\n      loadingInProgress: true,\r\n      error: null\r\n    });\r\n    }\r\n  }\r\n\r\n  // API Anbindung holt alle Teilnahmen der jeweiligen Projekt ID vom Backend\r\n  getTeilnahmenByProjektId=(id)=>{\r\n    ElectivAPI.getAPI().getTeilnahmenByProjektId(id)\r\n    .then(teilnahmeBOs =>\r\n      this.setState({                 //neuer status wenn fetch komplett\r\n          teilnahmen: teilnahmeBOs,\r\n          error: null,\r\n          loadingInProgress: false,   // deaktiviere ladeindikator\r\n      })\r\n    ).catch(e =>\r\n          this.setState({\r\n              teilnahme: [],\r\n              error: e,\r\n              loadingInProgress: false,\r\n          }));\r\n    this.setState({\r\n        error: null,\r\n        loadingInProgress: true,\r\n        loadingProjekteError: null\r\n    });\r\n  }\r\n\r\n  // API Anbindung um alle Senester vom Backend zu bekommen \r\n  getSemester = () => {\r\n    ElectivAPI.getAPI().getSemester()\r\n    .then(semesterBOs =>\r\n        this.setState({                 //neuer status wenn fetch komplett\r\n            semester: semesterBOs,\r\n            error: null,\r\n            loadingInProgress: false,   // deaktiviere ladeindikator\r\n        })).catch(e =>\r\n            this.setState({\r\n                semester: [],\r\n                error: e,\r\n                loadingInProgress: false,\r\n            }));\r\n    this.setState({\r\n        error: null,\r\n        loadingInProgress: true,\r\n        loadingTeilnahmeError: null\r\n    });\r\n}\r\n  \r\n    \r\n  //bei Klick von dem Button: Bewertung abgeben, wird der Zustand des Projektes in den nächsten Zustand versetzt\r\n  bewertungAbgeschlossenButtonClicked = event => {\r\n    //Logik fuer bewertung abgeschlossen Button\r\n    ElectivAPI.getAPI().setZustandAtProjekt(this.state.currentProjekt, \"Bewertung abgeschlossen\").then(()=>{\r\n      this.getProjekte()\r\n      this.getAbgeschlosseneProjekte()\r\n      this.setState({\r\n        currentProjekt: null,\r\n        currentProjektBO: null,\r\n        teilnahmen: null,\r\n      })\r\n    }); \r\n  }\r\n\r\n  //bei Klick auf + Button wird ein Dialogfenster geöffnet für das Hinzufügen von Studenten\r\n  addStudentButtonClicked = event => {\r\n    event.stopPropagation();\r\n    this.setState({\r\n      showAddStudent: true\r\n    });\r\n  }\r\n  //bei Klick auf X Button wird das Dialogfenster wieder geschlossen\r\n  addStudentClosed = () => {\r\n      this.setState({\r\n        showAddStudent: false\r\n      });\r\n      this.getTeilnahmenByProjektId(this.state.currentProjekt);\r\n  }\r\n\r\n  /** Lifecycle Methode, die bei dem Einfügen der Komponente in den Browser DOM aufgerufen wird*/\r\n  componentDidMount() {\r\n    this.getProjekte();\r\n    this.getAbgeschlosseneProjekte();\r\n    this.getSemester();\r\n  }\r\n\r\n  //bei Änderung der Select Komponente wird das ausgewählte Projekt als das aktuelle Projekt ausgewählt  \r\n  handleChange = currentProjekt => (event) => {\r\n    let projektBO= event.target.value\r\n    \r\n    this.setState({\r\n      currentProjekt: projektBO.getID(),\r\n      currentProjektBO: projektBO,\r\n    })\r\n    \r\n    this.getTeilnahmenByProjektId(projektBO.getID())\r\n  };\r\n\r\n  //bei Änderung der Select Komponente des Zeiptunktes wird der neue Zeitpunkt ausgewählt  \r\n  handleChangeProjektzustand =  (event) => {\r\n    this.setState({\r\n      projektzustand: event.target.value,\r\n      currentProjekt: null,\r\n      currentProjektBO: null,\r\n      teilnahmen: null,\r\n    })      \r\n  };\r\n\r\n\r\n    /** Rendert die Komponente*/\r\n    render(){\r\n        const { classes } = this.props;\r\n        const { projektzustand, projekte, abgeschlosseneProjekte, currentProjekt, currentProjektBO, teilnahmen, semester, error, loadingInProgress, showAddStudent}  = this.state;\r\n        \r\n        return(\r\n          <div className={classes.root}>          \r\n            {/*erster sichtbarer Teil wenn noch kein Projekt ausgewählt wurde*/}\r\n            <Grid className={classes.grid} container spacing={1} display=\"flex\" margin=\"auto\">\r\n              <Grid item sm={2} >\r\n                <FormControl className={classes.formControl}>\r\n                  <InputLabel id=\"demo-simple-select-label\">Status</InputLabel>\r\n                  <Select value={projektzustand} onChange={this.handleChangeProjektzustand} className={classes.select}>\r\n                    <MenuItem value={10}>Aktuell</MenuItem>\r\n                    <MenuItem value={20}>Archiviert</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n                {projektzustand ?\r\n                  <>{/*wenn der aktuelle Zustand des Projektes aktuell ist*/}\r\n                    {projektzustand === 10?\r\n                      <>\r\n                        <Grid item sm={2} >\r\n                          <FormControl className={classes.formControl}>\r\n                            <InputLabel>Projekt </InputLabel>\r\n                              <Select  className={classes.selectprojekt} value={currentProjektBO}  onChange={this.handleChange(currentProjekt)}>\r\n                                {\r\n                                  projekte.map(projekt =>\r\n                                  <MenuItem value={projekt}><em>{projekt.getname()}</em></MenuItem>\r\n                                  )\r\n                                }\r\n                              </Select>                                                              \r\n                          </FormControl>\r\n                        </Grid>\r\n                      </>\r\n                      :\r\n                      <>\r\n                        <Grid item sm={2} >\r\n                          {semester?\r\n                            <>\r\n                              <FormControl className={classes.formControl}>\r\n                                  <InputLabel>Projekt </InputLabel>\r\n                                    <Select  className={classes.selectprojekt} value={currentProjektBO}  onChange={this.handleChange(currentProjekt)}>\r\n                                      {\r\n                                      abgeschlosseneProjekte.map(projekt =>\r\n                                      <MenuItem value={projekt}><em>{projekt.getname()} ({semester[projekt.halbjahr - 1].name})</em></MenuItem>\r\n                                      )\r\n                                      }\r\n                                    </Select>                                                              \r\n                              </FormControl>\r\n                            </>\r\n                            :\r\n                            <>\r\n                            </>\r\n                          }\r\n                        </Grid>\r\n                      </>\r\n                    }\r\n                  </>\r\n                  :\r\n                  <>\r\n                  </>\r\n                }\r\n\r\n              {/*wenn ein Projekt ausgewählt wurde*/}\r\n              {currentProjektBO ?\r\n                  <>\r\n                    {teilnahmen ?\r\n                        <>\r\n                          {/*wenn der aktuelle Zustand des Projektes in Bewertung ist*/}\r\n                          {currentProjektBO.aktueller_zustand === \"in Bewertung\"?\r\n                            <>\r\n                              <Grid item sm={8} align=\"right\">\r\n                                <Grid item className={classes.grid} >\r\n                                    <Tooltip title='Teilnehmer hinzufügen' placement=\"left\">\r\n                                      <Fab size=\"medium\" align=\"right\" className={classes.addButton} color=\"primary\" aria-label=\"add\" onClick={this.addStudentButtonClicked}>\r\n                                        <AddIcon />\r\n                                      </Fab> \r\n                                      </Tooltip>\r\n                                </Grid>\r\n                              </Grid>\r\n                            </>\r\n                            :\r\n                            <>\r\n                            </>\r\n                          }\r\n                      { teilnahmen.length > 0 ?\r\n                      <>\r\n                        {/*Tabellen Header Zeileninhalte*/}\r\n                        <TableContainer className={classes.table} component={Paper}>\r\n                          <Table aria-label=\"customized table\">\r\n                            <TableHead>\r\n                              <StyledTableRow>\r\n                                <StyledTableCell align=\"left\">Student </StyledTableCell>\r\n                                <StyledTableCell align=\"center\">Matrikelnr.</StyledTableCell>\r\n                                <StyledTableCell align=\"center\">Note</StyledTableCell>\r\n                                <StyledTableCell align=\"center\">Teilnahme</StyledTableCell>\r\n                              </StyledTableRow>\r\n                            </TableHead>\r\n                              <TableBody>\r\n                                {/*Tabellenzelleninhalte in der ProjektBearbeitenEintrag Komponente*/}\r\n                                {\r\n                                  teilnahmen.map(teilnahme =>\r\n                                    <ProjektPflegenEintrag key={teilnahme.getID()} teilnahme = {teilnahme} reloadteilnahmen={this.getTeilnahmenByProjektId} currentProjektBO = {currentProjektBO} currentProjekt = {currentProjekt} />\r\n                                  )\r\n                                }\r\n                              </TableBody> \r\n                          </Table>\r\n                        </TableContainer>\r\n                      </>\r\n                      : \r\n                      <>\r\n                        <Typography className={classes.warnung}>Dieses Projekt hat keine Teilnahmen</Typography>\r\n                      </>\r\n                      }\r\n\r\n                      {/*Bewertung abschließen Button wird nur angezeigt wenn das Projekt sich noch in dem Bewertungszustand befindet*/}\r\n                      {currentProjektBO && teilnahmen.length !== 0? \r\n                        <>\r\n                          {currentProjektBO.aktueller_zustand === \"in Bewertung\"?\r\n                            <>\r\n                              <Grid item xs/>\r\n                              <Grid item>\r\n                                <Button variant=\"contained\" color=\"primary\" className={classes.button} onClick={this.bewertungAbgeschlossenButtonClicked} >Bewertung abgeben</Button>\r\n                              </Grid>\r\n                            </>\r\n                            :\r\n                            <>  \r\n                            </>\r\n                          }\r\n                        </>\r\n                        :null\r\n                      }\r\n                      </>\r\n                      :\r\n                      <>\r\n                      </>\r\n                    }\r\n                    </>\r\n                    :\r\n                    <>\r\n                      <Typography className={classes.warnung}>Bitte wählen Sie ein Projekt aus</Typography>\r\n                    </>\r\n                  } \r\n                  \r\n            </Grid>\r\n            <LoadingProgress show={loadingInProgress} />\r\n            <ContextErrorMessage error={error} contextErrorMsg={`Die Projekte oder die Semester konnten nicht geladen werden`} \r\n                      onReload={()=>{\r\n                            this.getProjekte();\r\n                            this.getAbgeschlosseneProjekte();\r\n                            this.getSemester();\r\n                      }} />\r\n            {/*AddStudent Komponente*/}\r\n            <AddStudent show={showAddStudent} currentProjekt={currentProjekt} teilnahmen={teilnahmen} onClose={this.addStudentClosed}/>   \r\n          </div>\r\n        )\r\n    }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(2),\r\n        marginBottom: theme.spacing(2),\r\n        padding: theme.spacing(1)\r\n      },\r\n    content: {\r\n      margin: theme.spacing(1),\r\n    },\r\n    warnung: {\r\n      color: theme.palette.secondary.main,\r\n      marginTop: theme.spacing(2),\r\n      marginBottom: theme.spacing(2),\r\n      width: '100%'\r\n    },\r\n    select:{\r\n      minWidth:\"7rem\",\r\n    },\r\n    selectprojekt: {\r\n      minWidth: 220\r\n    },\r\n    table: {\r\n      marginTop: theme.spacing(2)\r\n    },\r\n    button: {\r\n      marginTop: theme.spacing(1)\r\n    }\r\n\r\n  });\r\n\r\n/** PropTypes */\r\nProjektPflegen.propTypes = {\r\n    /** @ignore */\r\n    classes: PropTypes.object.isRequired,\r\n    /** @ignore */\r\n    location: PropTypes.object.isRequired,\r\n\t// logged in Firebase user/person\r\n    show: PropTypes.bool.isRequired\r\n}\r\n\r\n\r\n\r\nexport default withRouter(withStyles(styles)(ProjektPflegen));\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ElectivAPI from '../api/ElectivAPI';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport LoadingProgress from './dialogs/LoadingProgress';\r\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\r\n\r\n\r\n/**\r\n * Die einzelne Teilnahme inklusive aller für den Administrator relevanten Informationen werden dargestellt\r\n * \r\n * Hierfür werden der Student inklusive Matrikelnummer, der Dozent sowie die Note angezeigt\r\n */\r\n\r\n//Css Style für Tabellen Zellen\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n      backgroundColor: theme.palette.darkgrey,\r\n      color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n      fontSize: 14,\r\n    },\r\n  }))(TableCell);\r\n\r\n//Css Style für Tabellen Zeilen  \r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n      '&:nth-of-type(4n+1)': {\r\n        backgroundColor: theme.palette.action.hover,\r\n      },\r\n    },\r\n  }))(TableRow);\r\n\r\nclass NotenlisteEintrag extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        //initiiere einen leeren state\r\n        this.state = {\r\n            studentName: null,\r\n            mat_nr: null,\r\n            note: null,\r\n            projekt: null,\r\n            dozentName: null,\r\n            loadingInProgress: false,\r\n            error: null\r\n        };\r\n    }\r\n\r\n     // API Anbindung um den Student der Teilnahme vom Backend zu bekommen \r\n     getStudentByID = () => {\r\n      ElectivAPI.getAPI().getStudentByID(this.props.teilnahme.teilnehmer)\r\n          .then(studentBO =>\r\n              this.setState({\r\n                  studentName: studentBO.getname(),\r\n                  mat_nr: studentBO.getmat_nr(),\r\n                  error: null,\r\n                  loadingInProgress: false,\r\n              })\r\n              ).catch(e =>\r\n                  this.setState({\r\n                      studentName: null,\r\n                      mat_nr: null,\r\n                      error: e,\r\n                      loadingInProgress: false,\r\n                  }));\r\n          this.setState({\r\n              error: null,\r\n              loadingInProgress: true\r\n          });\r\n      }  \r\n  \r\n    // API Anbindung um die Bewertung der Teilnahme vom Backend zu bekommen \r\n    getBewertung = () => {\r\n      ElectivAPI.getAPI().getBewertung(this.props.teilnahme.resultat)\r\n      .then(bewertungBO =>\r\n          this.setState({\r\n              note: bewertungBO.getnote(),\r\n              error: null,\r\n              loadingInProgress: false,\r\n          }))\r\n          .catch(e =>\r\n              this.setState({\r\n                  note: null,\r\n                  error: null,\r\n                  loadingInProgress: false,\r\n              }));\r\n      this.setState({\r\n          error: null,\r\n          loadingInProgress: true\r\n      });\r\n    }\r\n\r\n    // API Anbindung um das Projekt der Teilnahme vom Backend zu bekommen \r\n    getProjekt = () => {\r\n      ElectivAPI.getAPI().getProjekt(this.props.teilnahme.lehrangebot)\r\n      .then(projektBO =>\r\n          this.setState({\r\n            projekt: projektBO,\r\n            loadingInProgress: false,\r\n            error: null,\r\n          })).then(()=>{\r\n            this.getPerson()\r\n          })\r\n          .catch(e =>\r\n              this.setState({\r\n                projekt: null,\r\n                loadingInProgress: false,\r\n                error: e,\r\n              }));\r\n      this.setState({\r\n        loadingInProgress: true,\r\n        error: null\r\n      });\r\n    }\r\n\r\n    // API Anbindung um den Dozent des Projekts der Teilnahme vom Backend zu bekommen \r\n    getPerson = () => {\r\n      ElectivAPI.getAPI().getPerson(this.state.projekt.dozent)\r\n      .then(personBO =>\r\n          this.setState({\r\n              dozentName: personBO.getname(),\r\n              error: null,\r\n              loadingInProgress: false,\r\n          }))\r\n          .catch(e =>\r\n              this.setState({\r\n                  dozentName: null,\r\n                  error: e,\r\n                  loadingInProgress: false,\r\n              }));\r\n      this.setState({\r\n          error: null,\r\n          loadingInProgress: true\r\n      });\r\n    }\r\n\r\n    // Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\r\n    componentDidMount() {\r\n        this.getStudentByID();\r\n        this.getBewertung();\r\n        this.getProjekt();\r\n    }\r\n\r\n    /** Rendert die Komponente */\r\n    render(){\r\n        const { classes } = this.props;\r\n        const { studentName, mat_nr, note, dozentName, loadingInProgress, error } = this.state;\r\n        \r\n        return(\r\n          <>\r\n              <StyledTableRow key={this.props.teilnahme.id}>\r\n                <StyledTableCell className={classes.student}>{studentName}</StyledTableCell>\r\n                <StyledTableCell align=\"center\" className={classes.mat_nr}>{mat_nr}</StyledTableCell> \r\n                <StyledTableCell align=\"center\">{dozentName}</StyledTableCell>\r\n                <StyledTableCell align=\"center\">{note}</StyledTableCell> \r\n              </StyledTableRow>\r\n              <StyledTableRow> \r\n                  <StyledTableCell colspan=\"10\" className={classes.laden}>\r\n                      <LoadingProgress show={loadingInProgress}></LoadingProgress>\r\n                      <ContextErrorMessage error={error} contextErrorMsg = {'Diese Teilnahme konnte nicht geladen werden'} onReload={this.getProjekt} />\r\n                  </StyledTableCell>\r\n              </StyledTableRow>\r\n          </>\r\n        );\r\n    }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n    root: {\r\n      width: '100%',\r\n      marginTop: theme.spacing(2),\r\n      marginBottom: theme.spacing(2),\r\n      padding: theme.spacing(1),\r\n    },\r\n    table: {\r\n      minWidth: 700,\r\n    },\r\n    laden: {\r\n      padding: 0\r\n      },\r\n    mat_nr: {\r\n      width: 150      \r\n    },\r\n    student: {\r\n      width: 300\r\n    }\r\n    });\r\n\r\n/** PropTypes */\r\nNotenlisteEintrag.propTypes = {\r\n    /** @ignore */\r\n    classes: PropTypes.object.isRequired,\r\n    teilnahme: PropTypes.object.isRequired,\r\n    show: PropTypes.bool.isRequired\r\n  }\r\n  \r\n  export default withStyles(styles)(NotenlisteEintrag);","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Button, Grid, Typography, Paper } from '@material-ui/core';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { ElectivAPI } from '../api';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport Select from '@material-ui/core/Select';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\r\nimport LoadingProgress from './dialogs/LoadingProgress';\r\n\r\nimport NotenlisteEintrag from './NotenlisteEintrag';\r\n\r\n/**\r\n * Es werden alle benoteten Teilnahmen, welche einem bestimmten Modul in einem bestimmten Semester zugewiesen wurden, angezeigt\r\n * \r\n * @see See [NotenListeEintrag](#notenlisteeintrag)\r\n * \r\n * Hierfür kann zunächst das gewünschte Semester und das gewünschte Modul per Dropdown ausgewählt werden\r\n * Zuvor werden alle Semester und alle Module aus der Datenbank geladen\r\n */\r\n\r\n//Css Style für Tabellen Zellen\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.primary.main,\r\n    color: theme.palette.common.white,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\n//Css Style für Tabellen Zeilen\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    '&:nth-of-type(4n+1)': {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nclass Notenliste extends Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\t//initiiere einen leeren state\r\n\t\tthis.state = {\r\n      module: [],\r\n      semester: [],\r\n      teilnahmen : [],\r\n      semesterwahl: null,\r\n\t\t\terror: null,\r\n\t\t\tloadingInProgress: false,\r\n\t\t};\r\n  }\r\n    // API Anbindung um alle Module vom Backend zu bekommen \r\n    getModule = () => {\r\n      ElectivAPI.getAPI().getModule()\r\n      .then(modulBOs =>\r\n          this.setState({\r\n              module: modulBOs,\r\n              error: null,\r\n              loadingInProgress: false,\r\n          })).catch(e =>\r\n              this.setState({\r\n                  module: [],\r\n                  error: e,\r\n                  loadingInProgress: false,\r\n              }));\r\n      this.setState({\r\n          error: null,\r\n          loadingInProgress: true,\r\n          loadingTeilnahmeError: null\r\n      });\r\n  }\r\n\r\n    // API Anbindung um alle Semester vom Backend zu bekommen \r\n    getSemester = () => {\r\n      ElectivAPI.getAPI().getSemester()\r\n      .then(semesterBOs =>\r\n          this.setState({\r\n              semester: semesterBOs,\r\n              error: null,\r\n              loadingInProgress: false,\r\n          })).catch(e =>\r\n              this.setState({\r\n                  semester: [],\r\n                  error: e,\r\n                  loadingInProgress: false,\r\n              }));\r\n      this.setState({\r\n          error: null,\r\n          loadingInProgress: true,\r\n          loadingTeilnahmeError: null\r\n      });\r\n  }\r\n\r\n  //bei Änderung des Semester Dropdown Menüs wird das ausgewählte Semester im State als semesterwahl gesetzt\r\n  handleSemesterChange = (semester) => {\r\n    this.setState({\r\n      semesterwahl: semester.target.value,\r\n    })\r\n    setTimeout(() => {\r\n    //console.log('Ausgewählte Semester ID:',this.state.semesterwahl)   \r\n    if (this.state.modulwahl != null) {\r\n      this.getTeilnahmen_by_modul_und_semester();\r\n    }\r\n    }, 0);\r\n  };\r\n\r\n  //bei Änderung des Modul Dropdown Menüs wird das ausgewählte Modul im State als modulwahl gesetzt\r\n  handleModulChange = (modul) => {\r\n    this.setState({\r\n      modulwahl: modul.target.value,\r\n    })\r\n    setTimeout(() => {\r\n      //console.log('Ausgewählte Modul ID:',this.state.modulwahl)   \r\n    if (this.state.semesterwahl != null) {\r\n      this.getTeilnahmen_by_modul_und_semester();\r\n    }\r\n    }, 0);\r\n  };\r\n\r\n  //Funktion, die einen Print-Befehl ausführt\r\n  printNotenliste= () => {\r\n    window.print()\r\n  }\r\n\r\n  //Funktion, um bei einem Fehler alle notwendigen Informationen zu laden\r\n  handleReload= () => {\r\n    this.getModule();\r\n    this.getSemester();\r\n  }\r\n\r\n\t// Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\r\n\tcomponentDidMount() {\r\n    this.getModule();\r\n    this.getSemester();\r\n\t}\r\n\r\n\r\n    // API Anbindung um Teilnahmen des Students vom Backend zu bekommen \r\n    getTeilnahmen_by_modul_und_semester = () => {\r\n      ElectivAPI.getAPI().getTeilnahmen_by_modul_und_semester(this.state.modulwahl, this.state.semesterwahl)\r\n      .then(teilnahmeBOs =>\r\n          this.setState({\r\n              teilnahmen: teilnahmeBOs,\r\n              error: null,\r\n              loadingInProgress: false,\r\n          })).catch(e =>\r\n              this.setState({\r\n                  teilnahmen: [],\r\n                  error: e,\r\n                  loadingInProgress: false,\r\n              }));\r\n      this.setState({\r\n          error: null,\r\n          loadingInProgress: true,\r\n          loadingTeilnahmeError: null\r\n      });\r\n    }    \r\n\r\n\t/** Rendert die Komponente */\r\n\trender() {\r\n    \r\n    const { classes } = this.props;\r\n    const { module, semester, semesterwahl, modulwahl, teilnahmen, loadingInProgress, error } = this.state;\r\n    return (\r\n    <div className={classes.root}>\r\n        <Grid className={classes.header} container spacing={1} justify='flex-start' alignItems='space-between'>\r\n          <Grid item xs={2}>\r\n          {\r\n            semester ?\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel>Semester</InputLabel> \r\n                <Select value = {semester.id} onChange={this.handleSemesterChange}>\r\n                  {\r\n                  semester.map(semester =>\r\n                  <MenuItem value={semester.getID()}><em>{semester.getname()}</em></MenuItem>\r\n                  )\r\n                  }\r\n                </Select>                                                                \r\n              </FormControl>                                  \r\n            :\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel>Semester</InputLabel>\r\n                <Select value=\"\">\r\n                  <MenuItem value=\"\"><em>Semester noch nicht geladen</em></MenuItem>\r\n                </Select>\r\n            </FormControl>\r\n          }\r\n          </Grid>\r\n          <Grid item xs className={classes.marginLeft}>\r\n          { module ?\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel>Modul</InputLabel> \r\n                <Select onChange={this.handleModulChange}>\r\n                  { module.map(modul =>\r\n                    <MenuItem value={modul.getID()}><em>{modul.getname()} ({modul.getEdv_nr()})</em></MenuItem>\r\n                    )\r\n                  }\r\n                </Select>\r\n            </FormControl>\r\n            :\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel>Modul</InputLabel>\r\n               <Select value=\"\">\r\n                 <MenuItem value=\"\"><em>Module noch nicht geladen</em></MenuItem>\r\n                </Select>\r\n            </FormControl>\r\n          }\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item>\r\n        { semesterwahl && modulwahl ?\r\n          <>\r\n            \r\n            {teilnahmen.length > 0 ?\r\n            <>\r\n            <TableContainer component={Paper}>\r\n                  <Table className={classes.table} aria-label=\"customized table\">\r\n                      <TableHead>\r\n                          <StyledTableRow>\r\n                              <StyledTableCell align=\"left\">Student</StyledTableCell>\r\n                              <StyledTableCell align=\"center\">Matrikelnummer</StyledTableCell>\r\n                              <StyledTableCell align=\"center\">Dozent</StyledTableCell>\r\n                              <StyledTableCell align=\"center\">Note</StyledTableCell>\r\n                          </StyledTableRow>\r\n                      </TableHead>\r\n                      <TableBody>\r\n                        {\r\n                                teilnahmen ?\r\n                                <>\r\n                                {\r\n                                    teilnahmen.map(teilnahme => \r\n                                        <NotenlisteEintrag key={teilnahme.getID()} teilnahme = {teilnahme}\r\n                                        show={this.props.show}\r\n                                    />) \r\n                                }\r\n                                </>\r\n                                :\r\n                                <></>\r\n                            }\r\n                      </TableBody>\r\n                    </Table>\r\n                <LoadingProgress show={loadingInProgress} />\r\n                <ContextErrorMessage error={error} contextErrorMsg={`Die Notenliste konnte nicht geladen werden`} onReload={this.getTeilnahmen_by_modul_und_semester} />\r\n              </TableContainer>\r\n              <Button variant=\"contained\" color=\"primary\" size=\"medium\" className={classes.button} startIcon={<SaveIcon />} onClick={this.printNotenliste}>\r\n                Notenliste\r\n              </Button> \r\n              </> \r\n              :\r\n              <>\r\n              { error ?\r\n              <>\r\n              <LoadingProgress show={loadingInProgress} />\r\n              <ContextErrorMessage error={error} contextErrorMsg={`Die Notenliste konnte nicht geladen werden`} onReload={this.getTeilnahmen_by_modul_und_semester} />\r\n              </>\r\n              :\r\n              <Typography className={classes.warnung}> Leider gibt es für dieses Modul keine Teilnahmen oder es wurde noch keine Teilnahme benotet</Typography>\r\n              }\r\n              </>\r\n              }\r\n            </>\r\n            :\r\n            <>\r\n            <Typography className={classes.warnung}> Bitte wählen Sie zunächst ein Semester und ein Modul aus</Typography>\r\n            <LoadingProgress show={loadingInProgress} />\r\n            <ContextErrorMessage error={error} contextErrorMsg={`Semester und Module konnten nicht geladen werden`} onReload={this.handleReload}/>\r\n            </>\r\n            }\r\n        </Grid>\r\n    </div>\r\n    );\r\n    }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  header: {\r\n    marginTop: theme.spacing(2),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  table: {\r\n    minWidth: 700,\r\n  },\r\n  button:{\r\n    marginTop: theme.spacing(2),\r\n    marginBottom: theme.spacing(3),\r\n    float: 'right'\r\n},\r\n  formControl: {\r\n    minWidth: 150,\r\n    marginLeft: theme.spacing(1)\r\n  },\r\n  marginLeft: {\r\n    marginLeft: theme.spacing(2)\r\n  },\r\n  warnung: {\r\n    color: theme.palette.secondary.main,\r\n    paddingTop: theme.spacing(1)\r\n  }\r\n});\r\n\r\n/** PropTypes */\r\nNotenliste.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** @ignore */\r\n  location: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default withRouter(withStyles(styles)(Notenliste));\r\n\t\r\n","/** The firebase config structure for the Python Bank Project as provided by the firebase admin website */\r\n\r\nconst firebaseConfig = {\r\n\r\n  apiKey: \"AIzaSyB1lHTsUaz5NUHqupJ4FSFaFBISnswKwaY\",\r\n  authDomain: \"wahlfachapp.firebaseapp.com\",\r\n  databaseURL: \"https://wahlfachapp.firebaseio.com\",\r\n  projectId: \"wahlfachapp\",\r\n  storageBucket: \"wahlfachapp.appspot.com\",\r\n  messagingSenderId: \"22479023903\",\r\n  appId: \"1:22479023903:web:f335a2cda4db280a950a2a\",\r\n  measurementId: \"G-YDW30DYN6K\"\r\n\r\n};\r\n\r\nexport default firebaseConfig;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Typography, Accordion, AccordionSummary, AccordionDetails, Grid } from '@material-ui/core';\r\nimport { Button } from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport { ElectivAPI } from '../api';\r\nimport ProjektForm from './dialogs/ProjektForm';\r\n\r\n\r\nclass ProjektverwaltungListeEintrag extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // Status initalisieren\r\n        this.state = {\r\n            projekt: props.projekt,\r\n            projektarten: [],\r\n            showProjektForm: false,\r\n            showProjektDeleteDialog: false\r\n        };\r\n    }\r\n\r\n    // Handles events wenn sich der status der oeffnung aendert\r\n    expansionPanelStateChanged = () => {\r\n        this.props.onExpandedStateChange(this.props.projekt);\r\n    }\r\n\r\n    annehmenButtonClicked = event => {\r\n        event.stopPropagation()\r\n        //Logik fuer annehmen Button\r\n        this.setState({ projektAnnehmenButton: true });\r\n        this.setState({ projektAblehnenButton: true });\r\n        ElectivAPI.getAPI().setZustandAtProjekt(this.props.projekt.id, \"Genehmigt\");\r\n    }\r\n\r\n    ablehnenButtonClicked = event => {\r\n        event.stopPropagation()\r\n        //Logik fuer ablehnen Button\r\n        this.setState({ projektAnnehmenButton: true });\r\n        this.setState({ projektAblehnenButton: true });\r\n        ElectivAPI.getAPI().setZustandAtProjekt(this.props.projekt.id, \"Abgelehnt\");\r\n    }\r\n\r\n\r\n    // Kummert sich um das close event vom ProjektForm\r\n    projektFormClosed = (projekt) => {\r\n        if (projekt) {\r\n            this.setState({\r\n                projekt: projekt,\r\n                showProjektForm: false\r\n            });\r\n        } else {\r\n            this.setState({\r\n                showProjektForm: false\r\n            });\r\n        }\r\n    }\r\n\r\n    // API Anbindung um alle Projektarten vom Backend zu bekommen \r\n    getProjektart = () => {\r\n        ElectivAPI.getAPI().getProjektart().then(projektartBOs =>\r\n            this.setState({\r\n                projektarten: projektartBOs\r\n            })).catch(e =>\r\n                this.setState({\r\n                    projektarten: []\r\n                }));\r\n    }\r\n\r\n    // Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\r\n    componentDidMount() {\r\n        this.getProjektart();\r\n    }\r\n\r\n\r\n    /** Renders the component */\r\n    render() {\r\n        const { classes, expandedState } = this.props;\r\n        // Use the states projekt\r\n        const { projekt, projektarten, showProjektForm } = this.state;\r\n\r\n\r\n        return (\r\n            <div>\r\n                <Accordion className={classes.root} defaultExpanded={false} expanded={expandedState}\r\n                    onChange={this.expansionPanelStateChanged}>\r\n                    <AccordionSummary\r\n                        expandIcon={<ExpandMoreIcon />}\r\n                        id={`projekt${projekt.getID()}Infopanel-header`}\r\n                    >\r\n                        <Grid container spacing={1} justify='flex-start' alignItems='center'>\r\n                            <Grid item>\r\n                                <Typography variant='body1'\r\n                                    className={classes.heading}>{projekt.getname()} bei {projekt.getbetreuer()} </Typography>\r\n                                <Typography variant='body1' color={'success.main'}>\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs />\r\n                            <Grid item>\r\n                                <Typography variant='body2' color={'textSecondary'}>Details</Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </AccordionSummary>\r\n                    <AccordionDetails>\r\n                        <Typography variant='body1' color={'textSecondary'}>\r\n\r\n                            <b>Beschreibung: </b> {projekt.getbeschreibung()} <br />\r\n                            <b>Betreuer: </b>{projekt.getbetreuer()}<br />\r\n                            <b>Raum: </b>{projekt.getraum()}<br />\r\n                            <b>Maximale Teilnehmer: </b>{projekt.getmax_teilnehmer()}<br />\r\n                            <b>Externe Partner: </b>{projekt.getexterner_partner()}<br />\r\n                            <b>Wöchentlich: </b>{projekt.getwoechentlich() === \"1\" ? \"Ja\" : \"Nein\"}<br />\r\n                            <b>Blocktage vor der Prüfungsphase: </b>{projekt.getanzahl_block_vor()}<br />\r\n                            <b>Blocktage während der Prüfungsphase: </b>{projekt.getanzahl_block_in()}<br />\r\n                            <b>Sprache: </b>{projekt.getsprache()}<br />\r\n                            {projektarten.length > 0 && projekt ?\r\n                                <>\r\n                                    <b>Projektart: </b>{projektarten[projekt.art - 1].name}<br />\r\n                                    <b>SWS: </b>{projektarten[projekt.art - 1].sws}<br />\r\n                                    <b>ECTS: </b>{projektarten[projekt.art - 1].ects}<br />\r\n                                </>\r\n                                :\r\n                                <>\r\n                                    <b>ECTS noch nicht geladen</b><br />\r\n                                </>\r\n                            }\r\n                            <b>Präferierter Block: </b>{projekt.getpraeferierte_block()}<br />\r\n\r\n                        </Typography>\r\n                    </AccordionDetails>\r\n                    <AccordionDetails>\r\n                        <Grid container justify=\"flex-end\" alignItems=\"center\" spacing={2}>\r\n                            <Grid item>\r\n                                <Button className={classes.projektAnnehmenButton} variant='contained' size=\"small\"\r\n                                    color='primary' startIcon={<AddIcon />} onClick={this.annehmenButtonClicked}\r\n                                    disabled={this.state.projektAnnehmenButton}>\r\n                                    Annehmen\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button className={classes.projektAblehnenButton} variant='contained' size=\"small\"\r\n                                    color='secondary' startIcon={<RemoveIcon />} onClick={this.ablehnenButtonClicked}\r\n                                    disabled={this.state.projektAblehnenButton}>\r\n                                    Ablehnen\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </AccordionDetails>\r\n\r\n                </Accordion>\r\n                <ProjektForm show={showProjektForm} projekt={projekt} onClose={this.projektFormClosed} />\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n        marginBottom: theme.spacing(1),\r\n        marginTop: theme.spacing(1),\r\n        paddingTop: theme.spacing(1),\r\n        paddingBottom: theme.spacing(1),\r\n    },\r\n});\r\n\r\n/** PropTypes */\r\nProjektverwaltungListeEintrag.propTypes = {\r\n    /** @ignore */\r\n    classes: PropTypes.object.isRequired,\r\n    /** The ProjektBO to be rendered */\r\n    projekt: PropTypes.object.isRequired,\r\n    /** The state of this ProjektverwaltungListeEintrag. If true the projekt is shown with its accounts */\r\n    expandedState: PropTypes.bool.isRequired,\r\n    /** The handler responsible for handle expanded state changes (exanding/collapsing) of this ProjektverwaltungListeEintrag\r\n     *\r\n     * Signature: onExpandedStateChange(projektBo projekt)\r\n     */\r\n    onExpandedStateChange: PropTypes.func.isRequired,\r\n\r\n}\r\n\r\nexport default withStyles(styles)(ProjektverwaltungListeEintrag);","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, TextField, InputAdornment, IconButton, Grid, Typography } from '@material-ui/core';\r\nimport ClearIcon from '@material-ui/icons/Clear'\r\nimport { withRouter } from 'react-router-dom';\r\nimport { ElectivAPI } from '../api';\r\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\r\nimport LoadingProgress from './dialogs/LoadingProgress';\r\n\r\nimport ProjektForm from './dialogs/ProjektForm';\r\nimport ProjektverwaltungListeEintrag from './ProjektverwaltungListeEintrag';\r\n\r\n/*\r\nErstellt eine Liste von Projekten um sie zu verwalten\r\n*/\r\n\r\n\r\nclass ProjektverwaltungListe extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let expandedID = null;\r\n\r\n        if (this.props.location.expandProjekt) {\r\n            expandedID = this.props.location.expandProjekt.getID();\r\n        }\r\n\r\n        //gebe einen leeren status\r\n        this.state = {\r\n            projekte: [],\r\n            filteredProjekte: [],\r\n            projektFilter: '',\r\n            error: null,\r\n            loadingInProgress: false,\r\n            expandedProjektID: expandedID,\r\n            showProjekteForm: false\r\n        };\r\n    }\r\n\r\n    //Suche-Funktion zum Suchen von Projekt\r\n    filterFieldValueChange= event => {\r\n        const value = event.target.value.toLowerCase();\r\n        this.setState({\r\n            filteredProjekte: this.state.projekte.filter(projekt => {\r\n                let nameContainsValue = projekt.getname().toLowerCase().includes(value);\r\n                return nameContainsValue;\r\n            }),\r\n            projektFilter: value\r\n        });\r\n    }\r\n\r\n    //Suche leeren\r\n    clearFilterFieldButtonClicked = () => {\r\n        this.setState({\r\n            filteredProjekte: [...this.state.projekte],\r\n            projektFilter: ''\r\n        });\r\n    }\r\n\r\n    //hole alle Projekte vom Backend\r\n    getProjekte = () => {\r\n        ElectivAPI.getAPI().getProjekteByZustand(\"Neu\")\r\n            .then(projekteBOs =>\r\n                this.setState({\t\t\t\t\t\t\t\t//neuer status wenn fetch komplett\r\n                    projekte: projekteBOs,\r\n                    filteredProjekte: [...projekteBOs],\t\t//speicher eine kopie\r\n                    loadingInProgress: false,\t\t\t\t// deaktiviere ladeindikator\r\n                    error: null,\r\n                })).catch(e =>\r\n                    this.setState({\r\n                        projekte: [],\r\n                        filteredProjekte: [],\r\n                        loadingInProgress: false,\r\n                        error: e\r\n                    }));\r\n        // setze laden auf wahr\r\n        this.setState({\r\n            loadingInProgress: true,\r\n            error: null\r\n        });\r\n    }\r\n\r\n    // Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\r\n    componentDidMount() {\r\n        this.getProjekte();\r\n    }\r\n\r\n    onExpandedStateChange = projekt => {\r\n        //  Zum anfang Projekt Eintrag = null\r\n        let newID = null;\r\n\r\n        // Falls ein Objekt geclicket wird, collapse\r\n        if (projekt.getID() !== this.state.expandedProjektID) {\r\n            // Oeffnen mit neuer Projekt ID\r\n            newID = projekt.getID()\r\n        }\r\n        this.setState({\r\n            expandedProjektID: newID,\r\n        });\r\n\r\n    }\r\n\r\n    //wird aufgerufen, wenn Dialog Fenster geschloßen wird\r\n    projektFormClosed = projekt => {\r\n        if (projekt) {\r\n            const newProjektList = [...this.state.projekte, projekt];\r\n            this.setState({\r\n                projekte: newProjektList,\r\n                filteredProjekte: [...newProjektList],\r\n                showProjekteForm: false\r\n            });\r\n        } else {\r\n            this.setState({\r\n                showProjekteForm: false\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    /** Renders the component */\r\n    render() {\r\n        const { classes, currentStudent } = this.props;\r\n        const {\r\n            filteredProjekte,\r\n            projektFilter,\r\n            expandedProjektID,\r\n            loadingInProgress,\r\n            error,\r\n            showProjekteForm\r\n        } = this.state;\r\n\r\n        return (\r\n            <div className={classes.root}>\r\n                <Grid className={classes.projektFilter} container spacing={1} justify='flex-start' alignItems='center'>\r\n                    <Grid item>\r\n                        <Typography>\r\n                            Nicht genehmigte Projekte:\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <TextField\r\n                            autoFocus\r\n                            fullWidth\r\n                            id='projektFilter'\r\n                            type='text'\r\n                            value={projektFilter}\r\n                            onChange={this.filterFieldValueChange}\r\n                            InputProps={{\r\n                                endAdornment: <InputAdornment position='end'>\r\n                                    <IconButton onClick={this.clearFilterFieldButtonClicked}>\r\n                                        <ClearIcon />\r\n                                    </IconButton>\r\n                                </InputAdornment>,\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs />\r\n                    <Grid item>\r\n                    </Grid>\r\n                </Grid>\r\n                {\r\n                    // Show the list of ProjektverwaltungsllisteEintrag components\r\n                    // Do not use strict comparison, since expandedProjektID maybe a string if given from the URL parameters\r\n\r\n                    filteredProjekte.map(projekt =>\r\n                        <ProjektverwaltungListeEintrag key={projekt.getID()} projekt={projekt}\r\n                            expandedState={expandedProjektID === projekt.getID()}\r\n                            onExpandedStateChange={this.onExpandedStateChange}\r\n                            currentStudent={currentStudent}\r\n                        />)\r\n                }\r\n                <LoadingProgress show={loadingInProgress} />\r\n                <ContextErrorMessage error={error} contextErrorMsg={`Projekte konnten nicht geladen werden`}\r\n                    onReload={this.getProjekte} />\r\n                <ProjektForm show={showProjekteForm} onClose={this.projektFormClosed} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(2),\r\n    },\r\n    projektFilter: {\r\n        marginTop: theme.spacing(2),\r\n        marginBottom: theme.spacing(1),\r\n        marginLeft: theme.spacing(1)\r\n    }\r\n});\r\n\r\n/** PropTypes */\r\nProjektverwaltungListe.propTypes = {\r\n    /** @ignore */\r\n    classes: PropTypes.object.isRequired,\r\n    /** @ignore */\r\n    location: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default withRouter(withStyles(styles)(ProjektverwaltungListe));\r\n\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Tabs, Tab, Paper } from '@material-ui/core';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\r\nimport LoadingProgress from './dialogs/LoadingProgress';\r\n\r\n\r\n/**\r\n * Stellt einen Sub-Header für administrative Verwaltungsmöglichkeiten der einzelnen BOs dar\r\n * \r\n * @see See [SemesterListe](#semesterliste)\r\n * @see See [ModulListe](#modulliste)\r\n * @see See [ProjektartListe](#projektartliste)\r\n * @see See [UserListe](#userliste)\r\n * \r\n */\r\n\r\nclass Administration extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    //initiiere einen leeren state\r\n    this.state = {\r\n        tabindex: 0,\r\n        error: null,\r\n        loadingInProgress: false,\r\n    };\r\n  }\r\n\r\n  //Funktion, wenn ein Tab gewächselt wurde: setzt den state tabindex auf den aktuellen index \r\n  handleTabChange = (e, newIndex) => {\r\n    this.setState({\r\n        tabindex: newIndex\r\n    })\r\n};\r\n\r\n\r\n  // Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\r\n  componentDidMount() {\r\n  }\r\n\r\n  /** Renders the component */\r\n  render() {\r\n    const { classes } = this.props;\r\n    const {  loadingInProgress, error} = this.state;\r\n\r\n    return (\r\n      <div className={classes.root}>\r\n        <Paper>\r\n          <Tabs className={classes.tabs} indicatorColor='primary' textColor='primary'  centered value={this.state.tabindex} onChange={this.handleTabChange}  >\r\n              <Tab label='Semester' component={RouterLink} to={`/administration/semester`} />\r\n              <Tab label=\"Module\" component={RouterLink} to={'/administration/module'}/>\r\n              <Tab label='Projektarten' component={RouterLink} to={`/administration/projektarten`} />\r\n              <Tab label='Studenten' component={RouterLink} to={`/administration/student`} />\r\n              <Tab label='User' component={RouterLink} to={`/administration/user`} />\r\n          </Tabs>\r\n          <LoadingProgress show={loadingInProgress} />\r\n          <ContextErrorMessage error={error} contextErrorMsg={`Die Seite konnte nicht geladen werden.`}  />\r\n        </Paper>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n});\r\n\r\n/** PropTypes */\r\nAdministration.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** @ignore */\r\n  location: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default withRouter(withStyles(styles)(Administration));\r\n\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n    withStyles, Button, IconButton, Dialog, DialogContent, DialogContentText,\r\n    DialogTitle, DialogActions, TextField\r\n} from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ContextErrorMessage from './ContextErrorMessage';\r\nimport LoadingProgress from './LoadingProgress';\r\n\r\nimport { ElectivAPI, ModulBO } from '../../api';\r\n\r\n/**\r\n * Es wird ein Dialog mit einem Formular dargestellt, mit welchem man Module erstellen und bearbeiten kann\r\n * \r\n * @see See Matieral-UIs [Dialog] (https://material-ui.com/components/dialogs)\r\n * \r\n */\r\n\r\nclass ModulForm extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        //initiiere einen leeren state\r\n        this.state = {\r\n            name: '',\r\n            nameValidationFailed: false,\r\n            nameEdited: false,\r\n\r\n            edv_nr: null,\r\n            edv_nrValidationFailed: false,\r\n            edv_nrEdited: false,\r\n\r\n            addingError: null,\r\n            addingInProgress: false,\r\n\r\n            updatingError: null,\r\n            updatingInProgress: false\r\n        };\r\n        this.baseState = this.state;\r\n    }\r\n\r\n    // API Anbindung um das Modul über das Backend in die Datenbank einzufügen\r\n    addModul = () => {\r\n        let newModul = new ModulBO()\r\n        newModul.setID(0)\r\n        newModul.setname(this.state.name)\r\n        newModul.setEdv_nr(this.state.edv_nr)\r\n        ElectivAPI.getAPI().addModul(newModul).then(modul => {\r\n            this.props.getModule()\r\n            this.setState(this.baseState);\r\n            this.props.onClose(modul); //Aufrufen parent in backend\r\n        }).catch(e =>\r\n            this.setState({\r\n                addingInProgress: false,\r\n                addingError: e\r\n            })\r\n        );\r\n        // Ladeanimation einblenden\r\n        this.setState({\r\n            addingProgress: true,\r\n            addingError: null\r\n        });\r\n    }\r\n\r\n    // API Anbindung um das Modul über das Backend in die Datenbank upzudaten\r\n    updateModul = () => {\r\n        let modul = this.props.modul;\r\n        modul.setname(this.state.name)\r\n        modul.setEdv_nr(this.state.edv_nr)\r\n        ElectivAPI.getAPI().updateModul(modul).then(modul => {\r\n            this.props.getModule()\r\n            this.setState(this.baseState);\r\n            this.props.onClose(modul); //Aufrufen parent in backend\r\n        }).catch(e =>\r\n            this.setState({\r\n                updatingInProgress: false,\r\n                updatingError: e\r\n            })\r\n        );\r\n        // Ladeanimation einblenden\r\n        this.setState({\r\n            updatingInProgress: true,\r\n            updatingError: null\r\n        });\r\n    }\r\n\r\n    // Validierung der Textfeldaenderungen \r\n    textFieldValueChange = (event) => {\r\n        const value = event.target.value;\r\n\r\n        let error = false;\r\n        if (value.trim().length === 0) {\r\n            error = true;\r\n        }\r\n        this.setState({\r\n            [event.target.id]: event.target.value,\r\n            [event.target.id + 'ValidationFailed']: error,\r\n            [event.target.id + 'Edited']: true\r\n        });\r\n    }\r\n\r\n    // Validierung der Textfeldaenderungen nur numerische Werte\r\n    numberValueChange = (event) => {\r\n        const value = event.target.value;\r\n        const re = /^[0-9]{1,10}$/;\r\n\r\n        let error = false;\r\n        if (value.trim().length === 0) {\r\n            error = true;\r\n        }\r\n        if (re.test(event.target.value) === false) {\r\n            error = true;\r\n        }\r\n\r\n        this.setState({\r\n            [event.target.id]: event.target.value,\r\n            [event.target.id + 'ValidationFailed']: error,\r\n            [event.target.id + 'Edited']: true\r\n        });\r\n    }\r\n\r\n    //Infos des zu bearbeitenden Moduls laden\r\n    getInfos = () => {\r\n        if (this.props.modul) {\r\n            let name = this.props.modul.getname();\r\n            let edv_nr = this.props.modul.getEdv_nr();\r\n            this.setState({\r\n                name: name,\r\n                edv_nr: edv_nr,\r\n            })\r\n        }\r\n    }\r\n\r\n    //Wenn das Dialog geschlossen wird\r\n    handleClose = () => {\r\n        this.setState(this.baseState);\r\n        this.props.onClose(null);\r\n    }\r\n\r\n\r\n    /** Rendert die Komponente */\r\n    render() {\r\n        const { classes, show, modul } = this.props;\r\n        const {\r\n            name,\r\n            nameValidationFailed,\r\n            nameEdited,\r\n\r\n            edv_nr,\r\n            edv_nrValidationFailed,\r\n            edv_nrEdited,\r\n\r\n            addingInProgress,\r\n            addingError,\r\n            updatingInProgress,\r\n            updatingError, } = this.state;\r\n\r\n        let title = '';\r\n        let header = '';\r\n\r\n        if (modul) {\r\n            // Modul objekt true, somit ein edit\r\n            title = `Modul \"${modul.name}\" bearbeiten`;\r\n            header = 'Neue Moduldaten einfügen';\r\n        } else {\r\n            title = 'Erstelle ein neues Modul';\r\n            header = 'Moduldaten einfügen';\r\n        }\r\n\r\n        return (\r\n            show ?\r\n                <Dialog open={show} onEnter={this.getInfos} onClose={this.handleClose} maxWidth='xs' fullWidth>\r\n                    <DialogTitle className={classes.dialogtitle}>{title}\r\n                        <IconButton className={classes.closeButton} onClick={this.handleClose}>\r\n                            <CloseIcon />\r\n                        </IconButton>\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText>\r\n                            {header}\r\n                        </DialogContentText>\r\n\r\n                        <form className={classes.root} noValidate autoComplete='off'>\r\n\r\n                            <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='small' id='name' label='Modulname' variant=\"outlined\" value={name}\r\n                                onChange={this.textFieldValueChange} error={nameValidationFailed} />\r\n\r\n                            <TextField className={classes.textfield} type='text' required fullWidth margin='small' id='edv_nr' label='EDV-Nummer' variant=\"outlined\" value={edv_nr}\r\n                                onChange={this.numberValueChange} error={edv_nrValidationFailed} />\r\n                        </form>\r\n                        <LoadingProgress show={addingInProgress || updatingInProgress} />\r\n                        {\r\n                            // Show error message in dependency of modul prop\r\n                            modul ?\r\n                                <ContextErrorMessage error={updatingError} contextErrorMsg={`The Modul ${modul.getID()} could not be updated.`} onReload={this.updateModul} />\r\n                                :\r\n                                <ContextErrorMessage error={addingError} contextErrorMsg={`The Modul could not be added.`} onReload={this.addModul} />\r\n                        }\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={this.handleClose} color='secondary'>\r\n                            Abbrechen\r\n                        </Button>\r\n                        {\r\n                            // If a Modul is given, show an  (update) button, else an hinzufügen (add) button\r\n                            modul ?\r\n                                <Button disabled={nameValidationFailed || edv_nrValidationFailed} variant='contained' onClick={this.updateModul} color='primary'>\r\n                                    Speichern\r\n                        </Button>\r\n                                :\r\n                                <Button disabled={nameValidationFailed || !nameEdited || edv_nrValidationFailed || !edv_nrEdited}\r\n                                    variant='contained' onClick={this.addModul} color='primary'>\r\n                                    Hinzufügen\r\n                        </Button>\r\n                        }\r\n                    </DialogActions>\r\n                </Dialog>\r\n                : null\r\n        );\r\n    }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    closeButton: {\r\n        position: 'absolute',\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n    textfield: {\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(1)\r\n    }\r\n});\r\n\r\n/** PropTypes */\r\nModulForm.propTypes = {\r\n    /** @ignore */\r\n    classes: PropTypes.object.isRequired,\r\n    show: PropTypes.bool.isRequired,\r\n    onClose: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default withStyles(styles)(ModulForm);","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Button, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions } from '@material-ui/core';\r\nimport { ElectivAPI } from '../../api';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\n/**\r\n * Es wird ein Dialog dargestellt, mit welchem man ein bestimmtes Modul löschen kann\r\n * \r\n * @see See Matieral-UIs [Dialog] (https://material-ui.com/components/dialogs)\r\n * \r\n */\r\n\r\nclass ModulDelete extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    //initiiere den state\r\n    this.state = {\r\n      modul: props.modul,\r\n      showSnackbar: false,\r\n    };\r\n  }\r\n\r\n  closeSnackbar = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    this.setState({\r\n      showSnackbar: false\r\n    });\r\n  };\r\n\r\n  //Wenn das Dialog geschlossen wird\r\n  handleClose = () => {\r\n    this.props.onClose(null);\r\n  }\r\n\r\n  // API Anbindung um das Modul über das Backend in der Datenbank zu löschen\r\n  deleteModul = () => {\r\n    ElectivAPI.getAPI().deleteModul(this.state.modul.id)\r\n      .then(() => {\r\n        this.props.getModule();\r\n        this.props.onClose(null);\r\n      }).catch(e => {\r\n        this.setState({\r\n          showSnackbar: true\r\n        })\r\n      })\r\n  }\r\n\r\n  /** Rendert die Komponente */\r\n  render() {\r\n    const { show } = this.props;\r\n    const { modul, showSnackbar } = this.state;\r\n    return (\r\n      <div>\r\n        <Dialog\r\n          open={show}\r\n          onClose={this.handleClose}\r\n          maxWidth='xs'\r\n        >\r\n          <DialogTitle>{\"Sind Sie sich sicher?\"}</DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText>\r\n              Wenn Sie das Modul <b>\"{modul.name}\"</b> löschen möchten, drücken Sie auf \"JA\".\r\n                  </DialogContentText>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={this.handleClose} color=\"primary\">\r\n              Abbrechen\r\n                  </Button>\r\n            <Button onClick={this.deleteModul} color=\"primary\" autoFocus>\r\n              Ja\r\n                  </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n        <Snackbar open={showSnackbar} autoHideDuration={6000} onClose={this.closeSnackbar}>\r\n          <Alert onClose={this.closeSnackbar} severity=\"error\">\r\n            Dieses Modul kann nicht gelöscht werden\r\n                </Alert>\r\n        </Snackbar>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n})\r\n\r\n/** PropTypes */\r\nModulDelete.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  show: PropTypes.bool.isRequired,\r\n  onClose: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default withStyles(styles)(ModulDelete);","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\r\nimport LoadingProgress from './dialogs/LoadingProgress';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport { Typography, IconButton, Grid, Tooltip } from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Divider from '@material-ui/core/Divider';\r\n//import {ElectivAPI} from '../api';\r\n\r\nimport ModulForm from './dialogs/ModulForm';\r\nimport ModulDelete from './dialogs/ModulDelete';\r\n\r\n\r\n/**\r\n * Es wird ein einzelnes Modul mit allen notwendigen Informationen angezeigt\r\n * Außerdem lassen sich Moduleinträge löschen und bearbeiten\r\n * \r\n * @see See [ModulDelete](#moduldelte)\r\n * @see See [ModulForm](#modulform)\r\n */\r\n\r\n\r\n\r\nclass ModulListeEintrag extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        //initiiere einen leeren state\r\n        this.state = {\r\n            showModulForm: false,\r\n            showModulDelete: false,\r\n            error: null,\r\n            loadingInProgress: false\r\n        };\r\n    }\r\n\r\n    //ruft die getModule Funktion in den Props auf\r\n    getModule = () => {\r\n      this.props.getModule();\r\n    }\r\n\r\n    //Wird aufgerufen, wenn das Dialog-Fenster Modulform geschlossen wird\r\n    modulFormClosed = (modul) => {\r\n      if (modul){\r\n        this.setState({\r\n          modul: modul,\r\n          showModulForm: false\r\n        });\r\n      }else {\r\n        this.setState({\r\n          showModulForm: false\r\n        });\r\n      }\r\n    }\r\n    \r\n    //Öffnet das Dialog-Fenster ModulForm, wenn der Button geklickt wurde\r\n    bearbeitenButtonClicked = event => {\r\n      event.stopPropagation();\r\n      this.setState({\r\n        showModulForm: true\r\n      });\r\n    }\r\n    \r\n    //Öffnet das Dialog-Fenster ModulDelete, wenn der Button geklickt wurde\r\n    modulDeleteButtonClicked =  event => {\r\n      event.stopPropagation();\r\n      this.setState({\r\n        showModulDelete: true\r\n      });\r\n    }\r\n    \r\n    //Wird aufgerufen, wenn das Dialog-Fenster ModulDelete geschlossen wird\r\n    modulDeleteClosed = () => {\r\n        this.setState({\r\n          showModulDelete: false\r\n        });\r\n        this.getModule();\r\n    }\r\n\r\n    /** Rendert die Komponente */\r\n    render(){\r\n        const {classes, modul} = this.props;\r\n        const { showModulForm, showModulDelete,  error, loadingInProgress } = this.state;\r\n\r\n        return(\r\n          <div>\r\n            <ListItem className={classes.root}>\r\n                  <Grid container  alignItems=\"center\" spacing={2}>\r\n                    <Grid item>\r\n                        <Typography >{modul.edv_nr}</Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Typography >{modul.name}</Typography>\r\n                    </Grid>\r\n                    <Grid item xs/>\r\n                    <Grid item>\r\n                    <Tooltip title='Bearbeiten' placement=\"bottom\">\r\n                      <IconButton  className={classes.bearbeitenButton} variant='contained' onClick={this.bearbeitenButtonClicked}>\r\n                          <EditIcon />\r\n                      </IconButton>\r\n                    </Tooltip>\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Tooltip title='Löschen' placement=\"bottom\">\r\n                          <IconButton variant=\"contained\"  onClick={this.modulDeleteButtonClicked}><DeleteIcon /></IconButton>\r\n                      </Tooltip>\r\n                    </Grid>\r\n                    </Grid>\r\n            </ListItem>\r\n            <ListItem>\r\n              <LoadingProgress show={loadingInProgress}/>\r\n              <ContextErrorMessage error={error} contextErrorMsg = {'Dieses Modul konnte nicht geladen werden'} onReload={this.getModule} />\r\n            </ListItem>\r\n            <Divider/>\r\n            <ModulForm show={showModulForm} modul={modul} onClose={this.modulFormClosed} getModule= {this.getModule}/>\r\n            <ModulDelete show={showModulDelete} modul={modul} onClose={this.modulDeleteClosed} getModule= {this.getModule} />       \r\n          </div>                        \r\n        );\r\n    }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n      root: {\r\n        width: '100%',\r\n        marginTop: '16px'\r\n      },\r\n    });\r\n\r\n/** PropTypes */\r\nModulListeEintrag.propTypes = {\r\n    /** @ignore */\r\n    classes: PropTypes.object.isRequired,\r\n    show: PropTypes.bool.isRequired\r\n  }\r\n  \r\n\r\n\r\nexport default withStyles(styles)(ModulListeEintrag);\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, IconButton, InputAdornment, TextField,  Paper , Grid} from '@material-ui/core';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { ElectivAPI } from '../api';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\r\nimport LoadingProgress from './dialogs/LoadingProgress';\r\nimport List from '@material-ui/core/List';\r\n\r\nimport ModulListeEintrag from './ModulListeEintrag';\r\nimport ModulForm from './dialogs/ModulForm';\r\n\r\n\r\n/**\r\n * Es werden alle Module der Datenbank dargestellt\r\n * \r\n * @see See [ModulListeEintrag](#modullisteeintrag)\r\n * \r\n * Außerdem kann der Administrator neue Module anlegen\r\n * \r\n * @see See [ModulForm](#modulform)\r\n */\r\n\r\nclass ModulListe extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    //initiiere einen leeren state\r\n    this.state = {\r\n        module: [],\r\n        filteredModule: [],\r\n        modulFilter: '',\r\n        showModulForm: false,\r\n        showDeleteForm: false,\r\n        error: null,\r\n        loadingInProgress: false,\r\n    };\r\n  }\r\n\r\n  //Öffnet das Dialog-Fenster Modulfrom, wenn der Button geklickt wurde\r\n  addButtonClicked = event => {\r\n    event.stopPropagation();\r\n    this.setState({\r\n      showModulForm: true\r\n    });\r\n  }\r\n\r\n  //Such-Funktion, um nach bestimmten Module zu filtern\r\n  filterFieldValueChange= event => {\r\n    const value = event.target.value.toLowerCase();\r\n    this.setState({\r\n        filteredModule: this.state.module.filter(modul => {\r\n            let nameContainsValue = modul.getname().toLowerCase().includes(value);\r\n            let edv_nrContainsValue = modul.getEdv_nr().toString().includes(value);\r\n            return nameContainsValue || edv_nrContainsValue;\r\n        }),\r\n        modulFilter: value\r\n    });\r\n}\r\n\r\n//Funktion, um die Eingaben der Such-Funktion zu löschen\r\nclearFilterFieldButtonClicked = () => {\r\n    this.setState({\r\n        filteredModule: [...this.state.module],\r\n        modulFilter: ''\r\n    });\r\n}\r\n\r\n//Wird aufgerufen, wenn das Dialog-Fenster Modulform geschlossen wird\r\nmodulFormClosed = modul => {\r\n    this.getModule();\r\n    if (modul) {\r\n      const newModulList = [...this.state.module, modul];\r\n      this.setState({\r\n        module: newModulList,\r\n        filteredModule: [...newModulList],\r\n        showModulForm: false\r\n      });\r\n    } else {\r\n      this.setState({\r\n        showModulForm: false\r\n      });\r\n    }\r\n  }\r\n\r\n  // API Anbindung um alle Module vom Backend zu bekommen \r\n  getModule = () => {\r\n    ElectivAPI.getAPI().getModule()\r\n    .then(modulBOs =>\r\n        this.setState({\r\n            module: modulBOs,\r\n            filteredModule: [...modulBOs],\r\n            error: null,\r\n            loadingInProgress: false,\r\n        })).catch(e =>\r\n            this.setState({\r\n                module: [],\r\n                filteredModule: [],\r\n                error: e,\r\n                loadingInProgress: false,\r\n            }));\r\n    this.setState({\r\n        error: null,\r\n        loadingInProgress: true,\r\n    });\r\n}\r\n\r\n\r\n\r\n  // Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\r\n  componentDidMount() {\r\n      this.getModule();\r\n  }\r\n\r\n\r\n\r\n  /** Renders the component */\r\n  render() {\r\n    const { classes } = this.props;\r\n    const {  loadingInProgress, error, modulFilter, filteredModule, showModulForm} = this.state;\r\n\r\n    return (\r\n      <div className={classes.root}>\r\n        <Grid container spacing={2} alignItems=\"center\">\r\n            <Grid item >\r\n            <TextField\r\n                className={classes.filter}\r\n                type='text'\r\n                label='Module suchen'\r\n                value={modulFilter}\r\n                onChange={this.filterFieldValueChange}\r\n                InputProps={{\r\n                    endAdornment: <InputAdornment position='end'>\r\n                    <IconButton onClick={this.clearFilterFieldButtonClicked}>\r\n                        <ClearIcon fontSize=\"small\"/>\r\n                    </IconButton>\r\n                    </InputAdornment>,\r\n                }}\r\n            />\r\n            </Grid>\r\n            <Grid item xs/>\r\n            <Grid item>\r\n                <Tooltip title='Modul anlegen' placement=\"left\">\r\n                    <Fab size=\"medium\"  className={classes.addButton} color=\"primary\" aria-label=\"add\" onClick={this.addButtonClicked}>\r\n                        <AddIcon />\r\n                    </Fab>\r\n                </Tooltip>\r\n            </Grid>\r\n        </Grid>\r\n        <Paper>\r\n            <List className={classes.root} dense>\r\n                {\r\n                filteredModule.map(modul => \r\n                    <ModulListeEintrag key={modul.getID()} modul = {modul} show={this.props.show} getModule={this.getModule}/>)\r\n                }\r\n            </List>\r\n          <LoadingProgress show={loadingInProgress} />\r\n          <ContextErrorMessage error={error} contextErrorMsg={`Module konnten nicht geladen werden.`} onReload={this.getModule}/>\r\n        </Paper>\r\n        <ModulForm show={showModulForm} onClose={this.modulFormClosed} getModule= {this.getModule}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n      width: '100%',\r\n      marginTop: theme.spacing(2),\r\n      paddingTop: '4px'\r\n  },\r\n  addButton: {\r\n      marginRight: theme.spacing(2)\r\n  },\r\n  filter: {\r\n      marginLeft: theme.spacing(2)\r\n  }\r\n});\r\n\r\n/** PropTypes */\r\nModulListe.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** @ignore */\r\n  location: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default withRouter(withStyles(styles)(ModulListe));\r\n\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n    withStyles, Button, IconButton, Dialog, DialogContent, DialogContentText,\r\n    DialogTitle, DialogActions, TextField\r\n} from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ContextErrorMessage from './ContextErrorMessage';\r\nimport LoadingProgress from './LoadingProgress';\r\n\r\nimport { ElectivAPI, SemesterBO } from '../../api';\r\n\r\n/**\r\n * Es wird ein Dialog mit einem Formular dargestellt, mit welchem man Semester erstellen / bearbeiten kann \r\n * \r\n * @see See Material-UIs [Dialog](https://material-ui.com/components/dialogs)\r\n * \r\n */\r\n\r\nclass SemesterForm extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        //gebe einen leeren status\r\n        this.state = {\r\n            name: '',\r\n            nameValidationFailed: false,\r\n            nameEdited: false,\r\n\r\n            addingError: null,\r\n            addingInProgress: false,\r\n\r\n            updatingError: null,\r\n            updatingInProgress: false\r\n        };\r\n        this.baseState = this.state;\r\n    }\r\n\r\n    // API Anbindung um das Semester über das Backend in die Datenbank einzufügen\r\n    addSemester = () => {\r\n        let newSemester = new SemesterBO()\r\n        newSemester.setID(0)\r\n        newSemester.setname(this.state.name)\r\n        ElectivAPI.getAPI().addSemester(newSemester).then(semester => {\r\n            this.props.getSemester()\r\n            this.setState(this.baseState);\r\n            this.props.onClose(semester); //Aufrufen parent in Backend\r\n        }).catch(e =>\r\n            this.setState({\r\n                addingInProgress: false,\r\n                addingError: e\r\n            })\r\n        );\r\n        // Ladeanimation einblenden\r\n        this.setState({\r\n            addingProgress: true,\r\n            addingError: null\r\n        });\r\n    }\r\n\r\n    // API Anbindung um das Semester über das Backend in der Datenbank upzudaten\r\n    updateSemester = () => {\r\n        let semester = this.props.semester;\r\n        semester.setname(this.state.name)\r\n        ElectivAPI.getAPI().updateSemester(semester).then(semester => {\r\n            this.props.getSemester()\r\n            this.setState(this.baseState);\r\n            this.props.onClose(semester); //Aufrufen parent in backend\r\n        }).catch(e =>\r\n            this.setState({\r\n                updatingInProgress: false,\r\n                updatingError: e\r\n            })\r\n        );\r\n        // Ladeanimation einblenden\r\n        this.setState({\r\n            updatingInProgress: true,\r\n            updatingError: null\r\n        });\r\n    }\r\n\r\n    // Validierung der Textfeldaenderungen um einheitlicher Format des Semesters zu speichern\r\n    textFieldValueChange = (event) => {\r\n        const value = event.target.value;\r\n        const re = /(^SS[0-9]{2}$)|(^WS[0-9]{2}\\/[0-9]{2}$)/;\r\n\r\n        let error = false;\r\n        if (value.trim().length === 0) {\r\n            error = true;\r\n        }\r\n        if (re.test(event.target.value) === false) {\r\n            error = true;\r\n        }\r\n\r\n        this.setState({\r\n            [event.target.id]: event.target.value,\r\n            [event.target.id + 'ValidationFailed']: error,\r\n            [event.target.id + 'Edited']: true\r\n        });\r\n    }\r\n\r\n    //Infos das zu bearbeutenden Semester laden\r\n    getInfos = () => {\r\n        if (this.props.semester) {\r\n            let name = this.props.semester.getname();\r\n            this.setState({\r\n                name: name,\r\n            })\r\n        }\r\n    }\r\n\r\n    //wird aufgerufen, wenn das Dialog geschlossen wird\r\n    handleClose = () => {\r\n        this.setState(this.baseState);\r\n        this.props.onClose(null);\r\n    }\r\n\r\n    /** Renders the component */\r\n    render() {\r\n        const { classes, show, semester } = this.props;\r\n        const {\r\n            name,\r\n            nameValidationFailed,\r\n            nameEdited,\r\n\r\n            addingInProgress,\r\n            addingError,\r\n            updatingInProgress,\r\n            updatingError, } = this.state;\r\n\r\n        let title = '';\r\n        let header = '';\r\n\r\n        if (semester) {\r\n            // Semester objekt true, somit ein edit\r\n            title = `Semester \"${semester.name}\" bearbeiten`;\r\n            header = 'Bitte Format SS** oder WS**/** verwenden';\r\n        } else {\r\n            title = 'Neues Semester erstellen';\r\n            header = 'Bitte Format SS** oder WS**/** verwenden';\r\n        }\r\n\r\n        return (\r\n            show ?\r\n                <Dialog open={show} onEnter={this.getInfos} onClose={this.handleClose} maxWidth='xs' fullWidth>\r\n                    <DialogTitle className={classes.dialogtitle}>{title}\r\n                        <IconButton className={classes.closeButton} onClick={this.handleClose}>\r\n                            <CloseIcon />\r\n                        </IconButton>\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText>\r\n                            {header}\r\n                        </DialogContentText>\r\n\r\n                        <form className={classes.root} noValidate autoComplete='off'>\r\n\r\n                            <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='small' id='name' label='Semester' variant=\"outlined\" value={name}\r\n                                onChange={this.textFieldValueChange} error={nameValidationFailed} />\r\n\r\n                        </form>\r\n                        <LoadingProgress show={addingInProgress || updatingInProgress} />\r\n                        {\r\n                            // Show error message in dependency of semester prop\r\n                            semester ?\r\n                                <ContextErrorMessage error={updatingError} contextErrorMsg={`Semester ${semester.getID()} could not be updated.`} onReload={this.updateSemester} />\r\n                                :\r\n                                <ContextErrorMessage error={addingError} contextErrorMsg={`The Semester could not be added.`} onReload={this.addSemester} />\r\n                        }\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={this.handleClose} color='secondary'>\r\n                            Abbrechen\r\n                        </Button>\r\n                        {\r\n                            // If a Semester is given, show an speichern (update) button, else an hinzufügen button\r\n                            semester ?\r\n                                <Button disabled={nameValidationFailed} variant='contained' onClick={this.updateSemester} color='primary'>\r\n                                    Speichern\r\n                        </Button>\r\n                                :\r\n                                <Button disabled={nameValidationFailed || !nameEdited}\r\n                                    variant='contained' onClick={this.addSemester} color='primary'>\r\n                                    Hinzufügen\r\n                        </Button>\r\n                        }\r\n                    </DialogActions>\r\n                </Dialog>\r\n                : null\r\n        );\r\n    }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    closeButton: {\r\n        position: 'absolute',\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n    textfield: {\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(1)\r\n    }\r\n});\r\n\r\n/** PropTypes */\r\nSemesterForm.propTypes = {\r\n    /** @ignore */\r\n    classes: PropTypes.object.isRequired,\r\n    /** If true, the form is rendered */\r\n    show: PropTypes.bool.isRequired,\r\n    onClose: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default withStyles(styles)(SemesterForm);","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Button, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions } from '@material-ui/core';\r\nimport { ElectivAPI } from '../../api';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\n/**\r\n * Es wird ein Dialog dargestellt, mit welchem man ein bestimmtes Semester löschen kann \r\n * \r\n * @see See Material-UIs [Dialog](https://material-ui.com/components/dialogs)\r\n * \r\n */\r\n\r\nclass SemesterDelete extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Status initalisieren\r\n    this.state = {\r\n      semester: props.semester,\r\n      showSnackbar: false\r\n    };\r\n  }\r\n\r\n  closeSnackbar = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    this.setState({\r\n      showSnackbar: false\r\n    });\r\n  };\r\n\r\n  //wird aufgerufen, wenn das Dialog geschlossen wird\r\n  handleClose = () => {\r\n    this.props.onClose(null);\r\n  }\r\n\r\n  // API Anbindung um das Semester über das Backend aus der Datenbank löschen\r\n  deleteSemester = () => {\r\n    ElectivAPI.getAPI().deleteSemester(this.state.semester.id)\r\n      .then(() => {\r\n        this.props.getSemester();\r\n        this.props.onClose(null);\r\n      }).catch(e => {\r\n        this.setState({\r\n          showSnackbar: true\r\n        })\r\n      })\r\n  }\r\n\r\n  /** Renders the component */\r\n  render() {\r\n    const { show } = this.props;\r\n    const { semester, showSnackbar } = this.state;\r\n    return (\r\n      <div>\r\n        <Dialog\r\n          open={show}\r\n          onClose={this.handleClose}\r\n          maxWidth='xs'\r\n        >\r\n          <DialogTitle>{\"Sind Sie sich sicher?\"}</DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText>\r\n              Wenn Sie das Semester <b>\"{semester.name}\"</b> löschen möchten, klicken Sie auf \"JA\".\r\n                  </DialogContentText>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={this.handleClose} color=\"primary\">\r\n              Abbrechen\r\n                  </Button>\r\n            <Button onClick={this.deleteSemester} color=\"primary\" autoFocus>\r\n              Ja\r\n                  </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n        <Snackbar open={showSnackbar} autoHideDuration={6000} onClose={this.closeSnackbar}>\r\n          <Alert onClose={this.closeSnackbar} severity=\"error\">\r\n            Dieses Semester kann nicht gelöscht werden\r\n                </Alert>\r\n        </Snackbar>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n})\r\n\r\n/** PropTypes */\r\nSemesterDelete.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  show: PropTypes.bool.isRequired,\r\n  onClose: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default withStyles(styles)(SemesterDelete);","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles} from '@material-ui/core/styles';\r\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\r\nimport LoadingProgress from './dialogs/LoadingProgress';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport {Typography, IconButton, Grid, Tooltip} from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nimport SemesterForm from './dialogs/SemesterForm';\r\nimport SemesterDelete from './dialogs/SemesterDelete';\r\n\r\n\r\n/**\r\n * Es wird ein einzelnes Semester angezeigt\r\n * \r\n * @see See [SemesterForm](#semesterform)\r\n * @see See [SemesterDelete](#semesterdelete)\r\n * \r\n * Außerdem lassen sich Semestereinträge löschen und bearbeiten\r\n * \r\n */\r\n\r\nclass SemesterListeEintrag extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        //gebe einen leeren status\r\n        this.state = {\r\n            showSemesterForm: false,\r\n            showSemesterDelete: false,\r\n            error: null,\r\n            loadingInProgress: false\r\n        };\r\n    }\r\n\r\n    // API Anbindung um Semester vom Backend zu bekommen \r\n    getSemester = () => {\r\n      this.props.getSemester();\r\n    }\r\n\r\n    // wird aufgerufen, wenn Dialog Fenster geschloßen werden soll\r\n    semesterFormClosed = (semester) => {\r\n      if (semester){\r\n        this.setState({\r\n          semester: semester,\r\n          showSemesterForm: false\r\n        });\r\n      }else {\r\n        this.setState({\r\n          showSemesterForm: false\r\n        });\r\n      }\r\n    }\r\n  \r\n    // wird aufgerufen, wenn ein Semester bearbeitet werden soll\r\n    bearbeitenButtonClicked = event => {\r\n      event.stopPropagation();\r\n      this.setState({\r\n        showSemesterForm: true\r\n      });\r\n    }\r\n    \r\n    // wird aufgerufen, wenn ein Semester gelöscht werden soll\r\n    semesterDeleteButtonClicked =  event => {\r\n      event.stopPropagation();\r\n      this.setState({\r\n        showSemesterDelete: true\r\n      });\r\n    }\r\n  \r\n    // wird aufgerufen, wenn DELETE Dialog Fenster geschloßen werden soll\r\n    semesterDeleteClosed = () => {\r\n        this.setState({\r\n          showSemesterDelete: false\r\n        });\r\n        this.getSemester();\r\n    }\r\n\r\n    /** Renders the component */\r\n    render(){\r\n        const {classes, semester} = this.props;\r\n        const { showSemesterForm, showSemesterDelete,  error, loadingInProgress } = this.state;\r\n\r\n        return(\r\n          <div>\r\n            <ListItem className={classes.root}>\r\n                  <Grid container  alignItems=\"center\" spacing={2}>\r\n                    <Grid item>\r\n                        <Typography >{semester.name}</Typography>\r\n                    </Grid>\r\n                    <Grid item xs/>\r\n                    <Grid item>\r\n                    <Tooltip title='Bearbeiten' placement=\"bottom\">\r\n                      <IconButton  className={classes.bearbeitenButton} variant='contained' onClick={this.bearbeitenButtonClicked}>\r\n                          <EditIcon />\r\n                      </IconButton>\r\n                    </Tooltip>\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Tooltip title='Löschen' placement=\"bottom\">\r\n                          <IconButton variant=\"contained\"  onClick={this.semesterDeleteButtonClicked}><DeleteIcon /></IconButton>\r\n                      </Tooltip>\r\n                    </Grid>\r\n                  </Grid>\r\n            </ListItem>\r\n            <ListItem>\r\n              <LoadingProgress show={loadingInProgress}/>\r\n              <ContextErrorMessage error={error} contextErrorMsg = {'Dieses Semester konnte nicht geladen werden'} onReload={this.getSemester} />\r\n            </ListItem>\r\n            <Divider/>\r\n            <SemesterForm show={showSemesterForm} semester={semester} onClose={this.semesterFormClosed} getSemester= {this.getSemester}/>\r\n            <SemesterDelete show={showSemesterDelete} semester={semester} onClose={this.semesterDeleteClosed} getSemester= {this.getSemester}/>       \r\n          </div>                        \r\n        );\r\n    }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n      root: {\r\n        width: '100%',\r\n        marginTop: '16px'\r\n      },\r\n    });\r\n\r\n/** PropTypes */\r\nSemesterListeEintrag.propTypes = {\r\n    /** @ignore */\r\n    classes: PropTypes.object.isRequired,\r\n    show: PropTypes.bool.isRequired\r\n  }\r\n  \r\n\r\nexport default withStyles(styles)(SemesterListeEintrag);\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, IconButton, InputAdornment, TextField,  Paper , Grid} from '@material-ui/core';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { ElectivAPI } from '../api';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\r\nimport LoadingProgress from './dialogs/LoadingProgress';\r\nimport List from '@material-ui/core/List';\r\n\r\nimport SemesterListeEintrag from './SemesterListeEintrag';\r\nimport SemesterForm from './dialogs/SemesterForm';\r\n\r\n\r\n/**\r\n * Es werden alle Semester angezeit, die man bearbeiten, löschen oder neu hinzufügen kann\r\n * \r\n * @see See [SemesterListeEintrag](#semesterlisteeintrag)\r\n * @see See [SemesterForm](#semesterform)\r\n * \r\n * Die Seite ist nur für Admin sichtbar. Er kann die Semester löschen oder mit Hilfe von einem Dialog-Fenster bearbeiten\r\n * Mit Hilfe von einem Dialog-Fenster kann er neue Semester anlegen\r\n * \r\n */\r\n\r\nclass SemesterListe extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    //gebe einen leeren status\r\n    this.state = {\r\n        semester: [],\r\n        filteredSemester: [],\r\n        semesterFilter: '',\r\n        showSemesterForm: false,\r\n        showDeleteForm: false,\r\n        error: null,\r\n        loadingInProgress: false,\r\n    };\r\n  }\r\n\r\n  //Button um neue Semester anlegen. Damit öffnet sich das Dialog Fenster\r\n  addButtonClicked = event => {\r\n    event.stopPropagation();\r\n    this.setState({\r\n      showSemesterForm: true\r\n    });\r\n  }\r\n\r\n  //Suche-Funktion zum Suchen von Semester\r\n  filterFieldValueChange= event => {\r\n    const value = event.target.value.toLowerCase();\r\n    this.setState({\r\n        filteredSemester: this.state.semester.filter(semester => {\r\n            let nameContainsValue = semester.getname().toLowerCase().includes(value);\r\n            return nameContainsValue;\r\n        }),\r\n        semesterFilter: value\r\n    });\r\n}\r\n\r\n//Suche leeren\r\nclearFilterFieldButtonClicked = () => {\r\n    this.setState({\r\n        filteredSemester: [...this.state.semester],\r\n        semesterFilter: ''\r\n    });\r\n}\r\n\r\n//wird aufgerufen, wenn Dialog Fenster geschloßen wird\r\nsemesterFormClosed = semester => {\r\n    if (semester) {\r\n      const newSemesterList = [...this.state.semester, semester];\r\n      this.setState({\r\n        semester: newSemesterList,\r\n        filteredSemester: [...newSemesterList],\r\n        showSemesterForm: false\r\n      });\r\n    } else {\r\n      this.setState({\r\n        showSemesterForm: false\r\n      });\r\n    }\r\n  }\r\n\r\n  // API Anbindung um alle Module vom Backend zu bekommen \r\n  getSemester = () => {\r\n    ElectivAPI.getAPI().getSemester()\r\n    .then(semesterBOs =>\r\n        this.setState({\r\n            semester: semesterBOs,\r\n            filteredSemester: [...semesterBOs],\r\n            error: null,\r\n            loadingInProgress: false,\r\n        })).catch(e =>\r\n            this.setState({\r\n                semester: [],\r\n                filteredSemester: [],\r\n                error: e,\r\n                loadingInProgress: false,\r\n            }));\r\n    this.setState({\r\n        error: null,\r\n        loadingInProgress: true,\r\n    });\r\n}\r\n\r\n\r\n  // Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\r\n  componentDidMount() {\r\n      this.getSemester();\r\n  }\r\n  \r\n\r\n  /** Renders the component */\r\n  render() {\r\n    const { classes } = this.props;\r\n    const {  loadingInProgress, error, semesterFilter, filteredSemester, showSemesterForm} = this.state;\r\n\r\n    return (\r\n      <div className={classes.root}>\r\n        <Grid container spacing={2} alignItems=\"center\">\r\n            <Grid item >\r\n            <TextField\r\n                className={classes.filter}\r\n                type='text'\r\n                label='Semester suchen'\r\n                value={semesterFilter}\r\n                onChange={this.filterFieldValueChange}\r\n                InputProps={{\r\n                    endAdornment: <InputAdornment position='end'>\r\n                    <IconButton onClick={this.clearFilterFieldButtonClicked}>\r\n                        <ClearIcon fontSize=\"small\"/>\r\n                    </IconButton>\r\n                    </InputAdornment>,\r\n                }}\r\n            />\r\n            </Grid>\r\n            <Grid item xs/>\r\n            <Grid item>\r\n                <Tooltip title='Semester anlegen' placement=\"left\">\r\n                    <Fab size=\"medium\"  className={classes.addButton} color=\"primary\" aria-label=\"add\" onClick={this.addButtonClicked}>\r\n                        <AddIcon />\r\n                    </Fab>\r\n                </Tooltip>\r\n            </Grid>\r\n        </Grid>\r\n        <Paper>\r\n            <List className={classes.root} dense>\r\n                {\r\n                filteredSemester.map(semester => \r\n                    <SemesterListeEintrag key={semester.getID()} semester = {semester} show={this.props.show} getSemester={this.getSemester}/>)\r\n                }\r\n            </List>\r\n          <LoadingProgress show={loadingInProgress} />\r\n          <ContextErrorMessage error={error} contextErrorMsg={`Semester konnten nicht geladen werden.`} onReload={this.getSemester} />\r\n        </Paper>\r\n        <SemesterForm show={showSemesterForm} onClose={this.semesterFormClosed} getSemester= {this.getSemester}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n      width: '100%',\r\n      marginTop: theme.spacing(2),\r\n      paddingTop: '4px'\r\n  },\r\n  addButton: {\r\n      marginRight: theme.spacing(2)\r\n  },\r\n  filter: {\r\n      marginLeft: theme.spacing(2)\r\n  }\r\n});\r\n\r\n/** PropTypes */\r\nSemesterListe.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** @ignore */\r\n  location: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default withRouter(withStyles(styles)(SemesterListe));\r\n\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n    withStyles, Button, IconButton, Dialog, DialogContent, DialogContentText,\r\n    DialogTitle, DialogActions, TextField\r\n} from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ContextErrorMessage from './ContextErrorMessage';\r\nimport LoadingProgress from './LoadingProgress';\r\n\r\nimport { ElectivAPI, ProjektartBO } from '../../api';\r\n\r\n\r\nclass ProjektartenForm extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            nameValidationFailed: false,\r\n            nameEdited: false,\r\n\r\n            ects: null,\r\n            ectsValidationFailed: false,\r\n            ectsEdited: false,\r\n\r\n            sws: null,\r\n            swsValidationFailed: false,\r\n            swsEdited: false,\r\n\r\n            addingError: null,\r\n            addingInProgress: false,\r\n\r\n            updatingError: null,\r\n            updatingInProgress: false\r\n        };\r\n        this.baseState = this.state;\r\n    }\r\n\r\n    addProjektart = () => {\r\n        let newProjektart = new ProjektartBO()\r\n        newProjektart.setID(0)\r\n        newProjektart.setname(this.state.name)\r\n        newProjektart.set_ects(this.state.ects)\r\n        newProjektart.set_sws(this.state.sws)\r\n        ElectivAPI.getAPI().addProjektart(newProjektart).then(projektart => {\r\n            this.props.getProjektart()\r\n            this.setState(this.baseState);\r\n            this.props.onClose(projektart); //Aufrufen parent in backend\r\n        }).catch(e =>\r\n            this.setState({\r\n                addingInProgress: false,\r\n                addingError: e\r\n            })\r\n        );\r\n        // Ladeanimation einblenden\r\n        this.setState({\r\n            addingProgress: true,\r\n            addingError: null\r\n        });\r\n    }\r\n\r\n    updateProjektart = () => {\r\n        let projektart = this.props.projektart;\r\n        projektart.setname(this.state.name)\r\n        projektart.set_ects(this.state.ects)\r\n        projektart.set_sws(this.state.sws)\r\n        ElectivAPI.getAPI().updateProjektart(projektart).then(projektart => {\r\n            this.props.getProjektart()\r\n            this.setState(this.baseState);\r\n            this.props.onClose(projektart); //Aufrufen parent in backend\r\n        }).catch(e =>\r\n            this.setState({\r\n                updatingInProgress: false,\r\n                updatingError: e\r\n            })\r\n        );\r\n        // Ladeanimation einblenden\r\n        this.setState({\r\n            updatingInProgress: true,\r\n            updatingError: null\r\n        });\r\n    }\r\n\r\n    // Validierung der Textfeldaenderungen \r\n    textFieldValueChange = (event) => {\r\n        const value = event.target.value;\r\n\r\n        let error = false;\r\n        if (value.trim().length === 0) {\r\n            error = true;\r\n        }\r\n        this.setState({\r\n            [event.target.id]: event.target.value,\r\n            [event.target.id + 'ValidationFailed']: error,\r\n            [event.target.id + 'Edited']: true\r\n        });\r\n    }\r\n\r\n    numberValueChange = (event) => {\r\n        const value = event.target.value;\r\n        const re = /^[0-9]{1,10}$/;\r\n\r\n        let error = false;\r\n        if (value.trim().length === 0) {\r\n            error = true;\r\n        }\r\n        if (re.test(event.target.value) === false) {\r\n            error = true;\r\n        }\r\n\r\n        this.setState({\r\n            [event.target.id]: event.target.value,\r\n            [event.target.id + 'ValidationFailed']: error,\r\n            [event.target.id + 'Edited']: true\r\n        });\r\n    }\r\n\r\n    getInfos = () => {\r\n        if (this.props.projektart) {\r\n            let name = this.props.projektart.getname();\r\n            let ects = this.props.projektart.get_ects();\r\n            let sws = this.props.projektart.get_sws();\r\n            this.setState({\r\n                name: name,\r\n                ects: ects,\r\n                sws: sws,\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    handleClose = () => {\r\n        this.setState(this.baseState);\r\n        this.props.onClose(null);\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const { classes, show, projektart } = this.props;\r\n        const {\r\n            name,\r\n            nameValidationFailed,\r\n            nameEdited,\r\n\r\n            ects,\r\n            ectsValidationFailed,\r\n            ectsEdited,\r\n\r\n            sws,\r\n            swsValidationFailed,\r\n            swsEdited,\r\n\r\n            addingInProgress,\r\n            addingError,\r\n            updatingInProgress,\r\n            updatingError, } = this.state;\r\n\r\n        let title = '';\r\n        let header = '';\r\n\r\n        if (projektart) {\r\n            // Projekt objekt true, somit ein edit\r\n            title = `Projektart \"${projektart.name}\" bearbeiten`;\r\n            header = 'Neue Projektart Daten einfügen';\r\n        } else {\r\n            title = 'Erstelle eine neue Projektart';\r\n            header = 'Projektart Daten einfügen';\r\n        }\r\n\r\n\r\n        return (\r\n            show ?\r\n                <Dialog open={show} onEnter={this.getInfos} onClose={this.handleClose} maxWidth='xs' fullWidth>\r\n                    <DialogTitle className={classes.dialogtitle}>{title}\r\n                        <IconButton className={classes.closeButton} onClick={this.handleClose}>\r\n                            <CloseIcon />\r\n                        </IconButton>\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText>\r\n                            {header}\r\n                        </DialogContentText>\r\n\r\n                        <form className={classes.root} noValidate autoComplete='off'>\r\n\r\n                            <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='small' id='name' label='Projektartname' variant=\"outlined\" value={name}\r\n                                onChange={this.textFieldValueChange} error={nameValidationFailed} />\r\n\r\n                            <TextField className={classes.textfield} type='text' required fullWidth margin='small' id='ects' label='ECTS' variant=\"outlined\" value={ects}\r\n                                onChange={this.numberValueChange} error={ectsValidationFailed} />\r\n\r\n                            <TextField className={classes.textfield} type='text' required fullWidth margin='small' id='sws' label='SWS' variant=\"outlined\" value={sws}\r\n                                onChange={this.numberValueChange} error={swsValidationFailed} />\r\n\r\n                        </form>\r\n                        <LoadingProgress show={addingInProgress || updatingInProgress} />\r\n                        {\r\n                            // Show error message in dependency of Projektart prop\r\n                            projektart ?\r\n                                <ContextErrorMessage error={updatingError} contextErrorMsg={`The Projektart ${projektart.getID()} could not be updated.`} onReload={this.updateProjektart} />\r\n                                :\r\n                                <ContextErrorMessage error={addingError} contextErrorMsg={`The Projektart could not be added.`} onReload={this.addProjektart} />\r\n                        }\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={this.handleClose} color='secondary'>\r\n                            Abbrechen\r\n                        </Button>\r\n                        {\r\n                            // If a Projekt is given, show an update button, else an add button\r\n                            projektart ?\r\n                                <Button disabled={nameValidationFailed || ectsValidationFailed || swsValidationFailed} variant='contained' onClick={this.updateProjektart} color='primary'>\r\n                                    Speichern\r\n                        </Button>\r\n                                :\r\n                                <Button disabled={nameValidationFailed || !nameEdited || ectsValidationFailed || !ectsEdited || swsValidationFailed || !swsEdited}\r\n                                    variant='contained' onClick={this.addProjektart} color='primary'>\r\n                                    Hinzufügen\r\n                        </Button>\r\n                        }\r\n                    </DialogActions>\r\n                </Dialog>\r\n                : null\r\n        );\r\n    }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    closeButton: {\r\n        position: 'absolute',\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n    textfield: {\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(1)\r\n    }\r\n});\r\n\r\n/** PropTypes */\r\nProjektartenForm.propTypes = {\r\n    /** @ignore */\r\n    classes: PropTypes.object.isRequired,\r\n    /** If true, the form is rendered */\r\n    show: PropTypes.bool.isRequired,\r\n    /**  \r\n     * Handler function which is called, when the dialog is closed.\r\n     * Sends the edited or created projektBO's as parameter or null, if cancel was pressed.\r\n     *  \r\n     * Signature: onClose(ProjektBO's projekt);\r\n     */\r\n    onClose: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default withStyles(styles)(ProjektartenForm);","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Button, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions } from '@material-ui/core';\r\nimport { ElectivAPI } from '../../api';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\n\r\nclass ProjektartDelete extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Status initalisieren\r\n    this.state = {\r\n      projektart: props.projektart,\r\n      showSnackbar: false,\r\n    };\r\n  }\r\n\r\n  closeSnackbar = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    this.setState({\r\n      showSnackbar: false\r\n    });\r\n  };\r\n\r\n\r\n  handleClose = () => {\r\n    this.props.onClose(null);\r\n  }\r\n\r\n  deleteProjektart = () => {\r\n    ElectivAPI.getAPI().deleteProjektart(this.state.projektart.id)\r\n      .then(() => {\r\n        this.props.getProjektart();\r\n        this.props.onClose(null);\r\n      }).catch(e => {\r\n        this.setState({\r\n          showSnackbar: true\r\n        })\r\n      })\r\n  }\r\n\r\n  render() {\r\n\r\n    const { show } = this.props;\r\n    const { projektart, showSnackbar } = this.state;\r\n    return (\r\n      <div>\r\n        <Dialog\r\n          open={show}\r\n          onClose={this.handleClose}\r\n          maxWidth='xs'\r\n        >\r\n          <DialogTitle>{\"Sind Sie sich sicher?\"}</DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText>\r\n              Wenn Sie die Projektart <b>\"{projektart.name}\"</b> löschen möchten, drücken Sie auf \"JA\".\r\n            </DialogContentText>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={this.handleClose} color=\"primary\">\r\n              Abbrechen\r\n                  </Button>\r\n            <Button onClick={this.deleteProjektart} color=\"primary\" autoFocus>\r\n              Ja\r\n                  </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n        <Snackbar open={showSnackbar} autoHideDuration={6000} onClose={this.closeSnackbar}>\r\n          <Alert onClose={this.closeSnackbar} severity=\"error\">\r\n            Diese Projektart kann nicht gelöscht werden\r\n                </Alert>\r\n        </Snackbar>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n})\r\n\r\n/** PropTypes */\r\nProjektartDelete.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** The ProjektBO's to be edited */\r\n  projekt: PropTypes.object,\r\n  /** If true, the form is rendered */\r\n  show: PropTypes.bool.isRequired,\r\n  /**  \r\n   * Handler function which is called, when the dialog is closed.\r\n   * Sends the edited or created projektBO's as parameter or null, if cancel was pressed.\r\n   *  \r\n   * Signature: onClose(ProjektBO's projekt);\r\n   */\r\n  onClose: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default withStyles(styles)(ProjektartDelete);","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\r\nimport LoadingProgress from './dialogs/LoadingProgress';\r\n\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport { Typography, IconButton, Grid, Tooltip } from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\n\r\nimport ProjektartenForm from './dialogs/ProjektartenForm';\r\nimport ProjektartDelete from './dialogs/ProjektartDelete';\r\n\r\n/**\r\n * Es wird ein einzelnes Projektarten mit allen notwendigen Informationen angezeigt\r\n * Außerdem lassen sich Projektarteneinträge löschen und bearbeiten\r\n * \r\n * @see See [ProjektartDelete](#projektartdelte)\r\n * @see See [ProjektartForm](#projektartform)\r\n */\r\n\r\n\r\n\r\n\r\nclass ProjektartListeEintrag extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        //initiiere einen leeren state\r\n        this.state = {\r\n            showProjektartForm: false,\r\n            showProjektartDelete: false,\r\n            error: null,\r\n            loadingInProgress: false\r\n        };\r\n    }\r\n\r\n    //ruft die getModule Funktion in den Props auf\r\n    getProjektart = () => {\r\n      this.props.getProjektart();\r\n    }\r\n\r\n    //Wird aufgerufen, wenn das Dialog-Fenster Projektartform geschlossen wird\r\n    projektartFormClosed = (projektart) => {\r\n      if (projektart){\r\n        this.setState({\r\n          projektart: projektart,\r\n          showProjektartForm: false\r\n        });\r\n      }else {\r\n        this.setState({\r\n          showProjektartForm: false\r\n        });\r\n      }\r\n    }\r\n  \r\n    //Öffnet das Dialog-Fenster ProjekartForm, wenn der Button geklickt wurde\r\n    bearbeitenButtonClicked = event => {\r\n      event.stopPropagation();\r\n      this.setState({\r\n        showProjektartForm: true\r\n      });\r\n    }\r\n    \r\n     //Öffnet das Dialog-Fenster ProjektartDelete, wenn der Button geklickt wurde\r\n    projektartDeleteButtonClicked =  event => {\r\n      event.stopPropagation();\r\n      this.setState({\r\n        showProjektartDelete: true\r\n      });\r\n    }\r\n  \r\n    //Wird aufgerufen, wenn das Dialog-Fenster ProjektartDelete geschlossen wird\r\n    projektartDeleteClosed = () => {\r\n        this.setState({\r\n          showProjektartDelete: false\r\n        });\r\n        this.getProjektart();\r\n    }\r\n\r\n    /** Rendert die Komponente */\r\n    render(){\r\n        const {classes, projektart} = this.props;\r\n        const { showProjektartForm, showProjektartDelete,  error, loadingInProgress } = this.state;\r\n\r\n        return(\r\n          <div>\r\n            <ListItem className={classes.root}>\r\n                  <Grid container  alignItems=\"center\" spacing={2}>\r\n                    <Grid item xs={4}>\r\n                        <Typography >{projektart.name}</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                        <Typography >ECTS: {projektart.ects}</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                        <Typography >SWS: {projektart.sws}</Typography>\r\n                    </Grid>\r\n                    <Grid item xs/>\r\n                    <Grid item>\r\n                    <Tooltip title='Bearbeiten' placement=\"bottom\">\r\n                      <IconButton  className={classes.bearbeitenButton} variant='contained' onClick={this.bearbeitenButtonClicked}>\r\n                          <EditIcon />\r\n                      </IconButton>\r\n                    </Tooltip>\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Tooltip title='Löschen' placement=\"bottom\">\r\n                          <IconButton className={classes.projektDeleteButton}  variant=\"contained\"  onClick={this.projektartDeleteButtonClicked}><DeleteIcon /></IconButton>\r\n                      </Tooltip>\r\n                    </Grid>\r\n                    </Grid>\r\n            </ListItem>\r\n            <ListItem>\r\n              <LoadingProgress show={loadingInProgress}/>\r\n              <ContextErrorMessage error={error} contextErrorMsg = {'Diese Projektart konnte nicht geladen werden'} onReload={this.getProjektart} />\r\n            </ListItem>\r\n            <Divider/>\r\n            <ProjektartenForm show={showProjektartForm} projektart={projektart} onClose={this.projektartFormClosed} getProjektart= {this.getProjektart}/>\r\n            <ProjektartDelete show={showProjektartDelete} projektart={projektart} onClose={this.projektartDeleteClosed} getProjektart= {this.getProjektart}/>       \r\n          </div>                        \r\n        );\r\n    }\r\n}\r\nconst styles = theme => ({\r\n      root: {\r\n        width: '100%',\r\n        marginTop: '16px'\r\n      },\r\n    });\r\n\r\n/** PropTypes */\r\nProjektartListeEintrag.propTypes = {\r\n    /** @ignore */\r\n    classes: PropTypes.object.isRequired,\r\n    show: PropTypes.bool.isRequired\r\n  }\r\n  \r\n\r\n\r\nexport default withStyles(styles)(ProjektartListeEintrag);\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, IconButton, InputAdornment, TextField,  Paper , Grid} from '@material-ui/core';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { ElectivAPI } from '../api';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\r\nimport LoadingProgress from './dialogs/LoadingProgress';\r\nimport List from '@material-ui/core/List';\r\n\r\n// import ModulListeEintrag from './ModulListeEintrag';\r\nimport ProjektartenForm from './dialogs/ProjektartenForm';\r\n\r\nimport ProjektartListeEintrag from './ProjektartListeEintrag';\r\n\r\n\r\n\r\n\r\nclass ProjektartListe extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    //gebe einen leeren status\r\n    this.state = {\r\n        projektarten: [],\r\n        filteredProjektarten: [],\r\n        projektartFilter: '',\r\n        showProjektartenForm: false,\r\n        showDeleteForm: false,\r\n        error: null,\r\n        loadingInProgress: false,\r\n    };\r\n  }\r\n\r\n  // Add Button - Oeffnet den Projektarten hinzufuegen Dialog\r\n  addButtonClicked = event => {\r\n    event.stopPropagation();\r\n    this.setState({\r\n      showProjektartenForm: true\r\n    });\r\n  }\r\n\r\n  //Suche-Funktion zum Suchen von Projektarten\r\n  filterFieldValueChange= event => {\r\n    const value = event.target.value.toLowerCase();\r\n    this.setState({\r\n        filteredProjektarten: this.state.projektarten.filter(projektart => {\r\n            let nameContainsValue = projektart.getname().toLowerCase().includes(value);\r\n            return nameContainsValue;\r\n        }),\r\n        projektartFilter: value\r\n    });\r\n}\r\n\r\n//Suche leeren\r\nclearFilterFieldButtonClicked = () => {\r\n    this.setState({\r\n        filteredProjektarten: [...this.state.projektarten],\r\n        projektartFilter: ''\r\n    });\r\n}\r\n\r\n//wird aufgerufen, wenn Dialog Fenster geschloßen wird\r\nprojektartFormClosed = projektart => {\r\n    this.getProjektart();\r\n    if (projektart) {\r\n      const newProjektartList = [...this.state.projektarten, projektart];\r\n      this.setState({\r\n        projektarten: newProjektartList,\r\n        filteredProjektarten: [...newProjektartList],\r\n        showProjektartenForm: false\r\n      });\r\n    } else {\r\n      this.setState({\r\n        showProjektartenForm: false\r\n      });\r\n    }\r\n  }\r\n\r\n  // API Anbindung um alle Projektarten vom Backend zu bekommen \r\n  getProjektart = () => {\r\n    ElectivAPI.getAPI().getProjektart()\r\n    .then(projektartBOs =>\r\n        this.setState({\r\n            projektarten: projektartBOs,\r\n            filteredProjektarten: [...projektartBOs],\r\n            error: null,\r\n            loadingInProgress: false,\r\n        })).catch(e =>\r\n            this.setState({\r\n                projektarten: [],\r\n                filteredProjektarten: [],\r\n                error: e,\r\n                loadingInProgress: false,\r\n            }));\r\n    this.setState({\r\n        error: null,\r\n        loadingInProgress: true,\r\n    });\r\n}\r\n\r\n\r\n\r\n  // Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\r\n  componentDidMount() {\r\n      this.getProjektart();\r\n  }\r\n\r\n\r\n\r\n  /** Renders the component */\r\n  render() {\r\n    const { classes } = this.props;\r\n    const {  loadingInProgress, error, projektartFilter, filteredProjektarten, showProjektartenForm} = this.state;\r\n\r\n    return (\r\n      <div className={classes.root}>\r\n        <Grid container spacing={2} alignItems=\"center\">\r\n            <Grid item >\r\n            <TextField\r\n                className={classes.filter}\r\n                type='text'\r\n                label='Projektart suchen'\r\n                value={projektartFilter}\r\n                onChange={this.filterFieldValueChange}\r\n                InputProps={{\r\n                    endAdornment: <InputAdornment position='end'>\r\n                    <IconButton onClick={this.clearFilterFieldButtonClicked}>\r\n                        <ClearIcon fontSize=\"small\"/>\r\n                    </IconButton>\r\n                    </InputAdornment>,\r\n                }}\r\n            />\r\n            </Grid>\r\n            <Grid item xs/>\r\n            <Grid item>\r\n                <Tooltip title='Projektart anlegen' placement=\"left\">\r\n                    <Fab size=\"medium\"  className={classes.addButton} color=\"primary\" aria-label=\"add\" onClick={this.addButtonClicked}>\r\n                        <AddIcon />\r\n                    </Fab>\r\n                </Tooltip>\r\n            </Grid>\r\n        </Grid>\r\n        <Paper>\r\n            <List className={classes.root} dense>\r\n                {\r\n                filteredProjektarten.map(projektart => \r\n                    <ProjektartListeEintrag key={projektart.getID()} projektart = {projektart} show={this.props.show} getProjektart={this.getProjektart}/>)\r\n                }\r\n            </List>\r\n          <LoadingProgress show={loadingInProgress} />\r\n          <ContextErrorMessage error={error} contextErrorMsg={`Projektartliste konnte nicht geladen werden.`} onReload={this.getProjektart} />\r\n        </Paper>\r\n        <ProjektartenForm show={showProjektartenForm} onClose={this.projektartFormClosed} getProjektart = {this.getProjektart}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n      width: '100%',\r\n      marginTop: theme.spacing(2),\r\n      paddingTop: '4px'\r\n  },\r\n  addButton: {\r\n      marginRight: theme.spacing(2)\r\n  },\r\n  filter: {\r\n      marginLeft: theme.spacing(2)\r\n  }\r\n});\r\n\r\n/** PropTypes */\r\nProjektartListe.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** @ignore */\r\n  location: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default withRouter(withStyles(styles)(ProjektartListe));\r\n\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n    withStyles, Button, IconButton, Dialog, DialogContent, DialogContentText,\r\n    DialogTitle, DialogActions, TextField\r\n} from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ContextErrorMessage from './ContextErrorMessage';\r\nimport LoadingProgress from './LoadingProgress';\r\n\r\nimport { ElectivAPI } from '../../api';\r\n\r\n\r\n/**\r\n * Es wird ein Dialog mit einem Formular dargestellt, mit welchem man Studenten bearbeiten kann\r\n *\r\n * @see See Matieral-UIs [Dialog] (https://material-ui.com/components/dialogs)\r\n *\r\n */\r\nclass StudentForm extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        //initiiere einen leeren state\r\n        this.state = {\r\n            name: '',\r\n            nameValidationFailed: false,\r\n            nameEdited: false,\r\n\r\n            mat_nr: null,\r\n            mat_nrValidationFailed: false,\r\n            mat_nrEdited: false,\r\n\r\n            addingError: null,\r\n            addingInProgress: false,\r\n\r\n            updatingError: null,\r\n            updatingInProgress: false\r\n        };\r\n        this.baseState = this.state;\r\n    }\r\n\r\n    // API Anbindung um den Studenten upzudaten\r\n    updateUser = () => {\r\n        let user = this.props.user;\r\n        user.name = this.state.name\r\n        user.mat_nr = this.state.mat_nr\r\n        ElectivAPI.getAPI().updateStudent(user.id, this.state.name, this.state.mat_nr).then(user => {\r\n\r\n            this.setState(this.baseState);\r\n            this.props.onClose(user); //Aufrufen parent in backend\r\n        }).catch(e =>\r\n            this.setState({\r\n                updatingInProgress: false,\r\n                updatingError: e\r\n            })\r\n        );\r\n        // Ladeanimation einblenden\r\n        this.setState({\r\n            updatingInProgress: true,\r\n            updatingError: null\r\n        });\r\n    }\r\n\r\n    // Validierung der Textfeldaenderungen\r\n    textFieldValueChange = (event) => {\r\n        const value = event.target.value;\r\n\r\n        let error = false;\r\n        if (value.trim().length === 0) {\r\n            error = true;\r\n        }\r\n        this.setStateValueChange(event, error);\r\n    }\r\n\r\n    //Setzen der Werte aus der Validierung\r\n    setStateValueChange(event, error) {\r\n        this.setState({\r\n            [event.target.id]: event.target.value,\r\n            [event.target.id + 'ValidationFailed']: error,\r\n            [event.target.id + 'Edited']: true\r\n        });\r\n    }\r\n\r\n    // Validierung der Textfeldaenderungen nur numerische Werte\r\n    numberValueChange = (event) => {\r\n        const value = event.target.value;\r\n        const re = /^[0-9]{1,10}$/;\r\n\r\n        let error = false;\r\n        if (value.trim().length === 0) {\r\n            error = true;\r\n        }\r\n        if (re.test(event.target.value) === false) {\r\n            error = true;\r\n        }\r\n        this.setStateValueChange(event, error);\r\n    }\r\n\r\n    //Infos des zu bearbeitenden Studenten laden\r\n    getInfos = () => {\r\n        if (this.props.user) {\r\n            let name = this.props.user.name;\r\n            let mat_nr = this.props.user.mat_nr;\r\n            this.setState({\r\n                name: name,\r\n                mat_nr: mat_nr,\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    //Setzen des Status, bei schließen des Dialogs\r\n    handleClose = () => {\r\n        this.setState(this.baseState);\r\n        this.props.onClose(null);\r\n    }\r\n\r\n    /** Rendert die Komponente */\r\n    render() {\r\n        const { classes, show, user } = this.props;\r\n        const {\r\n            name,\r\n            nameValidationFailed,\r\n            mat_nr,\r\n            mat_nrValidationFailed,\r\n            addingInProgress,\r\n            updatingInProgress,\r\n            updatingError,\r\n        } = this.state;\r\n\r\n        let title = `User \"${user.name}\" bearbeiten`\r\n        let header = 'Neue Userdaten einfügen';\r\n\r\n        return (\r\n            show ?\r\n                <Dialog open={show} onEnter={this.getInfos} onClose={this.handleClose} maxWidth='xs' fullWidth>\r\n                    <DialogTitle className={classes.dialogtitle}>{title}\r\n                        <IconButton className={classes.closeButton} onClick={this.handleClose}>\r\n                            <CloseIcon />\r\n                        </IconButton>\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText>\r\n                            {header}\r\n                        </DialogContentText>\r\n\r\n                        <form className={classes.root} noValidate autoComplete='off'>\r\n\r\n                            <TextField className={classes.textfield} autoFocus type='text' required fullWidth\r\n                                margin='small' id='name' label='Name' variant=\"outlined\" value={name}\r\n                                onChange={this.textFieldValueChange} error={nameValidationFailed} />\r\n\r\n                            <TextField className={classes.textfield} type='text' required fullWidth margin='small'\r\n                                id='mat_nr' label='Matrikelnummer' variant=\"outlined\" value={mat_nr}\r\n                                onChange={this.numberValueChange} error={mat_nrValidationFailed} />\r\n                        </form>\r\n                        <LoadingProgress show={addingInProgress || updatingInProgress} />\r\n                        {\r\n\r\n                            <ContextErrorMessage error={updatingError}\r\n                                contextErrorMsg={`The User ${user.getID()} could not be updated.`}\r\n                                onReload={this.updateUser} />\r\n\r\n                        }\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={this.handleClose} color='secondary'>\r\n                            Abbrechen\r\n                        </Button>\r\n                        {\r\n                            // If a Projekt is given, show an update button, else an add button\r\n                            <Button disabled={nameValidationFailed || mat_nrValidationFailed} variant='contained'\r\n                                onClick={this.updateUser} color='primary'>\r\n                                Speichern\r\n                            </Button>\r\n\r\n                        }\r\n                    </DialogActions>\r\n                </Dialog>\r\n                : null\r\n        );\r\n    }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    closeButton: {\r\n        position: 'absolute',\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n    textfield: {\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(1)\r\n    }\r\n});\r\n\r\n/** PropTypes */\r\nStudentForm.propTypes = {\r\n    /** @ignore */\r\n    classes: PropTypes.object.isRequired,\r\n    /** If true, the form is rendered */\r\n    show: PropTypes.bool.isRequired,\r\n    /**\r\n     * Handler function which is called, when the dialog is closed.\r\n     * Sends the edited or created projektBO's as parameter or null, if cancel was pressed.\r\n     *\r\n     * Signature: onClose(ProjektBO's projekt);\r\n     */\r\n    onClose: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default withStyles(styles)(StudentForm);","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\r\nimport LoadingProgress from './dialogs/LoadingProgress';\r\n\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport {Typography, IconButton, Grid, Tooltip} from '@material-ui/core';\r\n\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\n\r\nimport UserForm from './dialogs/StudentForm';\r\n\r\n\r\nclass StudentListeEintrag extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showUserForm: false,\r\n            error: null,\r\n            loadingInProgress: false\r\n        };\r\n    }\r\n\r\n    getUser = () => {\r\n        this.props.getUser();\r\n    }\r\n\r\n\r\n    bearbeitenButtonClicked = event => {\r\n        event.stopPropagation();\r\n        this.setState({\r\n            showUserForm: true\r\n        });\r\n    }\r\n\r\n    userFormClosed = (user) => {\r\n        if (user) {\r\n            this.setState({\r\n                user: user,\r\n                showUserForm: false\r\n            });\r\n        } else {\r\n            this.setState({\r\n                showUserForm: false\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const {classes, user} = this.props;\r\n        const {showUserForm, error, loadingInProgress} = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <ListItem className={classes.root}>\r\n                    <Grid container alignItems=\"center\" spacing={2}>\r\n                        <Grid item>\r\n                            <Typography>{user.mat_nr}</Typography>\r\n                        </Grid>\r\n                        <Grid item xs={2}>\r\n                            <Typography>{user.name}</Typography>\r\n                        </Grid>\r\n                        <Grid item xs/>\r\n                        <Grid item>\r\n                        </Grid>\r\n                        <Tooltip title='Bearbeiten' placement=\"bottom\">\r\n                            <IconButton className={classes.bearbeitenButton} variant='contained'\r\n                                        onClick={this.bearbeitenButtonClicked}>\r\n                                <EditIcon/>\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </Grid>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <LoadingProgress show={loadingInProgress}/>\r\n                    <ContextErrorMessage error={error} contextErrorMsg={'Student konnte nicht geladen werden'}\r\n                                         onReload={this.getUser}/>\r\n                </ListItem>\r\n                <Divider/>\r\n                <UserForm show={showUserForm} user={user} onClose={this.userFormClosed} getModule={this.getUser}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n        marginTop: '16px'\r\n    },\r\n});\r\n\r\n/** PropTypes */\r\nStudentListeEintrag.propTypes = {\r\n    /** @ignore */\r\n    classes: PropTypes.object.isRequired,\r\n    show: PropTypes.bool.isRequired\r\n}\r\n\r\n\r\nexport default withStyles(styles)(StudentListeEintrag);\r\n\r\n\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {ElectivAPI} from '../api';\r\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\r\nimport {withStyles, IconButton, InputAdornment, TextField, Paper, Grid} from '@material-ui/core';\r\nimport LoadingProgress from './dialogs/LoadingProgress';\r\nimport List from '@material-ui/core/List';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\n\r\nimport StudentListeEintrag from './StudentListeEintrag';\r\n\r\nclass StudentListe extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        //gebe einen leeren status\r\n        this.state = {\r\n            user: [],\r\n            filteredUser: [],\r\n            userFilter: '',\r\n            showDeleteForm: false,\r\n            error: null,\r\n            loadingInProgress: false,\r\n        };\r\n    }\r\n\r\n\r\n    // API Anbindung um alle Module vom Backend zu bekommen\r\n    getUser = () => {\r\n        ElectivAPI.getAPI().getStudenten()\r\n            .then(userBOs =>\r\n                this.setState({\r\n                    user: userBOs,\r\n                    filteredUser: [...userBOs],\r\n                    error: null,\r\n                    loadingInProgress: false,\r\n                })).catch(e =>\r\n            this.setState({\r\n                user: [],\r\n                filteredUser: [],\r\n                error: e,\r\n                loadingInProgress: false,\r\n            }));\r\n        this.setState({\r\n            error: null,\r\n            loadingInProgress: true,\r\n        });\r\n    }\r\n\r\n    //Suche leeren\r\n    clearFilterFieldButtonClicked = () => {\r\n        this.setState({\r\n            filteredSemester: [...this.state.semester],\r\n            semesterFilter: ''\r\n        });\r\n    }\r\n\r\n    //Suche-Funktion zum Suchen von Semester\r\n    filterFieldValueChange = event => {\r\n        const value = event.target.value.toLowerCase();\r\n        this.setState({\r\n            filteredUser: this.state.user.filter(user => {\r\n                return user.getname().toLowerCase().includes(value);\r\n            }),\r\n            userFilter: value\r\n        });\r\n    }\r\n\r\n\r\n    // Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\r\n    componentDidMount() {\r\n        this.getUser();\r\n    }\r\n\r\n\r\n    /** Renders the component */\r\n    render() {\r\n        const {classes} = this.props;\r\n        const {loadingInProgress, error, filteredUser, userFilter} = this.state;\r\n\r\n        return (\r\n            <div className={classes.root}>\r\n                <Grid container spacing={2} alignItems=\"center\">\r\n\r\n                    <Grid item>\r\n                        <TextField\r\n                            className={classes.filter}\r\n                            type='text'\r\n                            label='Student suchen'\r\n                            value={userFilter}\r\n                            onChange={this.filterFieldValueChange}\r\n                            InputProps={{\r\n                                endAdornment: <InputAdornment position='end'>\r\n                                    <IconButton onClick={this.clearFilterFieldButtonClicked}>\r\n                                        <ClearIcon fontSize=\"small\"/>\r\n                                    </IconButton>\r\n                                </InputAdornment>,\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Paper>\r\n                    <List className={classes.root} dense>\r\n                        {\r\n                            filteredUser.map(user =>\r\n                                <StudentListeEintrag key={user.getID()} user={user} show={this.props.show}\r\n                                                     getUser={this.getUser}/>)\r\n                        }\r\n                    </List>\r\n                    <LoadingProgress show={loadingInProgress}/>\r\n                    <ContextErrorMessage error={error} contextErrorMsg={`Studentliste konnte nicht geladen werden`} onReload={this.getUser}/>\r\n                </Paper>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(2),\r\n        paddingTop: '4px'\r\n    },\r\n    addButton: {\r\n        marginRight: theme.spacing(2)\r\n    },\r\n    filter: {\r\n        marginLeft: theme.spacing(2)\r\n    }\r\n});\r\n\r\n/** PropTypes */\r\nStudentListe.propTypes = {\r\n    /** @ignore */\r\n    classes: PropTypes.object.isRequired,\r\n    /** @ignore */\r\n    location: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default withRouter(withStyles(styles)(StudentListe));\r\n\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n    withStyles, Button, IconButton, Dialog, DialogContent, DialogContentText,\r\n    DialogTitle, DialogActions, TextField\r\n} from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ContextErrorMessage from './ContextErrorMessage';\r\nimport LoadingProgress from './LoadingProgress';\r\n\r\nimport { ElectivAPI } from '../../api';\r\n\r\n/**\r\n * Es wird ein Dialog mit einem Formular dargestellt, mit welchem man User bearbeiten kann\r\n *\r\n * @see See Matieral-UIs [Dialog] (https://material-ui.com/components/dialogs)\r\n *\r\n */\r\nclass UserForm extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        //initiiere einen leeren state\r\n        this.state = {\r\n            name: '',\r\n            nameValidationFailed: false,\r\n            nameEdited: false,\r\n            email: null,\r\n            emailValidationFailed: false,\r\n            emailEdited: false,\r\n            addingError: null,\r\n            addingInProgress: false,\r\n            updatingError: null,\r\n            updatingInProgress: false\r\n        };\r\n        this.baseState = this.state;\r\n    }\r\n\r\n    // API Anbindung um den User upzudaten\r\n    updateUser = () => {\r\n        let user = this.props.user;\r\n        user.name = this.state.name\r\n        user.email = this.state.email\r\n        ElectivAPI.getAPI().updateUser(user.id, this.state.name, this.state.email).then(user => {\r\n            this.setState(this.baseState);\r\n            this.props.onClose(user); //Aufrufen parent in backend\r\n        }).catch(e =>\r\n            this.setState({\r\n                updatingInProgress: false,\r\n                updatingError: e\r\n            })\r\n        );\r\n        // Ladeanimation einblenden\r\n        this.setState({\r\n            updatingInProgress: true,\r\n            updatingError: null\r\n        });\r\n    }\r\n\r\n    // Validierung der Textfeldaenderungen\r\n    textFieldValueChange = (event) => {\r\n        const value = event.target.value;\r\n\r\n        let error = false;\r\n        if (value.trim().length === 0) {\r\n            error = true;\r\n        }\r\n        this.setState({\r\n            [event.target.id]: event.target.value,\r\n            [event.target.id + 'ValidationFailed']: error,\r\n            [event.target.id + 'Edited']: true\r\n        });\r\n    }\r\n\r\n    //Infos des zu bearbeitenden Studenten laden\r\n    getInfos = () => {\r\n        if (this.props.user) {\r\n            let name = this.props.user.name;\r\n            let email = this.props.user.email;\r\n            this.setState({\r\n                name: name,\r\n                email: email,\r\n            })\r\n        }\r\n    }\r\n\r\n    //Setzen des Status, bei schließen des Dialogs\r\n    handleClose = () => {\r\n        this.setState(this.baseState);\r\n        this.props.onClose(null);\r\n    }\r\n\r\n\r\n    render() {\r\n        const { classes, show, user } = this.props;\r\n        const {\r\n            name,\r\n            nameValidationFailed,\r\n            email,\r\n            emailValidationFailed,\r\n            addingInProgress,\r\n            updatingInProgress,\r\n            updatingError,\r\n        } = this.state;\r\n\r\n        let title = `User \"${user.name}\" bearbeiten`\r\n        let header = 'Neue Userdaten einfügen';\r\n\r\n        return (\r\n            show ?\r\n                <Dialog open={show} onEnter={this.getInfos} onClose={this.handleClose} maxWidth='xs' fullWidth>\r\n                    <DialogTitle className={classes.dialogtitle}>{title}\r\n                        <IconButton className={classes.closeButton} onClick={this.handleClose}>\r\n                            <CloseIcon />\r\n                        </IconButton>\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText>\r\n                            {header}\r\n                        </DialogContentText>\r\n\r\n                        <form className={classes.root} noValidate autoComplete='off'>\r\n\r\n                            <TextField className={classes.textfield} autoFocus type='text' required fullWidth\r\n                                margin='small' id='name' label='Name' variant=\"outlined\" value={name}\r\n                                onChange={this.textFieldValueChange} error={nameValidationFailed} />\r\n\r\n                            <TextField className={classes.textfield} type='text' required fullWidth margin='small'\r\n                                id='email' label='email' variant=\"outlined\" value={email}\r\n                                onChange={this.textFieldValueChange} error={emailValidationFailed} />\r\n                        </form>\r\n                        <LoadingProgress show={addingInProgress || updatingInProgress} />\r\n                        {\r\n\r\n                        <ContextErrorMessage error={updatingError}\r\n                        contextErrorMsg={`The User ${user.getID()} could not be updated.`}\r\n                        onReload={this.updateUser} />\r\n\r\n                        }\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={this.handleClose} color='secondary'>\r\n                            Abbrechen\r\n                        </Button>\r\n                        {\r\n                            // If a Projekt is given, show an update button, else an add button\r\n                            <Button disabled={nameValidationFailed || emailValidationFailed} variant='contained'\r\n                                onClick={this.updateUser} color='primary'>\r\n                                Speichern\r\n                            </Button>\r\n\r\n                        }\r\n                    </DialogActions>\r\n                </Dialog>\r\n                : null\r\n        );\r\n    }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    closeButton: {\r\n        position: 'absolute',\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n    textfield: {\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(1)\r\n    }\r\n});\r\n\r\n/** PropTypes */\r\nUserForm.propTypes = {\r\n    /** @ignore */\r\n    classes: PropTypes.object.isRequired,\r\n    /** If true, the form is rendered */\r\n    show: PropTypes.bool.isRequired,\r\n    /**\r\n     * Handler function which is called, when the dialog is closed.\r\n     * Sends the edited or created projektBO's as parameter or null, if cancel was pressed.\r\n     *\r\n     * Signature: onClose(ProjektBO's projekt);\r\n     */\r\n    onClose: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default withStyles(styles)(UserForm);","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\r\nimport LoadingProgress from './dialogs/LoadingProgress';\r\n\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport { Typography, IconButton, Grid, Tooltip } from '@material-ui/core';\r\n\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\n\r\nimport UserForm from './dialogs/UserForm';\r\n\r\nclass UserListeEintrag extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showUserForm: false,\r\n            error: null,\r\n            loadingInProgress: false\r\n        };\r\n    }\r\n\r\n    getUser = () => {\r\n        this.props.getUser();\r\n    }\r\n\r\n\r\n    bearbeitenButtonClicked = event => {\r\n        event.stopPropagation();\r\n        this.setState({\r\n            showUserForm: true\r\n        });\r\n    }\r\n\r\n    userFormClosed = (user) => {\r\n        if (user) {\r\n            this.setState({\r\n                user: user,\r\n                showUserForm: false\r\n            });\r\n        } else {\r\n            this.setState({\r\n                showUserForm: false\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const { classes, user } = this.props;\r\n        const { showUserForm, error, loadingInProgress } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <ListItem className={classes.root}>\r\n                    <Grid container alignItems=\"center\" spacing={2}>\r\n                        <Grid item xs={2}>\r\n                            <Typography>{user.rolle}</Typography>\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <Typography>{user.name}</Typography>\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <Typography>{user.email}</Typography>\r\n                        </Grid>\r\n                        <Grid item xs />\r\n                        <Grid item>\r\n                        </Grid>\r\n                        <Tooltip title='Bearbeiten' placement=\"bottom\">\r\n                            <IconButton className={classes.bearbeitenButton} variant='contained'\r\n                                onClick={this.bearbeitenButtonClicked}>\r\n                                <EditIcon />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </Grid>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <LoadingProgress show={loadingInProgress} />\r\n                    <ContextErrorMessage error={error} contextErrorMsg={'Der User konnte nicht geladen werden'}\r\n                        onReload={this.getUser} />\r\n                </ListItem>\r\n                <Divider />\r\n                <UserForm show={showUserForm} user={user} onClose={this.userFormClosed} getModule={this.getUser} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n        marginTop: '16px'\r\n    },\r\n});\r\n\r\n/** PropTypes */\r\nUserListeEintrag.propTypes = {\r\n    /** @ignore */\r\n    classes: PropTypes.object.isRequired,\r\n    show: PropTypes.bool.isRequired\r\n}\r\n\r\n\r\nexport default withStyles(styles)(UserListeEintrag);\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { ElectivAPI } from '../api';\r\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\r\nimport { withStyles, IconButton, InputAdornment, TextField, Paper, Grid } from '@material-ui/core';\r\nimport LoadingProgress from './dialogs/LoadingProgress';\r\nimport List from '@material-ui/core/List';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\n\r\nimport UserListeEintrag from './UserListeEintrag';\r\n\r\nclass UserListe extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        //gebe einen leeren status\r\n        this.state = {\r\n            user: [],\r\n            filteredUser: [],\r\n            userFilter: '',\r\n            showDeleteForm: false,\r\n            error: null,\r\n            loadingInProgress: false,\r\n        };\r\n    }\r\n\r\n\r\n    // API Anbindung um alle Module vom Backend zu bekommen\r\n    getUser = () => {\r\n        ElectivAPI.getAPI().getPersons()\r\n            .then(userBOs =>\r\n                this.setState({\r\n                    user: userBOs,\r\n                    filteredUser: [...userBOs],\r\n                    error: null,\r\n                    loadingInProgress: false,\r\n                })).catch(e =>\r\n                    this.setState({\r\n                        user: [],\r\n                        filteredUser: [],\r\n                        error: e,\r\n                        loadingInProgress: false,\r\n                    }));\r\n        this.setState({\r\n            error: null,\r\n            loadingInProgress: true,\r\n        });\r\n    }\r\n\r\n    //Suche leeren\r\n    clearFilterFieldButtonClicked = () => {\r\n        this.setState({\r\n            filteredSemester: [...this.state.semester],\r\n            semesterFilter: ''\r\n        });\r\n    }\r\n\r\n    //Suche-Funktion zum Suchen von Semester\r\n    filterFieldValueChange = event => {\r\n        const value = event.target.value.toLowerCase();\r\n        this.setState({\r\n            filteredUser: this.state.user.filter(user => {\r\n                return user.getname().toLowerCase().includes(value);\r\n            }),\r\n            userFilter: value\r\n        });\r\n    }\r\n\r\n\r\n    // Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\r\n    componentDidMount() {\r\n        this.getUser();\r\n    }\r\n\r\n\r\n    /** Renders the component */\r\n    render() {\r\n        const { classes } = this.props;\r\n        const { loadingInProgress, error, filteredUser, userFilter } = this.state;\r\n\r\n        return (\r\n            <div className={classes.root}>\r\n                <Grid container spacing={2} alignItems=\"center\">\r\n\r\n                    <Grid item>\r\n                        <TextField\r\n                            className={classes.filter}\r\n                            type='text'\r\n                            label='User suchen'\r\n                            value={userFilter}\r\n                            onChange={this.filterFieldValueChange}\r\n                            InputProps={{\r\n                                endAdornment: <InputAdornment position='end'>\r\n                                    <IconButton onClick={this.clearFilterFieldButtonClicked}>\r\n                                        <ClearIcon fontSize=\"small\" />\r\n                                    </IconButton>\r\n                                </InputAdornment>,\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Paper>\r\n                    <List className={classes.root} dense>\r\n                        {\r\n                            filteredUser.map(user =>\r\n                                <UserListeEintrag key={user.getID()} user={user} show={this.props.show}\r\n                                    getUser={this.getUser} />)\r\n                        }\r\n                    </List>\r\n                    <LoadingProgress show={loadingInProgress} />\r\n                    <ContextErrorMessage error={error} contextErrorMsg={`Userliste konnte nicht geladen werden.`} onReload={this.getUser} />\r\n                </Paper>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(2),\r\n        paddingTop: '4px'\r\n    },\r\n    addButton: {\r\n        marginRight: theme.spacing(2)\r\n    },\r\n    filter: {\r\n        marginLeft: theme.spacing(2)\r\n    }\r\n});\r\n\r\n/** PropTypes */\r\nUserListe.propTypes = {\r\n    /** @ignore */\r\n    classes: PropTypes.object.isRequired,\r\n    /** @ignore */\r\n    location: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default withRouter(withStyles(styles)(UserListe));\r\n\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\r\nimport { Container, ThemeProvider, CssBaseline } from '@material-ui/core';\r\nimport firebase from 'firebase/app'; //Firebase module\r\nimport 'firebase/auth'; //Firebase module\r\nimport Header from './components/layout/Header';\r\nimport ProjektListe from './components/ProjektListe';\r\nimport ProjektDozentListe from './components/ProjektDozentListe';\r\n  \r\n// import Electivs from '/components/Electivs';\r\nimport About from './components/pages/About';\r\nimport Theme from './Theme';\r\nimport SignIn from './components/pages/SignIn';\r\nimport MeineProjekte from './components/MeineProjekte';\r\nimport Semesterbericht from './components/Semesterbericht';\r\nimport ProjektPflegen from './components/ProjektPflegen';\r\nimport Notenliste from './components/Notenliste';\r\nimport LoadingProgress from './components/dialogs/LoadingProgress';\r\nimport ContextErrorMessage from './components/dialogs/ContextErrorMessage';\r\nimport ElectivAPI from './api/ElectivAPI';\r\nimport firebaseConfig from './firebaseconfig';\r\nimport ProjektverwaltungListe from './components/ProjektverwaltungListe';\r\nimport Administration from './components/Administration';\r\nimport ModulListe from './components/ModulListe';\r\nimport SemesterListe from './components/SemesterListe';\r\nimport ProjektartListe from './components/ProjektartListe';\r\nimport StudentListe from './components/StudentListe';\r\nimport UserListe from './components/UserListe';\r\n\r\n\r\n/*\r\nMain page of the electivApp. First firebase to verify users. Then routing to the pages via react-router-dom\r\n*/\r\n\r\nclass App extends React.Component {\r\n  // initialize firebase\r\n  constructor(props){\r\n    super(props);\r\n\r\n    // initialize empty values\r\n    this.state = {\r\n      currentUser: null,\r\n      appError: null,\r\n      authError: null,\r\n      authLoading: false,\r\n      currentStudent: null,\r\n      currentPerson: null\r\n    };\r\n  }\r\n  // creating error boundry. receiving all errors below the component tree\r\n\r\n  static getDerivedStateFromError(error) {\r\n    // update state for fallback UI\r\n    return { appError: error };\r\n  }\r\n  \r\n  // handles all user login states with firebase\r\n  handleAuthStateChange = user => {\r\n    if (user) {\r\n      this.setState({\r\n        authLoading: true, \r\n      });\r\n      // user signed in\r\n      user.getIdToken().then(token => {\r\n        // Token gets storend into cookie\r\n        // Server (backend) can then read out that cookie\r\n        // only token information, safety risk!\r\n        document.cookie = `token=${token};path=/`;\r\n        // set user when token arrives\r\n        this.setState({\r\n          currentUser: user,\r\n          authError: null,\r\n          authLoading: false\r\n        })}).then(() => {\r\n        this.getUserByGoogleID()\r\n      }).catch(e => {\r\n        this.setState({\r\n          authError: e,\r\n          authLoading: false\r\n        });\r\n      });\r\n    } else {\r\n      // user loggend out -> clear id token\r\n      document.cookie = 'token=;path=/';\r\n\r\n      // Set the logged out user to null\r\n      this.setState({\r\n        currentUser: null,\r\n        authLoading: false\r\n      });\r\n    }\r\n  }\r\n\r\n  // handles the sign in component with firebase.auth()\r\n  handleSignIn = () => {\r\n    this.setState({\r\n      authLoading: true\r\n    });\r\n    const provider = new firebase.auth.GoogleAuthProvider();\r\n    firebase.auth().signInWithRedirect(provider);\r\n  }\r\n\r\n  //aktuell eingeloggten Student vom Backend abfragen\r\n  getUserByGoogleID = () => {\r\n    let rolle = this.getCookie(\"rolle\")\r\n\r\n    if (rolle === \"Student\") {\r\n      ElectivAPI.getAPI().getStudentByGoogleID(this.state.currentUser.uid)\r\n        .then(studentBO =>\r\n            this.setState({\r\n                currentStudent: studentBO,\r\n                error: null,\r\n                loadingInProgress: false,\r\n            })\r\n            ).catch(e =>\r\n                this.setState({\r\n                    currentStudent: null,\r\n                    error: e,\r\n                    loadingInProgress: false,\r\n                }));\r\n        this.setState({\r\n            error: null,\r\n            loadingInProgress: true\r\n        });\r\n    }\r\n    else{\r\n      ElectivAPI.getAPI().getPersonByGoogleID(this.state.currentUser.uid)\r\n        .then(personBO =>\r\n            this.setState({\r\n                currentPerson: personBO,\r\n                error: null,\r\n                loadingInProgress: false,\r\n            })\r\n            ).catch(e =>\r\n                this.setState({\r\n                    currentPerson: null,\r\n                    error: e,\r\n                    loadingInProgress: false,\r\n                }));\r\n        this.setState({\r\n            error: null,\r\n            loadingInProgress: true\r\n        });\r\n    }\r\n    setTimeout(()=>{\r\n      console.log(this.state);\r\n    },1000);\r\n    }\r\n    \r\n    //openbook getcookie von Galileo\r\n    getCookie = (name) => {\r\n      var i=0;  //Suchposition im Cookie\r\n      var suche = name + \"=\";\r\n      while (i<document.cookie.length) {\r\n         if (document.cookie.substring(i, i + suche.length) === suche) {\r\n            var ende = document.cookie.indexOf(\";\", i + suche.length);\r\n            ende = (ende > -1) ? ende : document.cookie.length;\r\n            var cook = document.cookie.substring(i + suche.length, ende);\r\n            return unescape(cook);\r\n         }\r\n         i++;\r\n      }\r\n      return \"\";\r\n   }\r\n\r\n\r\n  // lifecycle method\r\n  componentDidMount() {\r\n    firebase.initializeApp(firebaseConfig);\r\n    firebase.auth().languageCode = 'en';\r\n    firebase.auth().onAuthStateChanged(this.handleAuthStateChange);\r\n  }\r\n\r\n  render() {\r\n    const { currentUser, appError, authError, authLoading, currentStudent, currentPerson } = this.state;\r\n\r\n    return (\r\n      <ThemeProvider theme={Theme}>\r\n        {/* Global CSS reset and browser normalization. CssBaseline kickstarts an elegant, consistent, and simple baseline to build upon. */}\r\n        <CssBaseline />\r\n        <Router basename={process.env.PUBLIC_URL}>\r\n          <Container maxWidth='md'>\r\n            <Header user={currentUser} currentStudent={currentStudent} currentPerson= {currentPerson}/> \r\n          \r\n            {\r\n              // is the user signed in?\r\n              currentUser ?\r\n                <>\r\n                  <Redirect from='/' to='projekte' />\r\n                  <Route path='/projekte' component ={ProjektListe}>\r\n                    <ProjektListe currentStudent={currentStudent} currentPerson= {currentPerson}/>\r\n                  </Route>\r\n                  <Route path='/about' component={About} />\r\n\r\n                  <Route path='/projekteDozent' component={ProjektDozentListe}>\r\n                    <ProjektDozentListe currentStudent={currentStudent} currentPerson= {currentPerson}/>\r\n                  </Route>\r\n\r\n                  <Route path='/projektverwaltung' component={ProjektverwaltungListe}>\r\n                    <ProjektverwaltungListe currentStudent={currentStudent} currentPerson= {currentPerson}/>\r\n                  </Route>\r\n                  <Route path='/projektpflegen' component={ProjektPflegen}>\r\n                    <ProjektPflegen currentStudent={currentStudent} currentPerson= {currentPerson}/>\r\n                  </Route>\r\n                  \r\n                  <Route path='/meineprojekte' component={MeineProjekte}>\r\n                    <MeineProjekte currentStudent={currentStudent} />\r\n                  </Route>\r\n\r\n                  <Route path='/semesterbericht' component={Semesterbericht}>\r\n                    <Semesterbericht currentStudent={currentStudent}/>\r\n                  </Route>\r\n                  \r\n                  <Route path='/notenliste' component={Notenliste}>\r\n                    <Notenliste currentStudent={currentStudent} currentPerson= {currentPerson}/>\r\n                  </Route>\r\n\r\n                  <Route path='/administration' component={Administration}>\r\n                    <Administration currentPerson= {currentPerson}/>\r\n                  </Route>\r\n\r\n                  <Route path='/administration/semester' component={SemesterListe}>\r\n                    <SemesterListe currentPerson= {currentPerson}/>\r\n                  </Route>\r\n\r\n                  <Route path='/administration/module' component={ModulListe}>\r\n                    <ModulListe currentPerson= {currentPerson}/>\r\n                  </Route>\r\n\r\n                  <Route path='/administration/projektarten' component={ProjektartListe}>\r\n                    <ProjektartListe currentPerson= {currentPerson}/>\r\n                  </Route>\r\n\r\n                  <Route path='/administration/student' component={StudentListe}>\r\n                    <StudentListe currentPerson= {currentPerson}/>\r\n                  </Route>\r\n\r\n                  <Route path='/administration/user' component={UserListe}>\r\n                    <UserListe currentPerson= {currentPerson}/>\r\n                  </Route>\r\n\r\n                </>\r\n                :\r\n                // if not signed in show sign in page\r\n                <>\r\n                  <Redirect to='/index.html' />\r\n                  <SignIn onSignIn={this.handleSignIn} />\r\n                </>\r\n            }\r\n            <LoadingProgress show={authLoading} />\r\n            <ContextErrorMessage error={authError} contextErrorMsg={`Something went wrong during signIn process.`} onReload={this.handleSignIn} />\r\n            <ContextErrorMessage error={appError} contextErrorMsg={`Doh! Something went wrong inside the app. Please reload the page.`} />\r\n          </Container>\r\n        </Router>\r\n      </ThemeProvider>\r\n    );\r\n\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}